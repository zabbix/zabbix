# Create a host, link it to a template and verify the result using host.get.

steps:
  step1:
    request:
      method:  host.create
      params:
        host: "Linux server"
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            groupid: @fixtures.base.result.groupid@

    expect: result

    response:
      hostids:
        - { _assert: string }

  step2:
    request:
      method: host.get
      params:
        hostids: ["@steps.step1.response.hostids[0]@"]
        selectGroups: [groupid]
        selectInterfaces: [ip]
        selectParentTemplate: [templateid]

    expect: result

    response:
      -
        hostid: @steps.step1.response.hostids[0]@
        host: @steps.step1.request.params.host@
        name: @steps.step1.request.params.host@
        proxy_hostid: "0"
        status: "0"
        disable_until: "0"
        error: ""
        available: "0"
        errors_from: "0"
        lastaccess: "0"
        ipmi_authtype: "0"
        ipmi_privilege: "2"
        ipmi_username: ""
        ipmi_password: ""
        ipmi_disable_until: "0"
        ipmi_available: "0"
        snmp_disable_until: "0"
        snmp_available: "0"
        maintenanceid: "0"
        maintenance_status: "0"
        maintenance_type: "0"
        maintenance_from: "0"
        ipmi_errors_from: "0"
        snmp_errors_from: "0"
        ipmi_error: ""
        snmp_error: ""
        jmx_disable_until: "0"
        jmx_available: "0"
        jmx_errors_from: "0"
        jmx_error: ""
        flags: "0"
        templateid: "0"
        description: ""
        groups:
          -
            groupid: @steps.step1.request.params.groups[0].groupid@
        interfaces:
          -
            ip: @steps.step1.request.params.interfaces[0].ip@
