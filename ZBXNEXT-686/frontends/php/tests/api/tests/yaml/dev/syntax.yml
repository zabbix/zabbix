# this test requires no additional fixtures, only the "base" fixture will be loaded
# fixtures: []

# an array of steps that will be executed one-by-one
steps:
  # Step 1, try to create a host and make sure a single ID is returned
  step1:
    # the API request to perform
    request:
      method:  host.create
      params:
        host: "Linux server"
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            # macros can be used to reference values returned by fixtures
            groupid: '@fixtures.base.result.groupid@'

    # validate the received result
    assertResult:
      hostids:
        # "_assert" makes sure that the value passes the given validator
        - { _assert: { id: ~ } }

  # Step 2, retrieve the newly created host and check that it has a correct host name and status
  step2:
    request:
      method: host.get
      params:
        output: [host, host, status]
        # macros can be used to reference values from the previous steps
        hostids: ["@steps.step1.response.result.hostids[0]@"]

    assertResult:
      -
        # macros can be used in the response as well
        # this will match the value of "hostid" to the ID returned by host.create in step1
        hostid: '@steps.step1.response.result.hostids[0]@'
        host: '@steps.step1.request.params.host@'
        # a simple match
        status: "0"

  # Step 3, try to create a host with the same name and make sure an error is triggered.
  step3:
    request:
      method: host.create
      params:
        host: '@steps.step1.request.params.host@'
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            groupid: '@fixtures.base.result.groupid@'

    # in this step we expect an error
    assertError:
      message: "Invalid params."
      # macros can also be used inside of strings
      data: "Host with the same name \"@steps.step1.request.params.host@\" already exists."
      code: -32602

  # Step 4, try to create a host the same way as in step 1, but use different validators to check the result
  step4:
    request:
      method:  host.create
      params:
        host: "Linux server 2"
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            groupid: '@fixtures.base.result.groupid@'

    assertResult:
      hostids:
        # check that "hostis" is a non-empty array
        _assert:
          collection: { empty: false }
        # check that the keys are sequential, i.e., 0, 1, 2 etc
        _keys:
          collection: { empty: false }
        # check that each element is an ID
        _each:
          id: ~

  # Step 5, try to call the host.create method without an authentication token
  step5:
    request:
      method: host.create
      params: {}
      # don't send an authentication token
      auth: null
      # set a custon request id
      id: 1

    # validate the whole response
    assertResponse:
      jsonrpc: "2.0"
      error:
        code: -32602
        message: "Invalid params."
        data: "Not authorised."
      id: '@steps.step5.request.id@'
