# fixture files to load for this test case

fixtures:
  hostGroups:
    type: include
    params:
      file: hostGroups

# an array of steps that will be executed one-by-one
steps:
  # Step 1, try to create a host and make sure a single ID is returned
  step1:
    # the API request to perform
    request:
      method:  host.create
      params:
        host: "Linux server"
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            # macros can be used to reference values returned by fixtures
            groupid: @fixtures.hostGroups.result.groupid@

    # what to expect: either "result" or "error"
    expect: result

    # validate the received response
    # depending on the value of "expect", the rules will be matched against the data contained in "result" or "error"
    response:
      hostids:
        # "_assert" makes sure that the value passes the given validator
        - { _assert: string }

  # Step 2, retrieve the newly created host and check that it has a correct host name and status
  step2:
    request:
      method: host.get
      params:
        output: [host, host, status]
        # macros can be used to reference values from the previous steps
        hostids: ["@steps.step1.response.hostids[0]@"]

    expect: result

    response:
      -
        # macros can be used in the response as well
        # this will match the value of "hostid" to the ID returned by host.create in step1
        hostid: @steps.step1.response.hostids[0]@
        host: @steps.step1.request.params.host@
        # a simple match
        status: "0"

  # Step 3, try to create a host with the same name and make sure an error is triggered.
  step3:
    request:
      method: host.create
      params:
        host: @steps.step1.request.params.host@
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            groupid: @fixtures.hostGroups.result.groupid@

    # in this step we expect an error
    expect: error

    response:
      message: "Invalid params."
      # macros can also be used inside of strings
      data: "Host with the same name \"@steps.step1.request.params.host@\" already exists."
      code: -32602

  # Step 4, try to create a host the same way as in step 1, but use different validators to check the result
  step4:
    request:
      method:  host.create
      params:
        host: "Linux server 2"
        interfaces:
          -
            type: 1
            main: 1
            useip: 1
            ip: "192.168.3.1"
            dns: ""
            port: "10050"
        groups:
          -
            groupid: @fixtures.hostGroups.result.groupid@

    expect: result

    response:
      hostids:
        # check that "hostis" is an array containing one element
        _assert: arr|length(1)
        # check that the keys are sequential, i.e., 0, 1, 2 etc
        _keys: sequence
        # check that each element is a string
        _each: string
