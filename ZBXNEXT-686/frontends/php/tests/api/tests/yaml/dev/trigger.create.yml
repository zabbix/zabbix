fixtures:
  hostWithItem:
    groupid: '@fixtures.base.result.groupid@'

steps:

  step1:
    request:
      method: trigger.create
      params:
        description: "Low memory on {HOST.NAME}"
        expression: "{@fixtures.hostWithItem.result.host@:@fixtures.hostWithItem.result.itemKey@.last()}<1024"

    assertResult:
      triggerids:
        _assert: { collection: ~ }

  step2:
    request:
      method: trigger.get
      params:
        selectFunctions: extend
        selectHosts: [host]
        triggerids: '@steps.step1.response.result.triggerids[0]@'

    assertResult:
      -
        triggerid: '@steps.step1.response.result.triggerids[0]@'

        # since we don't know the ID of the function, validate the expression using a regex
        expression: { _assert: { string: { regex: "/^{[0-9]+}<1024$/" } } }

        description: '@steps.step1.request.params.description@'
        url: ""
        status: 0
        value: 0
        priority: 0
        lastchange: 0
        comments: ""
        error: ""
        templateid: 0
        type: 0
        state: 0
        flags: 0
        functions:
          -
            # assert that IDs are strings
            functionid: { _assert: { id: ~ } }
            itemid: { _assert: { id: ~ } }

            triggerid: '@steps.step1.response.result.triggerids[0]@'
            function: "last"
            parameter: ""

        # make sure that the trigger was created on the correct host
        hosts:
          -
            hostid: { _assert: { id: ~ } }
            host: Zabbix server

  # validate that the expression and descriptions are expanded correctly
  step3:
    request:
      method: trigger.get
      params:
        output: [expression, description]
        expandDescription: true
        expandExpression: true

    assertResult:
      -
        triggerid: '@steps.step1.response.result.triggerids[0]@'
        expression: '@steps.step1.request.params.expression@'
        description: "Low memory on @fixtures.hostWithItem.result.host@"
