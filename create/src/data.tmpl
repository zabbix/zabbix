--
-- Copyright (C) 2001-2025 Zabbix SIA
--
-- This program is free software: you can redistribute it and/or modify it under the terms of
-- the GNU Affero General Public License as published by the Free Software Foundation, version 3.
--
-- This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License along with this program.
-- If not, see <https://www.gnu.org/licenses/>.
--

TABLE |role
FIELDS|roleid|name            |type|readonly|
ROW   |1     |User role       |1   |0       |
ROW   |2     |Admin role      |2   |0       |
ROW   |3     |Super admin role|3   |1       |
ROW   |4     |Guest role      |1   |0       |

TABLE |ugset
FIELDS|ugsetid|hash                                                            |
ROW   |1      |b21d61561974b06cbeb97a71ca880e92f0fc06d49ac3246280afb88dfa6050a6|

TABLE |users
FIELDS|userid|username|name  |surname      |passwd                                                      |url |autologin|autologout|refresh|rows_per_page|roleid|
ROW   |1     |Admin   |Zabbix|Administrator|$2y$10$92nDno4n0Zm7Ej7Jfsz8WukBfgSS/U0QkIuu8WkJPihXBb2A1UrEK|    |1        |0         |30s    |50           |3     |
ROW   |2     |guest   |      |             |$2y$10$89otZrRNmde97rIyzclecuk6LwKAsHN0BcvoOKGjbT.BwMBfm7G06|    |0        |15m       |30s    |50           |4     |

TABLE |hstgrp
FIELDS|groupid|name                        |flags|uuid                            |type|
ROW   |1      |Templates                   |0    |7df96b18c230490a9a0a9e2307226338|1   |
ROW   |2      |Linux servers               |0    |dc579cd7a1a34222933f24f52a68bcd8|0   |
ROW   |4      |Zabbix servers              |0    |6f6799aa69e844b4b3918f779f2abf08|0   |
ROW   |5      |Discovered hosts            |0    |f2481361f99448eea617b7b1d4765566|0   |
ROW   |6      |Virtual machines            |0    |137f19e6e2dc4219b33553b812627bc2|0   |
ROW   |7      |Hypervisors                 |0    |1b837a3c078647049a0c00c61b4d57b5|0   |
ROW   |9      |Templates/Network devices   |0    |36bff6c29af64692839d077febfc7079|1   |
ROW   |10     |Templates/Operating systems |0    |846977d1dfed4968bc5f8bdb363285bc|1   |
ROW   |11     |Templates/Server hardware   |0    |e960332b3f6c46a1956486d4f3f99fce|1   |
ROW   |12     |Templates/Applications      |0    |a571c0d144b14fd4a87a9d9b2aa9fcd6|1   |
ROW   |13     |Templates/Databases         |0    |748ad4d098d447d492bb935c907f652f|1   |
ROW   |14     |Templates/Virtualization    |0    |02e4df4f20b848e79267641790f241da|1   |
ROW   |15     |Templates/Telephony         |0    |1d12408342854fd5a4436dd6d5d1bd4a|1   |
ROW   |16     |Templates/SAN               |0    |7c2cb727f85b492d88cd56e17127c64d|1   |
ROW   |17     |Templates/Video surveillance|0    |d37f71c7e3f7469bab645852a69a2018|1   |
ROW   |18     |Templates/Power             |0    |3dcd5bbe90534f9e8eb5c2d53756af63|1   |
ROW   |19     |Applications                |0    |a571c0d144b14fd4a87a9d9b2aa9fcd6|0   |
ROW   |20     |Databases                   |0    |748ad4d098d447d492bb935c907f652f|0   |
ROW   |21     |Templates/Cloud             |0    |c2c162144c2d4c5491c8801193af4945|1   |

TABLE |drules
FIELDS|druleid|proxyid|name         |iprange        |delay|status|concurrency_max|
ROW   |2      |NULL   |Local network|192.168.0.1-254|1h   |1     |0              |

TABLE |dchecks
FIELDS|dcheckid|druleid|type|key_        |snmp_community|ports|snmpv3_securityname|snmpv3_securitylevel|snmpv3_authpassphrase|snmpv3_privpassphrase|uniq|snmpv3_authprotocol|snmpv3_privprotocol|snmpv3_contextname|host_source|name_source|allow_redirect|
ROW   |2       |2      |9   |system.uname|              |10050|                   |0                   |                     |                     |0   |0                  |0                  |                  |1          |0          |0             |

TABLE |media_type
FIELDS|mediatypeid|type|name                    |smtp_server                            |smtp_helo  |smtp_email        |exec_path|gsm_modem |username|passwd|smtp_port|smtp_security|smtp_verify_peer|smtp_verify_host|smtp_authentication|maxsessions|maxattempts|attempt_interval|message_format|script|timeout|process_tags|show_event_menu|event_menu_url                        |event_menu_name                                             |description|provider|
ROW   |1          |0   |Email                   |mail.example.com                       |example.com|zabbix@example.com|         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |0             ||30s    |0           |0              |                                      |                                                            ||0       |
ROW   |3          |2   |SMS                     |                                       |           |                  |         |/dev/ttyS0|        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |0       |
ROW   |4          |0   |Email (HTML)            |mail.example.com                       |example.com|zabbix@example.com|         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            ||0       |
ROW   |34         |0   |Gmail                   |smtp.gmail.com                         |example.com|zabbix@example.com|         |          |        |      |587      |1            |0               |0               |1                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |1       |
ROW   |35         |0   |Gmail relay             |smtp-relay.gmail.com                   |example.com|zabbix@example.com|         |          |        |      |587      |1            |0               |0               |0                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            ||2       |
ROW   |36         |0   |Office365               |smtp.office365.com                     |example.com|zabbix@example.com|         |          |        |      |587      |1            |0               |0               |1                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            ||3       |
ROW   |37         |0   |Office365 relay         |example-com.mail.protection.outlook.com|example.com|zabbix@example.com|         |          |        |      |25       |1            |0               |0               |0                  |1          |3          |10s             |1             ||30s    |0           |0              |                                      |                                                            ||4       |
ROW   |38         |4   |Brevis.one              |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var BrevisOne = {&eol;    params: [],&eol;&eol;    addParam: function (name, value) {&eol;        BrevisOne.params.push(name + '=' + encodeURIComponent(value));&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        BrevisOne.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setPayload: function (params) {&eol;        var parts = params.send_to.split(':'),&eol;            defaultValues = {&eol;                ring: 'true',&eol;                flash: 'true',&eol;                telauto: 'false'&eol;            };&eol;&eol;        BrevisOne.addParam('username', params.username);&eol;        BrevisOne.addParam('password', params.password);&eol;        BrevisOne.addParam('text', params.text);&eol;&eol;        if (parts.length > 1) {&eol;            BrevisOne.addParam('mode', parts[0]);&eol;            BrevisOne.addParam('to', parts[1]);&eol;        }&eol;        else {&eol;            BrevisOne.addParam('to', parts[0]);&eol;        }&eol;&eol;        Object.keys(defaultValues)&eol;            .forEach(function (key) {&eol;                if (params[key] && params[key].trim() && params[key].toLowerCase() === defaultValues[key]) {&eol;                    BrevisOne.addParam(key, defaultValues[key]);&eol;                }&eol;            });&eol;    },&eol;&eol;    request: function () {&eol;        var response,&eol;            request = new HttpRequest(),&eol;            data = '?' + BrevisOne.params.join('&');&eol;&eol;        request.addHeader('Content-Type: multipart/form-data');&eol;&eol;        if (typeof BrevisOne.HTTPProxy !== 'undefined' && BrevisOne.HTTPProxy !== '') {&eol;            request.setProxy(BrevisOne.HTTPProxy);&eol;        }&eol;&eol;        Zabbix.log(4, '[ BrevisOne Webhook ] Sending request.');&eol;&eol;        response = request.post(params.endpoint + data);&eol;&eol;        Zabbix.log(4, '[ BrevisOne Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response) {&eol;                message += ': ' + response;&eol;            }&eol;&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    ['endpoint', 'password', 'username', 'text', 'send_to'].forEach(function (field) {&eol;        if (typeof params !== 'object' &pipe;&pipe; typeof params[field] === 'undefined'&eol;                &pipe;&pipe; !params[field].trim()) {&eol;            throw 'Required parameter is not set: "' + field + '".';&eol;        }&eol;    });&eol;&eol;    if (params.send_to === '{ALERT.SENDTO}') {&eol;        throw 'Required parameter is not set: "send_to".';&eol;    }&eol;&eol;    BrevisOne.setProxy(params.HTTPProxy);&eol;    BrevisOne.setPayload(params);&eol;    BrevisOne.request();&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ BrevisOne Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            ||0       |
ROW   |39         |4   |Discord                 |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;var SEVERITY_COLORS = [&eol;&tab;'#97AAB3',&eol;&tab;'#7499FF',&eol;&tab;'#FFC859',&eol;&tab;'#FFA059',&eol;&tab;'#E97659',&eol;&tab;'#E45959',&eol;&tab;'#009900'&eol;],&eol;&tab;serviceLogName = 'Discord Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Discord = CWebhook;&eol;&eol;function stringTruncate(str, len) {&eol;&tab;return str.length > len ? str.substring(0, len - 3) + '...' : str;&eol;}&eol;&eol;Discord.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({discord_endpoint: {type: 'string', url: true}, zabbix_url: {type: 'string', url: true}, alert_message: {type: 'string'},&eol;&tab;&tab;alert_subject: {type: 'string'}, event_nseverity: {type: 'integer', default: 1}, user_agent: {type: 'string'}}, this.params);&eol;&eol;&tab;this.params.discord_endpoint = this.params.discord_endpoint.replace('/api/', '/api/v10/') + '?wait=True';&eol;&eol;&tab;if (this.params.event_source === '3' && this.params.event_value === '1') {&eol;&tab;&tab;this.params.event_nseverity = 4;&eol;&tab;}&eol;&eol;&tab;if (this.params.event_value === '0') {&eol;&tab;&tab;this.params.event_nseverity = 6;&eol;&tab;}&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({event_id: {type: 'integer'}, trigger_id: {type: 'integer'}}, this.params);&eol;&tab;}&eol;&eol;&tab;this.data = {&eol;&tab;&tab;embeds: [&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;color: parseInt(SEVERITY_COLORS[this.params.event_nseverity].replace('#', ''), 16),&eol;&tab;&tab;&tab;&tab;url: CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id),&eol;&tab;&tab;&tab;&tab;title: stringTruncate(this.params.alert_subject, 256),&eol;&tab;&tab;&tab;&tab;description: stringTruncate(this.params.alert_message, 4096)&eol;&tab;&tab;&tab;}&eol;&tab;&tab;]&eol;&tab;};&eol;};&eol;&eol;Discord.prototype.onEvent = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;this.request.addHeaders({"User-Agent": this.params.user_agent});&eol;&tab;const response = this.request.jsonRequest('POST', this.params.discord_endpoint, this.data);&eol;&eol;&tab;if (!response.id) {&eol;&tab;&tab;const error_message = CParamValidator.isType(response.message, 'string') ? response.message : 'Unknown error';&eol;&eol;&tab;&tab;throw error_message + '. For more details check the Zabbix server log.';&eol;&tab;}&eol;&eol;&tab;return 'OK';&eol;};&eol;&eol;&eol;try {&eol;&tab;var hook = new Discord(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            |This media type integrates your Zabbix installation with your Discord server using the Zabbix webhook feature.&eol;&eol;Discord configuration:&eol;&eol;1. Go to `https://discord.com/app` or open the Discord desktop application. Open your *Server Settings* and head to the *Integrations* tab.  &eol;2. Press the *Create Webhook* button to create a new webhook.&eol;3. Click on the webhook that has been created and edit the details if needed.&eol;4. After setting up your Discord webhook press "Save Changes". Now you can copy Discord webhook URL now by pressing "Copy Webhook URL" or you can view it later.&eol;&eol;Zabbix configuration:&eol;&eol;1. Before you can start using Discord webhook, set up the global macro "{$ZABBIX.URL}":&eol;- In the Zabbix web interface, go to "Administration" → "Macros" section in the dropdown menu in the top left corner.&eol;- Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend. The URL should be either an IP address, a fully qualified domain name, or localhost.&eol;- Specifying a protocol is mandatory, whereas the port is optional. Depending on the web server configuration you might also need to append "/zabbix" to the end of URL. Good examples: &eol;  - http://zabbix.com&eol;  - https://zabbix.lan/zabbix&eol;  - http://server.zabbix.lan/&eol;  - http://localhost&eol;  - http://127.0.0.1:8080&eol;- Bad examples:&eol;  - zabbix.com&eol;  - http://zabbix/&eol;&eol;2. Create a Zabbix user and add media:&eol;- If you want to create a new user, go to the "Users" → "Users" section, click the "Create user" button in the top right corner. In the "User" tab, fill in all required fields (marked with red asterisks). &eol;- In the "Media" tab, add a new media and select "Discord" type from the drop-down list. The "Send to" field must contain the URL of the Discord webhook created before.&eol;- Make sure this user has access to all hosts for which you would like problem notifications to be sent to Discord.&eol;&eol;3. Great! You can now start using this media type in actions and receive alerts!&eol;&eol;You can find the latest version of this media and additional information in the official Zabbix repository:&eol;https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/discord|0       |
ROW   |40         |4   |Event-Driven Ansible    |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Eda = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        var required_params = [&eol;                'send_to',&eol;                'event_source',&eol;                'event_value',&eol;                'event_date',&eol;                'event_time'],&eol;            integer_fields = [&eol;                'event_id',&eol;                'event_nseverity',&eol;                'event_object',&eol;                'event_source',&eol;                'event_value',&eol;                'host_id',&eol;                'trigger_id'];&eol;&eol;        required_params.forEach(function (field) {&eol;            if (typeof params !== 'object' &pipe;&pipe; typeof params[field] === 'undefined' &pipe;&pipe; params[field] === '') {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        Eda.params = params;&eol;&eol;        integer_fields.forEach(function (key) {&eol;                if (typeof Eda.params[key] !== 'undefined') {&eol;                    if (isNaN(Eda.params[key])) {&eol;                        throw 'Parameter "' + key + '" must be integer. Given value: ' + Eda.params[key];&eol;                    }&eol;                    Eda.params[key] = parseInt(Eda.params[key]);&eol;                }&eol;            });&eol;&eol;        // Check type of event. Possible values: 0 - Trigger&eol;        if (params.event_source != 0) {&eol;            throw ('Incorrect "event_source" parameter given: ' + params.event_source &eol;                + '\nOnly trigger-based events are supported');&eol;        }&eol;&eol;        // Check trigger update and trigger resolve events&eol;        if (params.event_source == 0 && params.event_value != 1) {&eol;            throw ('Incorrect "event_value" parameter given: "' + params.event_value &eol;                + '".\nOnly trigger-based events of problem are supported');&eol;        }&eol;        &eol;        // Check endpoint&eol;        Eda.params.endpoint = (Eda.params.endpoint.startsWith('/'))&eol;                ? Eda.params.endpoint : '/' + Eda.params.endpoint;&eol;        // Prepare groups&eol;        Eda.params.host_groups = (typeof Eda.params['host_groups'] !== 'undefined')&eol;                ? this.prepareHostgroups(Eda.params.host_groups): []&eol;        // Prepare tags&eol;        Eda.params.event_tags = (typeof Eda.params['event_tags'] !== 'undefined')&eol;                ? this.transformTags(Eda.params.event_tags): {}&eol;        // Prepare timestamp&eol;        Eda.params.event_datetime_timestamp = this.getTimestamp(&eol;            Eda.params.event_date, Eda.params.event_time)&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Eda.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    prepareHostgroups: function (hostgroups) {&eol;        var host_groups = []; &eol;        hostgroups.split(',').forEach(function (group) {&eol;            group = group.trim();&eol;            if (group.length > 0) {&eol;                host_groups.push(group);&eol;            }&eol;        });&eol;        return host_groups;&eol;    },&eol;&eol;    getTimestamp: function (date, time) {&eol;        try {&eol;            return Date.parse(date.split('.').join('-') + 'T' + time + '.000Z') / 1000 + new Date().getTimezoneOffset() * 60;&eol;        } catch (_) {}&eol;    &eol;        throw ('Failed to parse event time.');&eol;    },&eol;&eol;    transformTags: function (event_tags) {&eol;        var tags = {};&eol;        if (event_tags) {&eol;            try {&eol;                JSON.parse(event_tags).forEach(function (object) {&eol;                    var tag = object['tag'];&eol;                    tags[tag] = tags[tag] &pipe;&pipe; [];&eol;                    tags[tag].push(object['value']);&eol;                });&eol;            } catch (error) {&eol;                throw 'Event tags format is invalid.';&eol;            }&eol;        }&eol;    &eol;        return tags;&eol;    },&eol;&eol;    sendMessage: function () {&eol;        var response, request = new HttpRequest();&eol;        var url = Eda.params['send_to'] + Eda.params['endpoint'];&eol;        var data = JSON.stringify(Eda.params);&eol;        Zabbix.log(4, '[ Event-Driven Ansible webhook ] URL: ' + url + ' data: ' + data);&eol;        &eol;        if (typeof Eda.HTTPProxy !== 'undefined' && Eda.HTTPProxy !== '') {&eol;            request.setProxy(Eda.HTTPProxy);&eol;        }&eol;        request.addHeader('Content-Type: application/json');&eol;        response = request.post(url, data);&eol;        &eol;        Zabbix.log(4, '[ Event-Driven Ansible webhook ] HTTP code: ' + request.getStatus()&eol;            + ' response: ' + response);&eol;&eol;        if (request.getStatus() !== 200) {&eol;            throw 'Request failed with status code ' + request.getStatus() + ': ' + response;&eol;        }&eol;    }&eol;};&eol;&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;    &eol;    Eda.setParams(params);&eol;    Eda.setProxy(params.HTTPProxy);&eol;    Eda.sendMessage();&eol;    return true;&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ Event-Driven Ansible webhook ] notification failed: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            ||0       |
ROW   |41         |4   |Express.ms              |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Express = {&eol;    params: [],&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Express.params = params;&eol;&eol;        if (typeof Express.params.url === 'string' && !Express.params.url.endsWith('/')) {&eol;            Express.params.url += '/';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Express.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    request: function (query, data) {&eol;        var response,&eol;            url = Express.params.url + query,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Authorization: Bearer ' + Express.params.token);&eol;&eol;        if (typeof Express.HTTPProxy !== 'undefined' && Express.HTTPProxy !== '') {&eol;            request.setProxy(Express.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ Express Webhook ] Sending request: ' + url +&eol;            ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        response = request.post(url, data);&eol;&eol;        Zabbix.log(4, '[ Express Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ Express Webhook ] Failed to parse response received from Express');&eol;                response = {};&eol;            }&eol;        }&eol;&eol;        if (response.status !== 'ok') {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (typeof response.reason !== 'undefined') {&eol;                message += ': ' + JSON.stringify(response.reason);&eol;            }&eol;&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;&eol;        return response.result;&eol;    },&eol;&eol;    postMessage: function (is_problem) {&eol;        var data,&eol;            url,&eol;            result = {tags: {}},&eol;            response;&eol;&eol;        if (is_problem) {&eol;            data = {&eol;                group_chat_id: Express.params.send_to,&eol;                notification: {&eol;                    status: 'ok',&eol;                    body: Express.params.message&eol;                }&eol;            };&eol;            url = 'api/v4/botx/notifications/direct';&eol;        }&eol;        else {&eol;            data = {&eol;                reply: {&eol;                    status: 'ok',&eol;                    body: Express.params.message&eol;                }&eol;            };&eol;            url = 'api/v3/botx/events/reply_event';&eol;&eol;            try {&eol;                var tags = JSON.parse(Express.params.tags);&eol;            }&eol;            catch (error) {&eol;                throw 'Value of "express_tags" is not JSON. Value: ' + Express.params.tags + '.';&eol;            }&eol;&eol;            tags.forEach(function(tag) {&eol;                if (tag.tag === '__zbx_ex_sync_id_' + Express.params.send_to) {&eol;                    data.source_sync_id = tag.value;&eol;                }&eol;            });&eol;&eol;            if (!data.source_sync_id) {&eol;                throw 'Cannot update data. sync_id for the provided sender is unknown.';&eol;            }&eol;        }&eol;&eol;        response = Express.request(url, data);&eol;&eol;        if (is_problem && response.sync_id) {&eol;            result.tags['__zbx_ex_sync_id_' + Express.params.send_to] = response.sync_id;&eol;&eol;            return JSON.stringify(result);&eol;        }&eol;        else {&eol;            return 'OK';&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        express = {},&eol;        required_params = [&eol;            'express_url', 'express_send_to', 'express_message', 'express_tags', 'express_token',&eol;            'event_source', 'event_value', 'event_update_status'&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('express_')) {&eol;                express[key.substring(8)] = params[key];&eol;            }&eol;&eol;            if (required_params.indexOf(key) !== -1&eol;                    && (params[key].trim() === '' &pipe;&pipe; params[key] === '{ALERT.SENDTO}')) {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Forcing event_value and event_update_status for non trigger-based events.&eol;    if (params.event_source !== '0' ) {&eol;        params.event_value = '1';&eol;        params.event_update_status = '0';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1') {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    Express.setParams(express);&eol;    Express.setProxy(params.HTTPProxy);&eol;&eol;    return Express.postMessage(params.event_value === '1' && params.event_update_status === '0');&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ Express Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |0              |                                      |                                                            ||0       |
ROW   |42         |4   |GitHub                  |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;var serviceLogName = 'GitHub Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;GitHub = CWebhook;&eol;&eol;GitHub.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;alert_message: {type: 'string'},&eol;&tab;&tab;alert_subject: {type: 'string'},&eol;&tab;&tab;github_api_version: {type: 'string'},&eol;&tab;&tab;github_repo: {type: 'string'},&eol;&tab;&tab;github_token: {type: 'string'},&eol;&tab;&tab;github_url: {type: 'string', url: true},&eol;&tab;&tab;github_user_agent: {type: 'string'},&eol;&tab;&tab;github_zabbix_event_priority_label_prefix: {type: 'string', default: 'Zabbix Event Priority: '},&eol;&tab;&tab;github_zabbix_event_source_label_prefix: {type: 'string', default: 'Zabbix Event Source: '},&eol;&tab;&tab;github_zabbix_event_status_label_prefix: {type: 'string', default: 'Zabbix Event Status: '},&eol;&tab;&tab;github_zabbix_generic_label: {type: 'string', default: 'Zabbix GitHub Webhook'},&eol;&tab;&tab;zabbix_url: {type: 'string', url: true}&eol;&tab;}, this.params);&eol;&eol;&tab;this.request_headers = {&eol;&tab;&tab;'User-Agent': this.params.github_user_agent,&eol;&tab;&tab;'Accept': 'application/vnd.github+json',&eol;&tab;&tab;'X-GitHub-Api-Version': this.params.github_api_version,&eol;&tab;&tab;'Authorization': 'Bearer ' + this.params.github_token&eol;&tab;};&eol;&eol;&tab;this.payload_data = {&eol;&tab;&tab;title: this.params.alert_subject,&eol;&tab;&tab;labels: [&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;name: this.params.github_zabbix_generic_label&eol;&tab;&tab;&tab;}&eol;&tab;&tab;]&eol;&tab;};&eol;&eol;&tab;this.result = {tags: {}};&eol;};&eol;&eol;function checkResponse(response, received_code, required_code, response_field, error_message) {&eol;&tab;if (received_code != required_code &pipe;&pipe; !CParamValidator.isDefined(response[response_field])) {&eol;&tab;&tab;var message = error_message + ' Request failed with status code ' + received_code;&eol;&eol;&tab;&tab;if (CParamValidator.isDefined(response.message) && Object.keys(response.message).length > 0) {&eol;&tab;&tab;&tab;message += ': ' + response.message;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;throw message + ' Check debug log for more information.';&eol;&tab;}&eol;}&eol;&eol;GitHub.prototype.createIssue = function () {&eol;&tab;this.payload_data.body = this.params.alert_message + '\n' + CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&eol;&tab;this.request.addHeaders(this.request_headers);&eol;&eol;&tab;const response = this.request.jsonRequest('POST', this.params.github_url + '/repos/' + this.params.github_repo + '/issues', this.payload_data);&eol;&eol;&tab;checkResponse(response, this.request.getStatus(), 201, 'number', 'Cannot create GitHub issue.');&eol;&eol;&tab;return response;&eol;}&eol;&eol;GitHub.prototype.updateIssue = function () {&eol;&tab;this.request.addHeaders(this.request_headers);&eol;&eol;&tab;const response = this.request.jsonRequest('PATCH', this.params.github_url + '/repos/' + this.params.github_repo + '/issues/' + this.params.github_issue_number, this.payload_data);&eol;&eol;&tab;checkResponse(response, this.request.getStatus(), 200, 'number', 'Cannot update GitHub issue.');&eol;&eol;&tab;return response;&eol;}&eol;&eol;GitHub.prototype.addIssueComment = function () {&eol;&tab;this.payload_data = {&eol;&tab;&tab;body: this.params.alert_message&eol;&tab;};&eol;&eol;&tab;this.request.addHeaders(this.request_headers);&eol;&eol;&tab;const response = this.request.jsonRequest('POST', this.params.github_url + '/repos/' + this.params.github_repo + '/issues/' + this.params.github_issue_number + '/comments', this.payload_data);&eol;&eol;&tab;checkResponse(response, this.request.getStatus(), 201, 'id', 'Cannot add comment for GitHub issue.');&eol;&eol;&tab;return response;&eol;}&eol;&eol;GitHub.prototype.onProblem = function (alert) {&eol;&tab;if (CParamValidator.isMacroSet(this.params.github_issue_number)) {&eol;&tab;&tab;return this.onUpdate(alert);&eol;&tab;}&eol;&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({event_id: {type: 'integer'}, trigger_id: {type: 'integer'}}, this.params);&eol;&tab;}&eol;&eol;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_source_label_prefix + alert.source});&eol;&eol;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_status_label_prefix + 'Problem'});&eol;&eol;&tab;if (!CParamValidator.isEmpty(this.params.event_severity) && CParamValidator.isMacroSet(this.params.event_severity, 'EVENT.SEVERITY')) {&eol;&tab;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_priority_label_prefix + this.params.event_severity});&eol;&tab;}&eol;&eol;&tab;const response = this.createIssue();&eol;&eol;&tab;this.result.tags = {&eol;&tab;&tab;__zbx_github_issue_number: response.number,&eol;&tab;&tab;__zbx_github_repo: this.params.github_repo,&eol;&tab;&tab;__zbx_github_link: response.html_url&eol;&tab;};&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GitHub.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;if (!CParamValidator.isMacroSet(this.params.github_issue_number)) {&eol;&tab;&tab;throw "Failed to update the existing issue: no issue number was received."&eol;&tab;}&eol;&eol;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_source_label_prefix + alert.source});&eol;&eol;&tab;if (this.params.event_value === '0') {&eol;&tab;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_status_label_prefix + 'Resolved'});&eol;&tab;} else {&eol;&tab;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_status_label_prefix + 'Problem'});&eol;&tab;}&eol;&eol;&tab;if (!CParamValidator.isEmpty(this.params.event_severity) && CParamValidator.isMacroSet(this.params.event_severity, 'EVENT.SEVERITY')) {&eol;&tab;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_priority_label_prefix + this.params.event_severity});&eol;&tab;}&eol;&eol;&tab;this.updateIssue();&eol;&eol;&tab;this.request.clearHeader();&eol;&tab;this.addIssueComment();&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GitHub.prototype.onResolve = function (alert) {&eol;&tab;return this.onUpdate(alert);&eol;}&eol;&eol;GitHub.prototype.onDiscovery = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;this.payload_data.labels.push({name: this.params.github_zabbix_event_source_label_prefix + alert.source});&eol;&eol;&tab;this.createIssue();&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GitHub.prototype.onAutoreg = function (alert) {&eol;&tab;return this.onDiscovery(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new GitHub(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_github_link}        |Github: Issue {EVENT.TAGS.__zbx_github_issue_number}        |This media type integrates your Zabbix installation with GitHub using the Zabbix webhook feature.&eol;&eol;GitHub configuration:&eol;&eol;1. Create an access token.&eol;&eol;One of the simplest ways to send authenticated requests is to use a personal access token - either a classic or a fine-grained one:&eol;https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28#authenticating-with-a-personal-access-token&eol;&eol;Classic personal access token&eol;&eol;You can create a new classic personal access token by following the instructions in the official documentation:&eol;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic&eol;&eol;The token user must have a permission to create issues and issue comments in the desired repositories. For webhook to work on private repositories, the "repo" scope must be set in token settings to have full control of private repositories.&eol;&eol;Additional information about OAuth scopes is available in the official documentation:&eol;https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes&eol;&eol;Fine-grained personal access token&eol;&eol;Alternatively, you can use a fine-grained personal access token:&eol;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token&eol;&eol;In order to use fine-grained tokens to monitor organization-owned repositories, organizations must opt in to fine-grained personal access tokens and set up a personal access token policy:&eol;https://docs.github.com/en/organizations/managing-programmatic-access-to-your-organization/setting-a-personal-access-token-policy-for-your-organization&eol;&eol;The fine-grained token needs to have the following permission set to provide access to the repository issues:&eol;- "Issues" repository permissions (write)&eol;&eol;2. Copy and save the created token somewhere, as it will be shown only once for security reasons.&eol;&eol;Zabbix configuration:&eol;&eol;1. Before you can start using Zammad webhook, set up the global macro "{$ZABBIX.URL}":&eol;- In the Zabbix web interface, go to "Administration" → "Macros" section in the dropdown menu in the top left corner.&eol;- Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend. The URL should be either an IP address, a fully qualified domain name, or localhost.&eol;- Specifying a protocol is mandatory, whereas the port is optional. Depending on the web server configuration you might also need to append "/zabbix" to the end of URL. Good examples:&eol;  - http://zabbix.com&eol;  - https://zabbix.lan/zabbix&eol;  - http://server.zabbix.lan/&eol;  - http://localhost&eol;  - http://127.0.0.1:8080&eol;- Bad examples:&eol;  - zabbix.com&eol;  - http://zabbix/&eol;&eol;2. Set the "github_token" webhook parameter value to the access token that you created previously.&eol;&eol;You can also adjust the issue labels created by the webhook in the following parameters:&eol;- github_zabbix_event_priority_label_prefix - the prefix for the issue label that displays the Zabbix event priority in the supported event sources. It is set to "Zabbix Event Priority: " by default.&eol;- github_zabbix_event_source_label_prefix - the prefix for the issue label that displays the Zabbix event source. It is set to "Zabbix Event Source: " by default.&eol;- github_zabbix_event_status_label_prefix - the prefix for the issue label that displays the Zabbix event status. It is set to "Zabbix Event Status: " by default.&eol;- github_zabbix_generic_label - the label that is added to all issues created by the webhook. It is set to "Zabbix GitHub Webhook" by default.&eol;&eol;Note that the webhook will reuse the labels with the same name that already exist in the repository (including the color, so it can changed from the default value for new labels in GitHub, if needed). Also, the labels are replaced when the issue is updated, so any user-added labels will be removed.&eol;&eol;4. Create a Zabbix user and add media:&eol;- If you want to create a new user, go to the "Users" → "Users" section, click the "Create user" button in the top right corner. In the "User" tab, fill in all required fields (marked with red asterisks).&eol;- In the "Media" tab, add a new media and select "Zammad" type from the drop-down list. In field "Send to" specify the full repo name (owner/project name) e.g. johndoe/example-project.&eol;- Make sure this user has access to all hosts for which you would like problem notifications to be sent to GitHub.&eol;&eol;5. Great! You can now start using this media type in actions and create GitHub issues!&eol;&eol;You can find the latest version of this media and additional information in the official Zabbix repository:&eol;https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/github|0       |
ROW   |43         |4   |GLPi                    |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |1          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const serviceLogName = 'GLPi Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;GLPi = CWebhook;&eol;&eol;GLPi.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;alert_message: { type: 'string' },&eol;&tab;&tab;alert_subject: { type: 'string' },&eol;&tab;&tab;zabbix_url: { type: 'string', url: true },&eol;&tab;&tab;glpi_url: { type: 'string', url: true },&eol;&tab;&tab;glpi_token: { type: 'string' }&eol;&tab;}, this.params);&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({ trigger_id: { type: 'integer' }, event_id: { type: 'integer' } }, this.params);&eol;&tab;&tab;this.params.zabbix_url = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&tab;}&eol;&eol;&tab;if (params.event_value != '0' && CParamValidator.isMacroSet(this.params.glpi_problem_id)) {&eol;&tab;&tab;this.params.event_update_status = '1';&eol;&tab;}&eol;&eol;&tab;this.data = {&eol;&tab;&tab;input: {&eol;&tab;&tab;&tab;name: this.params.alert_subject,&eol;&tab;&tab;&tab;urgency: (this.params.event_nseverity = isNaN(Number(this.params.event_nseverity)) ? 2 : this.params.event_nseverity)&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;this.dataFollowup = {&eol;&tab;&tab;input: {&eol;&tab;&tab;&tab;items_id: this.params.glpi_problem_id,&eol;&tab;&tab;&tab;itemtype: 'Problem',&eol;&tab;&tab;&tab;content: this.params.alert_message + '<br> <a href=' + this.params.zabbix_url + '>Link to problem in Zabbix</a>',&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;this.result = { tags: {} };&eol;}&eol;&eol;GLPi.prototype.getAuthToken = function () {&eol;&eol;&tab;this.request.addHeaders('Authorization: user_token ' + this.params.glpi_token);&eol;&tab;var response = this.request.jsonRequest('post', this.params.glpi_url + '/apirest.php/initSession');&eol;&eol;&tab;if ((this.request.getStatus() !== 200 && this.request.getStatus() !== 201)) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.description, 'string')) {&eol;&tab;&tab;&tab;throw response.description;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;Logger.log(Logger.INFO, 'Request not successful. Received response: ' + JSON.stringify(response));&eol;&tab;&tab;&tab;throw 'Unknown INFO. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&tab;if (!CParamValidator.isType(response.session_token, 'string') &pipe;&pipe; CParamValidator.isEmpty(response.session_token)) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'Check getting GLPi sessionToken: ' + response.session_token);&eol;&tab;&tab;throw 'Required GLPi sessionToken is not received.';&eol;&tab;}&eol;&eol;&tab;return response.session_token;&eol;}&eol;&eol;GLPi.prototype.sendRequest = function (method, path, data) {&eol;&eol;&tab;this.request.clearHeader();&eol;&tab;this.request.addHeaders('Session-Token:' + this.params.authToken);&eol;&tab;var response = this.request.jsonRequest(method, this.params.glpi_url + path, data);&eol;&eol;&tab;if ((this.request.getStatus() !== 200 && this.request.getStatus() !== 201)) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.description, 'string')) {&eol;&tab;&tab;&tab;throw response.description;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;Logger.log(Logger.INFO, 'Request not successful. Received response: ' + JSON.stringify(response));&eol;&tab;&tab;&tab;throw 'Unknown INFO. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;return response;&eol;}&eol;&eol;GLPi.prototype.createProblem = function (status) {&eol;&tab;this.data.input.content = this.params.alert_message + '<br> <a href=' + this.params.zabbix_url + '>Link to problem in Zabbix</a>';&eol;&eol;&tab;if (CParamValidator.isDefined(status)) {&eol;&tab;&tab;this.data.input.status = status;&eol;&tab;}&eol;&eol;&tab;var response = this.sendRequest('post', '/apirest.php/Problem/', this.data);&eol;&eol;&tab;if (!CParamValidator.isDefined(response.id)) {&eol;&tab;&tab;throw 'Cannot create GPLi problem. Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;return response.id&eol;}&eol;&eol;GLPi.prototype.updateProblem = function (status) {&eol;&tab;CParamValidator.validate({ glpi_problem_id: { type: 'string' } }, this.params);&eol;&tab;this.data.id = this.params.glpi_problem_id;&eol;&eol;&tab;if (CParamValidator.isDefined(status)) {&eol;&tab;&tab;this.data.input.status = status;&eol;&tab;}&eol;&eol;&tab;this.sendRequest('put', '/apirest.php/Problem/' + this.params.glpi_problem_id, this.data);&eol;&tab;this.sendRequest('post', '/apirest.php/Problem/' + this.params.glpi_problem_id + '/ITILFollowup', this.dataFollowup);&eol;}&eol;&eol;GLPi.prototype.onProblem = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;const problem_id = this.createProblem(1)&eol;&eol;&tab;this.result.tags.__zbx_glpi_problem_id = problem_id;&eol;&tab;this.result.tags.__zbx_glpi_link = this.params.glpi_url + '/front/problem.form.php?id=' + problem_id;&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GLPi.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.updateProblem();&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GLPi.prototype.onResolve = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.updateProblem(5);&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;GLPi.prototype.onDiscovery = function () {&eol;&tab;return this.createProblem();&eol;}&eol;&eol;GLPi.prototype.onAutoreg = function () {&eol;&tab;return this.createProblem();&eol;}&eol;&eol;try {&eol;&tab;var hook = new GLPi(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;hook.params.authToken = hook.getAuthToken();&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_glpi_link}          |GLPi: Problem {EVENT.TAGS.__zbx_glpi_problem_id}            |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/glpi&eol;&eol;1. To make this integration work, you will need the following from GLPi:&eol;  * GLPi instance URL;&eol;  * GLPi user token. API token obtained by going to Administration → Users → create or use existing user → Remote access keys → Regenerate API token.&eol;2. In the Zabbix web interface, go to Administration → Macros section. Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend.&eol;3. On this page replace the placeholder '<...>' values with the ones from the step #1.&eol;4. In Zabbix, you need to have a Zabbix user and add Media with the GLPi media type. Make sure this user has access to all hosts for which you would like problem issues to be created in GLPi.                                                                                                                                                                                                                                        |0       |
ROW   |44         |4   |iLert                   |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |try {&eol;    var result = { tags: {} },&eol;        params = JSON.parse(value),&eol;        req = new HttpRequest(),&eol;        resp = '';&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.setProxy(params.HTTPProxy);&eol;    }&eol;    var alertSourceKey = params['.ILERT.ALERT.SOURCE.KEY'];&eol;    if (!alertSourceKey &pipe;&pipe; (typeof alertSourceKey === 'string' && alertSourceKey.trim() === '')) {&eol;        throw 'incorrect value for variable "ILERT.ALERT.SOURCE.KEY". The value must be a non-empty string.';&eol;    }&eol;    delete params['.ILERT.ALERT.SOURCE.KEY'];&eol;    &eol;    var ilertApiBaseURL = "https://api.ilert.com";&eol;    var reqURL = encodeURI(ilertApiBaseURL + "/api/v1/events/zabbix-mt/" + alertSourceKey)&eol;&eol;    var incidentKey = "zabbix-" + params['EVENT.ID'];&eol;    var incidentViewURL = ilertApiBaseURL + "/api/v1/incidents/resolve-ik/" + alertSourceKey + "/" + incidentKey;&eol;&eol;    req.addHeader('Accept: application/json');&eol;    req.addHeader('Content-Type: application/json');&eol;&eol;    Zabbix.log(4, '[iLert Webhook] Sending request:' + JSON.stringify(params));&eol;    resp = req.post(reqURL, JSON.stringify(params));&eol;    Zabbix.log(4, '[iLert Webhook] Receiving response:' + resp);&eol;&eol;    try {&eol;        resp = JSON.parse(resp);&eol;    }&eol;    catch (error) {&eol;        throw 'incorrect response. iLert returned a non-JSON object.';&eol;    }&eol;&eol;    if (req.getStatus() == 200) {&eol;        result.tags.__ilert_incident_url = incidentViewURL;&eol;        return JSON.stringify(result);&eol;    }&eol;&eol;    if (req.getStatus() == 400 && typeof resp === 'object' && typeof resp.code === 'string') {&eol;        if (resp.code === 'NO_OPEN_INCIDENT_WITH_KEY') {&eol;          return JSON.stringify(result);&eol;        }&eol;        if (resp.code === 'INCIDENT_ALREADY_ACCEPTED') {&eol;          result.tags.__ilert_incident_url = incidentViewURL;&eol;          return JSON.stringify(result);&eol;        }&eol;    }&eol;&eol;    if (typeof resp === 'object' && typeof resp.message === 'string') {&eol;        throw resp.message;&eol;    }&eol;    else {&eol;        throw 'Unknown error.';&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[iLert Webhook] Notification failed : ' + error);&eol;    throw 'iLert notification failed : ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__ilert_incident_url}     |iLert incident                                              |Please refer to https://docs.ilert.com/integrations/zabbix/native &eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add a dedicated user with the media type "iLert". You can also rewrite the incident summary via ".ILERT.INCIDENT.SUMMARY" parameter or leave it empty to use the standard pattern|0       |
ROW   |45         |4   |iTop                    |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Itop = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        if (params.log !== 'private_log' && params.log !== 'public_log') {&eol;            throw 'Incorrect "itop_log" parameter given: ' + params.log + '\nMust be "private_log" or "public_log".';&eol;        }&eol;&eol;        Itop.params = params;&eol;        if (typeof Itop.params.url === 'string') {&eol;            if (!Itop.params.url.endsWith('/')) {&eol;                Itop.params.url += '/';&eol;            }&eol;&eol;            Itop.params.url += 'webservices/rest.php?version=' + encodeURIComponent(Itop.params.api_version);&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Itop.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setCreatePayload: function () {&eol;        json_data.operation = 'core/create';&eol;        json_data.fields.org_id = Itop.params.organization_id;&eol;        json_data.fields.title = params.alert_subject;&eol;        json_data.fields.description = params.alert_message.replace('<', '&lt;')&eol;            .replace('>', '&gt;')&eol;            .replace(/(?:\r\n&pipe;\r&pipe;\n)/g, '<br>');&eol;    },&eol;&eol;    setUpdatePayload: function () {&eol;        json_data.operation = 'core/update';&eol;        json_data.key = Itop.params.id;&eol;        json_data.fields.title = params.alert_subject;&eol;        json_data.fields[Itop.params.log] = {&eol;            add_item: {&eol;                message: params.alert_subject + '\n' + params.alert_message,&eol;                format: 'text'&eol;            }&eol;        };&eol;    },&eol;&eol;    request: function (data) {&eol;        ['url', 'user', 'password', 'organization_id', 'class', 'api_version', 'id'].forEach(function (field) {&eol;            if (typeof Itop.params !== 'object' &pipe;&pipe; typeof Itop.params[field] === 'undefined'&eol;                    &pipe;&pipe; Itop.params[field] === '' ) {&eol;                throw 'Required Itop param is not set: "itop_' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Itop.params.url,&eol;            request = new HttpRequest(),&eol;            object;&eol;&eol;        request.addHeader('Content-Type: multipart/form-data');&eol;        request.addHeader('Authorization: Basic ' + btoa(Itop.params.user + ':' + Itop.params.password));&eol;&eol;        if (Itop.HTTPProxy) {&eol;            request.setProxy(Itop.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ iTop Webhook ] Sending request: ' + url + '&json_data=' + data);&eol;&eol;        response = request.post(url + '&json_data=' + encodeURIComponent(data));&eol;&eol;        Zabbix.log(4, '[ iTop Webhook ] Received response with status code ' + request.getStatus() + '\n' + response);&eol;&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.log(4, '[ iTop Webhook ] Failed to parse response received from iTop');&eol;            throw 'Failed to parse response received from iTop.\nRequest status code ' +&eol;                    request.getStatus() + '. Check debug log for more information.';&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            throw 'Request failed with status code ' + request.getStatus() + '. Check debug log for more information.';&eol;        }&eol;        else if (typeof response.code !== 'undefined' && response.code !== 0) {&eol;            throw 'Request failed with iTop code ' + response.code + ': ' +&eol;                    JSON.stringify(response.message) + '. Check debug log for more information.';&eol;        }&eol;        else {&eol;            Object.keys(response.objects)&eol;                .forEach(function (key) {&eol;                    object = response.objects[key];&eol;                });&eol;    &eol;            return {&eol;                status: request.getStatus(),&eol;                response: object.fields&eol;            };&eol;        }&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        json_data = {},&eol;        itop_params = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'summary', 'event_recovery_value',&eol;            'event_source', 'event_value', 'action_name'&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('itop_')) {&eol;                itop_params[key.substring(5)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;            && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    Itop.setParams(itop_params);&eol;    Itop.setProxy(params.HTTPProxy);&eol;&eol;    json_data.operation = '';&eol;    json_data.class = Itop.params.class;&eol;    json_data.comment = Itop.params.comment;&eol;    json_data.output_fields = 'id, friendlyname';&eol;    json_data.fields = {};&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        Itop.setCreatePayload();&eol;        Itop.request(json_data);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && params.event_update_status === '0'&eol;            && (Itop.params.id === '{EVENT.TAGS.__zbx_itop_id}' &pipe;&pipe; Itop.params.id === '*UNKNOWN*')) {&eol;        Itop.setCreatePayload();&eol;&eol;        var response = Itop.request(json_data);&eol;&eol;        result.tags.__zbx_itop_id = response.response.id;&eol;        result.tags.__zbx_itop_key = response.response.friendlyname;&eol;        result.tags.__zbx_itop_link = params.itop_url + (params.itop_url.endsWith('/') ? '' : '/') +&eol;                'pages/UI.php?operation=details&class=' + encodeURIComponent(Itop.params.class) + '&id=' +&eol;                encodeURIComponent(response.response.id);&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        if (Itop.params.id === '{EVENT.TAGS.__zbx_itop_id}' &pipe;&pipe; Itop.params.id === '*UNKNOWN*') {&eol;            throw 'Incorrect iTop ticket ID given: ' + Itop.params.id;&eol;        }&eol;        Itop.setUpdatePayload();&eol;        Itop.request(json_data);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ iTop Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_itop_link}          |iTop: {EVENT.TAGS.__zbx_itop_key}                           |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |0       |
ROW   |46         |4   |Jira                    |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;var ZABBIX_SEVERITY_MAP = ["not_classified", "information", "warning", "average", "high", "disaster"];&eol;&eol;var serviceLogName = 'Jira Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Jira = CWebhook;&eol;&eol;Jira.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;jira_url: { type: 'string', url: true},&eol;&tab;&tab;jira_user: { type: 'string' },&eol;&tab;&tab;jira_password: { type: 'string' },&eol;&tab;&tab;jira_issue_type: { type: 'string' },&eol;&tab;&tab;jira_project_key: { type: 'string' },&eol;&tab;&tab;event_source: { type: 'string' },&eol;&tab;&tab;alert_subject: { type: 'string' },&eol;&tab;&tab;alert_message: { type: 'string' },&eol;&tab;&tab;event_nseverity: { type: 'integer', default: 0 }&eol;&tab;}, this.params);&eol;&eol;&tab;this.priority = this.params.event_source == 3 ? this.params.jira_priority_internal : this.params['severity_' + ZABBIX_SEVERITY_MAP[this.params.event_nseverity]];&eol;&tab;this.params.event_tags_json = parseTags(this.params.event_tags_json, false);&eol;&eol;&tab;if (this.params.event_tags_json.length > 0) {&eol;&tab;&tab;this.labels = setLabels(this.params.event_tags_json);&eol;&tab;}&eol;&eol;&tab;parseOptionalFields();&eol;&eol;&tab;this.result = { tags: {} };&eol;}&eol;&eol;function escapeMarkup(str) {&eol;&tab;var length = str.length,&eol;&tab;&tab;result = '',&eol;&tab;&tab;markup = ['{', '&pipe;', '}', '~', '_', '\\', '[', ']', '^', '<', '>', '?', '!', '#', '+', '*', '&'];&eol;&eol;&tab;for (var i = 0; i < length; i++) {&eol;&tab;&tab;var char = str[i];&eol;&tab;&tab;result += (markup.indexOf(char) !== -1) ? ('&#' + str[i].charCodeAt() + ';') : char;&eol;&tab;}&eol;&eol;&tab;return result;&eol;}&eol;&eol;function parseOptionalFields() {&eol;&tab;this.params.customfields = {};&eol;&tab;this.params.components = [];&eol;&eol;&tab;Object.keys(this.params).forEach(function (key) {&eol;&tab;&tab;if (key.startsWith('customfield_')) {&eol;&tab;&tab;&tab;this.params.customfields[key] = this.params[key];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (key.startsWith('component_')) {&eol;&tab;&tab;&tab;this.params.components.push({"name": this.params[key]})&eol;&tab;&tab;}&eol;&tab;});&eol;}&eol;&eol;Jira.prototype.addCustomFields = function (data) {&eol;&tab;if (typeof this.params.customfields === 'object' && Object.keys(this.params.customfields).length) {&eol;&tab;&tab;var schemaData = this.sendRequest('GET', '/rest/api/latest/field'),&eol;&tab;&tab;&tab;schema = {};&eol;&eol;&tab;&tab;schemaData.forEach(function (item) {&eol;&tab;&tab;&tab;schema[item.id] = item.schema;&eol;&tab;&tab;});&eol;&eol;&tab;&tab;Object.keys(this.params.customfields).forEach(function (field) {&eol;&tab;&tab;&tab;if (typeof schema[field] === 'object' && schema[field].type) {&tab;&tab;&tab;&tab;&eol;&tab;&tab;&tab;&tab;const type = schema[field].type;&eol;&eol;&tab;&tab;&tab;&tab;if (type === 'number') {&eol;&tab;&tab;&tab;&tab;&tab;data.fields[field] = parseInt(this.params.customfields[field]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'string' && schema[field]['custom'].split(':')[1] === 'url') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field] === 'zabbix_url') {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&tab;&tab;&tab;&tab;&tab;} else {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = this.params.customfields[field];&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'date') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field].match(/\d+[.-]\d+[.-]\d+/) !== null) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = this.params.customfields[field].replace(/\./g, '-');&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'datetime') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = this.params.customfields[field].replace(/\./g, '-');&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'option') {&eol;&tab;&tab;&tab;&tab;&tab;data.fields[field] = { 'value': this.params.customfields[field] };&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'array') {&eol;&tab;&tab;&tab;&tab;&tab;if (schema[field].items === 'option') {&eol;&tab;&tab;&tab;&tab;&tab;&tab;const valuesList = this.params.customfields[field].split(',');&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = [];&eol;&tab;&tab;&tab;&tab;&tab;&tab;valuesList.forEach(function (val) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field].push({'value': val})&eol;&tab;&tab;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data.fields[field] = [this.params.customfields[field]];&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;data.fields[field] = this.params.customfields[field];&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;});&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;Logger.log(Logger.WARN, 'No customfields found.');&eol;&tab;}&eol;&eol;&tab;return data;&eol;}&eol;&eol;function parseTags(event_tags) {&eol;&tab;try {&eol;&tab;&tab;return JSON.parse(event_tags);&eol;&tab;}&eol;&tab;catch (error) {&eol;&tab;&tab;if (this.params.event_source == 0 &pipe;&pipe; this.params.event_source > 2) {&eol;&tab;&tab;&tab;Logger.log(Logger.WARN, 'No event tags were found. Should be an object. Received event tags: "' + event_tags + '".');&eol;&tab;&tab;}&eol;&tab;&tab;return [];&eol;&tab;}&eol;}&eol;&eol;function getTagValue(tags, key, throw_on_fail) {&eol;&tab;for (i in tags) {&eol;&tab;&tab;if (tags[i].tag === key) {&eol;&tab;&tab;&tab;return tags[i].value&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;if (!throw_on_fail) {&eol;&tab;&tab;return false;&eol;&tab;} else {&eol;&tab;&tab;throw 'Tag "' + key + '" is not in the event tag list.'&eol;&tab;}&eol;};&eol;&eol;function setLabels(event_tags_json) {&eol;&tab;var buffer = [];&eol;&eol;&tab;event_tags_json.forEach(function (tag) {&eol;&tab;&tab;if (typeof tag.tag !== 'undefined' && typeof tag.value !== 'undefined' && !tag.tag.startsWith('__zbx')) {&eol;&tab;&tab;&tab;label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;&tab;&tab;&tab;if (label.length < 256) {&eol;&tab;&tab;&tab;&tab;buffer.push(label);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;});&eol;&eol;&tab;if (buffer.length === 0) {&eol;&tab;&tab;Logger.log(Logger.WARN, 'No labels were set.');&eol;&tab;}&eol;&eol;&tab;return buffer;&eol;}&eol;&eol;Jira.prototype.commentIssue = function (issue_key) {&eol;&tab;var data = {&eol;&tab;&tab;body: this.params.alert_message,&eol;&tab;};&eol;&tab;this.sendRequest('POST', '/rest/api/latest/issue/' + encodeURIComponent(issue_key) + '/comment', data);&eol;}&eol;&eol;Jira.prototype.sendRequest = function (method, path, data) {&eol;&tab;this.request.clearHeader();&eol;&tab;this.request.addHeaders('Authorization: Basic ' + btoa(this.params.jira_user + ':' + this.params.jira_password));&eol;&eol;&tab;var response = this.request.jsonRequest(method, this.params.jira_url + path, data);&eol;&eol;&tab;if ((this.request.getStatus() !== 200 && this.request.getStatus() !== 201)) {&eol;&tab;&tab;Logger.log(Logger.WARN, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.description, 'string')) {&eol;&tab;&tab;&tab;throw response.description;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;Logger.log(Logger.WARN, 'Request not successful. Received response: ' + JSON.stringify(response));&eol;&tab;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;return response;&eol;}&eol;&eol;Jira.prototype.onProblem = function (alert) {&eol;&tab;if (this.params.event_tags_json.length > 0 && getTagValue(this.params.event_tags_json, '__zbx_jira_issuekey', false) !== false) {&eol;&tab;&tab;return this.onUpdate(alert, true);&eol;&tab;}&eol;&eol;&tab;var data = {&eol;&tab;&tab;fields: {&eol;&tab;&tab;&tab;project: {&eol;&tab;&tab;&tab;&tab;key: this.params.jira_project_key&eol;&tab;&tab;&tab;},&eol;&tab;&tab;&tab;issuetype: {&eol;&tab;&tab;&tab;&tab;name: this.params.jira_issue_type&eol;&tab;&tab;&tab;},&eol;&tab;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;&tab;description: this.params.alert_message,&eol;&tab;&tab;&tab;priority: {&eol;&tab;&tab;&tab;&tab;"name": this.priority&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;if (this.labels && this.labels.length > 0) {&eol;&tab;&tab;data.fields.labels = this.labels;&eol;&tab;}&eol;&eol;&tab;if (this.params.components && this.params.components.length > 0) {&eol;&tab;&tab;data.fields.components = this.params.components;&eol;&tab;}&eol;&eol;&tab;var response = this.sendRequest('POST', '/rest/api/latest/issue', this.addCustomFields(data));&eol;&tab;this.result.tags = {&eol;&tab;&tab;__zbx_jira_issuekey: response.key,&eol;&tab;&tab;__zbx_jira_issuelink: this.params.jira_url + '/browse/' + response.key&eol;&tab;}&eol;&tab;return this.result;&eol;}&eol;&eol;Jira.prototype.onUpdate = function (alert, dontUpdatePriority) {&eol;&tab;var data = {&eol;&tab;&tab;fields: {&eol;&tab;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;&tab;priority: {&eol;&tab;&tab;&tab;&tab;"name": this.priority&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;if (dontUpdatePriority && this.params.event_source != 0) {&eol;&tab;&tab;delete data['fields']['priority'];&eol;&tab;}&eol;&eol;&tab;var jira_issue_key = getTagValue(this.params.event_tags_json, '__zbx_jira_issuekey', true);&eol;&tab;this.sendRequest('PUT', '/rest/api/latest/issue/' + encodeURIComponent(jira_issue_key) + '?returnIssue=true', this.addCustomFields(data));&eol;&tab;this.commentIssue(jira_issue_key);&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;Jira.prototype.onResolve = function (alert) {&eol;&tab;return this.onUpdate(alert, true);&eol;}&eol;&eol;Jira.prototype.onDiscovery = function (alert) {&eol;&tab;this.priority = this.params.jira_priority_discovery;&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;Jira.prototype.onAutoreg = function (alert) {&eol;&tab;this.priority = this.params.jira_priority_autoregistration;&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new Jira(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_jira_issuelink}     |Jira: {EVENT.TAGS.__zbx_jira_issuekey}                      |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/jira&eol;&eol;1. To make this integration work, you will need the following from Jira:&eol;  * Jira instance URL;&eol;  * Jira project key and issue type that the issues created by Zabbix will use;&eol;  * Jira username and password or API token. API token is strongly recommended and can be obtained at https://id.atlassian.com/manage/api-tokens.&eol;2. In the Zabbix web interface, go to Administration → Macros section. Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend.&eol;3. On this page replace the placeholder '<...>' values with the ones from the step #1.&eol;4. In Zabbix, you need to have a Zabbix user and add Media with the Jira media type. Make sure this user has access to all hosts for which you would like problem issues to be created in Jira.                                                                                                                                                        |0       |
ROW   |47         |4   |Jira Service Management |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;var ZABBIX_SEVERITY_MAP = ["not_classified", "information", "warning", "average", "high", "disaster"];&eol;&eol;var serviceLogName = 'Jira Service Management Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Jira = CWebhook;&eol;&eol;Jira.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;jira_url: { type: 'string', url: true},&eol;&tab;&tab;jira_user: { type: 'string' },&eol;&tab;&tab;jira_password: { type: 'string' },&eol;&tab;&tab;jira_request_type_id: { type: 'string' },&eol;&tab;&tab;jira_servicedesk_id: { type: 'string' },&eol;&tab;&tab;issue_comments_public: {type: 'boolean', default: false},&eol;&tab;&tab;event_source: { type: 'string' },&eol;&tab;&tab;alert_subject: { type: 'string' },&eol;&tab;&tab;alert_message: { type: 'string' },&eol;&tab;&tab;event_nseverity: { type: 'integer', default: 0 }&eol;&tab;}, this.params);&eol;&eol;&tab;this.priority = this.params.event_source == 3 ? this.params.jira_priority_internal : this.params['severity_' + ZABBIX_SEVERITY_MAP[this.params.event_nseverity]];&eol;&tab;this.params.event_tags_json = parseTags(this.params.event_tags_json, false);&eol;&eol;&tab;if (this.params.event_tags_json.length > 0) {&eol;&tab;&tab;this.labels = setLabels(this.params.event_tags_json);&eol;&tab;}&eol;&eol;&tab;parseOptionalFields();&eol;&eol;&tab;this.result = { tags: {} };&eol;}&eol;&eol;function escapeMarkup(str) {&eol;&tab;var length = str.length,&eol;&tab;&tab;result = '',&eol;&tab;&tab;markup = ['{', '&pipe;', '}', '~', '_', '\\', '[', ']', '^', '<', '>', '?', '!', '#', '+', '*', '&'];&eol;&eol;&tab;for (var i = 0; i < length; i++) {&eol;&tab;&tab;var char = str[i];&eol;&tab;&tab;result += (markup.indexOf(char) !== -1) ? ('&#' + str[i].charCodeAt() + ';') : char;&eol;&tab;}&eol;&eol;&tab;return result;&eol;}&eol;&eol;function parseOptionalFields() {&eol;&tab;this.params.customfields = {};&eol;&tab;this.params.components = [];&eol;&eol;&tab;Object.keys(this.params).forEach(function (key) {&eol;&tab;&tab;if (key.startsWith('customfield_')) {&eol;&tab;&tab;&tab;this.params.customfields[key] = this.params[key];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (key.startsWith('component_')) {&eol;&tab;&tab;&tab;this.params.components.push({"name": this.params[key]})&eol;&tab;&tab;}&eol;&tab;});&eol;}&eol;&eol;Jira.prototype.addCustomFields = function (data, requestFieldValues) {&eol;&tab;if (typeof this.params.customfields === 'object' && Object.keys(this.params.customfields).length) {&eol;&tab;&tab;var schemaData = this.sendRequest('GET', '/rest/api/latest/field'),&eol;&tab;&tab;&tab;schema = {};&eol;&eol;&tab;&tab;schemaData.forEach(function (item) {&eol;&tab;&tab;&tab;schema[item.id] = item.schema;&eol;&tab;&tab;});&eol;&eol;&tab;&tab;var placeholder = (requestFieldValues ? 'requestFieldValues' : 'fields');&eol;&eol;&tab;&tab;Object.keys(this.params.customfields).forEach(function (field) {&eol;&tab;&tab;&tab;if (typeof schema[field] === 'object' && schema[field].type) {&eol;&tab;&tab;&tab;&tab;const type = schema[field].type;&eol;&eol;&tab;&tab;&tab;&tab;if (type === 'number') {&eol;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = parseInt(this.params.customfields[field]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'string' && schema[field]['custom'].split(':')[1] === 'url') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field] === 'zabbix_url') {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&tab;&tab;&tab;&tab;&tab;} else {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = this.params.customfields[field];&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'date') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field].match(/\d+[.-]\d+[.-]\d+/) !== null) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = this.params.customfields[field].replace(/\./g, '-');&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'datetime') {&eol;&tab;&tab;&tab;&tab;&tab;if (this.params.customfields[field].match(/\d+[.-]\d+[.-]\d+T\d+:\d+:\d+/) !== null) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = this.params.customfields[field].replace(/\./g, '-');&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'option') {&eol;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = { 'value': this.params.customfields[field] };&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (type === 'array') {&eol;&tab;&tab;&tab;&tab;&tab;if (schema[field].items === 'option') {&eol;&tab;&tab;&tab;&tab;&tab;&tab;const valuesList = this.params.customfields[field].split(',');&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = [];&eol;&tab;&tab;&tab;&tab;&tab;&tab;valuesList.forEach(function (val) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field].push({'value': val})&eol;&tab;&tab;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = [this.params.customfields[field]];&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;data[placeholder][field] = this.params.customfields[field];&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;});&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;Logger.log(Logger.WARN, 'No customfields found.');&eol;&tab;}&eol;&eol;&tab;return data;&eol;}&eol;&eol;function parseTags(event_tags) {&eol;&tab;try {&eol;&tab;&tab;return JSON.parse(event_tags);&eol;&tab;}&eol;&tab;catch (error) {&eol;&tab;&tab;if (this.params.event_source == 0 &pipe;&pipe; this.params.event_source > 2) {&eol;&tab;&tab;&tab;Logger.log(Logger.WARN, 'No event tags were found. Should be an object. Received event tags: "' + event_tags + '".');&eol;&tab;&tab;}&eol;&tab;&tab;return [];&eol;&tab;}&eol;}&eol;&eol;function getTagValue(tags, key, throw_on_fail) {&eol;&tab;for (i in tags) {&eol;&tab;&tab;if (tags[i].tag === key) {&eol;&tab;&tab;&tab;return tags[i].value&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;if (!throw_on_fail) {&eol;&tab;&tab;return false;&eol;&tab;} else {&eol;&tab;&tab;throw 'Tag "' + key + '" is not in the event tag list.'&eol;&tab;}&eol;};&eol;&eol;function setLabels(event_tags_json) {&eol;&tab;var buffer = [];&eol;&eol;&tab;event_tags_json.forEach(function (tag) {&eol;&tab;&tab;if (typeof tag.tag !== 'undefined' && typeof tag.value !== 'undefined' && !tag.tag.startsWith('__zbx')) {&eol;&tab;&tab;&tab;label = (tag.tag + (tag.value ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;&tab;&tab;&tab;if (label.length < 256) {&eol;&tab;&tab;&tab;&tab;buffer.push(label);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;});&eol;&eol;&tab;if (buffer.length === 0) {&eol;&tab;&tab;Logger.log(Logger.WARN, 'No labels were set.');&eol;&tab;}&eol;&eol;&tab;return buffer;&eol;}&eol;&eol;Jira.prototype.commentIssue = function (issue_key) {&eol;&tab;var data = {&eol;&tab;&tab;body: this.params.alert_message,&eol;&tab;&tab;public: this.params.issue_comments_public&eol;&tab;};&eol;&tab;this.sendRequest('POST', '/rest/servicedeskapi/request/' + encodeURIComponent(issue_key) + '/comment', data);&eol;}&eol;&eol;Jira.prototype.sendRequest = function (method, path, data) {&eol;&tab;this.request.clearHeader();&eol;&tab;this.request.addHeaders('Authorization: Basic ' + btoa(this.params.jira_user + ':' + this.params.jira_password));&eol;&eol;&tab;var response = this.request.jsonRequest(method, this.params.jira_url + path, data);&eol;&eol;&tab;if ((this.request.getStatus() !== 200 && this.request.getStatus() !== 201)) {&eol;&tab;&tab;Logger.log(Logger.WARN, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.description, 'string')) {&eol;&tab;&tab;&tab;throw response.description;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;Logger.log(Logger.WARN, 'Request not successful. Received response: ' + JSON.stringify(response));&eol;&tab;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;return response;&eol;}&eol;&eol;Jira.prototype.onProblem = function (alert) {&eol;&tab;if (this.params.event_tags_json.length > 0 && getTagValue(this.params.event_tags_json, '__zbx_jira_requestkey', false) !== false) {&eol;&tab;&tab;return this.onUpdate(alert, true);&eol;&tab;}&eol;&eol;&tab;var data = {&eol;&tab;&tab;serviceDeskId: this.params.jira_servicedesk_id,&eol;&tab;&tab;requestTypeId: this.params.jira_request_type_id,&eol;&tab;&tab;requestFieldValues: {&eol;&tab;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;&tab;description: this.params.alert_message,&eol;&tab;&tab;&tab;priority: {&eol;&tab;&tab;&tab;&tab;"name": this.priority&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;if (this.labels && this.labels.length > 0) {&eol;&tab;&tab;data.requestFieldValues.labels = this.labels;&eol;&tab;}&eol;&eol;&tab;if (this.params.components && this.params.components.length > 0) {&eol;&tab;&tab;data.requestFieldValues.components = this.params.components;&eol;&tab;}&eol;&eol;&tab;var response = this.sendRequest('POST', '/rest/servicedeskapi/request', this.addCustomFields(data, true));&eol;&tab;this.result.tags = {&eol;&tab;&tab;__zbx_jira_requestkey: response.issueKey,&eol;&tab;&tab;__zbx_jira_requestlink: this.params.jira_url + '/browse/' + response.issueKey&eol;&tab;}&eol;&tab;return this.result;&eol;}&eol;&eol;Jira.prototype.onUpdate = function (alert, dontUpdatePriority) {&eol;&tab;var data = {&eol;&tab;&tab;fields: {&eol;&tab;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;&tab;priority: {&eol;&tab;&tab;&tab;&tab;"name": this.priority&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;if (dontUpdatePriority && this.params.event_source != 0) {&eol;&tab;&tab;delete data['fields']['priority'];&eol;&tab;}&eol;&eol;&tab;var jira_issue_key = getTagValue(this.params.event_tags_json, '__zbx_jira_requestkey', true);&eol;&tab;this.sendRequest('PUT', '/rest/api/latest/issue/' + encodeURIComponent(jira_issue_key) + '?returnIssue=true', this.addCustomFields(data));&eol;&tab;this.commentIssue(jira_issue_key);&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;Jira.prototype.onResolve = function (alert) {&eol;&tab;return this.onUpdate(alert, true);&eol;}&eol;&eol;Jira.prototype.onDiscovery = function (alert) {&eol;&tab;this.priority = this.params.jira_priority_discovery;&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;Jira.prototype.onAutoreg = function (alert) {&eol;&tab;this.priority = this.params.jira_priority_autoregistration;&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new Jira(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_jira_requestlink}   |Jira Service Management: {EVENT.TAGS.__zbx_jira_requestkey} |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/jira_service_management&eol;&eol;1. To make this integration work, you will need the following from Jira:&eol;  * Jira instance URL;&eol;  * Jira service desk id and request type id that the issues created by Zabbix will use;&eol;  * Jira username and password or API token. API token is strongly recommended and can be obtained at https://id.atlassian.com/manage/api-tokens.&eol;2. In the Zabbix web interface, go to Administration → Macros section. Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend.&eol;3. On this page replace the placeholder '<...>' values with the ones from the step #1.&eol;4. In Zabbix, you need to have a Zabbix user and add Media with the Jira Service Management media type. Make sure this user has access to all hosts for which you would like problem issues to be created in Jira.                                                                                                         |0       |
ROW   |48         |4   |Line                    |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |function sendMessage(to, messages, params) {&eol;    var response,&eol;        request = new HttpRequest();&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        request.setProxy(params.HTTPProxy);&eol;    }&eol;&eol;    request.addHeader('Content-Type: application/json');&eol;    request.addHeader('Authorization: Bearer ' + params.bot_token);&eol;&eol;    response = request.post('https://api.line.me/v2/bot/message/push', JSON.stringify({&eol;        "to": to,&eol;        "messages": messages&eol;    }));&eol;&eol;    if (request.getStatus() !== 200) {&eol;        throw response;&eol;    }&eol;}&eol;&eol;function validateParams(params) {&eol;    if (typeof params.bot_token !== 'string' &pipe;&pipe; params.bot_token.trim() === '') {&eol;        throw 'Field "bot_token" cannot be empty';&eol;    }&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    if (params.event_source !== '0') {&eol;        params.event_nseverity = '0';&eol;        params.event_severity = 'Not classified';&eol;        params.event_update_status = '0';&eol;    }&eol;&eol;    if (params.event_source === '1' &pipe;&pipe; params.event_source === '2') {&eol;        params.event_value = '1';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1') {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (isNaN(params.trigger_id) && params.event_source === '0') {&eol;        throw 'field "trigger_id" is not a number';&eol;    }&eol;&eol;    if (typeof params.zabbix_url !== 'string' &pipe;&pipe; params.zabbix_url.trim() === '') {&eol;        throw 'Field "zabbix_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.zabbix_url)) {&eol;        throw 'Field "zabbix_url" must contain a schema';&eol;    }&eol;}&eol;&eol;function getZabbixProblemLink(params) {&eol;    return params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id;    &eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    validateParams(params);&eol;&eol;    severity_emoji = [&eol;        "\u26AA",&eol;        "\uD83D\uDD35",&eol;        "\uD83D\uDFE4",&eol;        "\uD83D\uDFE1",&eol;        "\uD83D\uDFE0",&eol;        "\uD83D\uDD34",&eol;    ];&eol;&eol;    // If its a trigger and a recovery operation and not an update operation.&eol;    if (params.event_source === '0' && params.event_value === '0' && params.event_update_status === '0') {&eol;        var line_message = [&eol;            {&eol;                "type": "text",&eol;                "text": '\u2705 ' + params.alert_subject + '\n\n' + params.alert_message + '\n' + params.trigger_description + '\n\n' + getZabbixProblemLink(params)&eol;            }&eol;        ];&eol;    }&eol;    // If its a trigger and its a problem.&eol;    else if (params.event_source === '0' && params.event_value === '1') {&eol;        var line_message = [&eol;            {&eol;                "type": "text",&eol;                "text": severity_emoji[params.event_nseverity] + ' ' + params.alert_subject + '\n\n' + params.alert_message + '\n' + params.trigger_description + '\n\n' + getZabbixProblemLink(params)&eol;            }&eol;        ];&eol;    }&eol;    // If its a trigger and its an update operation.&eol;    else if (params.event_source === '0' && params.event_update_status === '1') {&eol;        var line_message = [&eol;            {&eol;                "type": "text",&eol;                "text": '\u2733 ' + severity_emoji[params.event_nseverity] + ' ' + params.alert_subject + '\n\n' + params.alert_message + '\n' + params.trigger_description + '\n\n' + getZabbixProblemLink(params)&eol;            }&eol;        ];&eol;    }&eol;    else {&eol;        var line_message = [&eol;            {&eol;                "type": "text",&eol;                "text": params.alert_subject + '\n\n' + params.alert_message + '\n'&eol;            }&eol;        ];&eol;    }&eol;&eol;    sendMessage(params.send_to, line_message, params);&eol;&eol;    return 'OK';&eol;}&eol;catch (err) {&eol;    Zabbix.log(4, '[ Line Webhook ] Line notification failed : ' + err);&eol;    throw 'Line notification failed : ' + err;&eol;}|30s    |0           |0              |                                      |                                                            |Please refer to setup guide here: https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/line&eol;&eol;Set bot_token parameter to your Line bot token.&eol;When assigning Line media to the Zabbix user - add the ID of the target recipient. Use a userId, groupId, or roomId value.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |0       |
ROW   |49         |4   |ManageEngine ServiceDesk|                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var MEngine = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        MEngine.params = params;&eol;        if (typeof MEngine.params.url === 'string') {&eol;            if (!MEngine.params.url.endsWith('/')) {&eol;                MEngine.params.url += '/';&eol;            }&eol;&eol;            MEngine.params.url += 'api/v3/';&eol;        }&eol;&eol;        if (MEngine.params.on_premise.toLowerCase() !== 'true'&eol;                && typeof MEngine.params.on_demand_url_auth === 'string') {&eol;            if (!MEngine.params.on_demand_url_auth.endsWith('/')) {&eol;                MEngine.params.on_demand_url_auth += '/';&eol;            }&eol;&eol;            MEngine.params.on_demand_url_auth += 'oauth/v2/token?';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        MEngine.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    createLink: function (id, url) {&eol;        return url + (url.endsWith('/') ? '' : '/') +&eol;            ((MEngine.params.on_premise.toLowerCase() === 'true')&eol;                ? ('WorkOrder.do?woMode=viewWO&woID=' + id)&eol;                : ('app/itdesk/ui/requests/' + id + '/details')&eol;            );&eol;    },&eol;&eol;    refreshAccessToken: function () {&eol;        [&eol;            'on_demand_url_auth',&eol;            'on_demand_refresh_token',&eol;            'on_demand_client_id',&eol;            'on_demand_client_secret'&eol;        ].forEach(function (field) {&eol;            if (typeof MEngine.params !== 'object' &pipe;&pipe; typeof MEngine.params[field] === 'undefined'&eol;                    &pipe;&pipe; MEngine.params[field].trim() === '' ) {&eol;                throw 'Required MEngine param is not set: "sd_' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            request = new HttpRequest(),&eol;            url = MEngine.params.on_demand_url_auth +&eol;                'refresh_token=' + encodeURIComponent(MEngine.params.on_demand_refresh_token) +&eol;                '&grant_type=refresh_token&client_id=' + encodeURIComponent(MEngine.params.on_demand_client_id) +&eol;                '&client_secret=' + encodeURIComponent(MEngine.params.on_demand_client_secret) +&eol;                '&redirect_uri=https://www.zoho.com&scope=SDPOnDemand.requests.ALL';&eol;&eol;        if (MEngine.HTTPProxy) {&eol;            request.setProxy(MEngine.HTTPProxy);&eol;        }&eol;&eol;        Zabbix.log(4, '[ ManageEngine Webhook ] Refreshing access token. Request: ' + url);&eol;&eol;        response = request.post(url);&eol;&eol;        Zabbix.log(4, '[ ManageEngine Webhook ] Received response with status code ' +&eol;        request.getStatus() + '\n' + response);&eol;&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.log(4, '[ ManageEngine Webhook ] Failed to parse response received from Zoho Accounts');&eol;        }&eol;&eol;        if ((request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) && !response.access_token) {&eol;            throw 'Access token refresh failed with HTTP status code ' + request.getStatus() +&eol;                '. Check debug log for more information.';&eol;        }&eol;        else {&eol;            MEngine.params.on_demand_auth_token = response.access_token;&eol;        }&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        var response,&eol;            url = MEngine.params.url + query,&eol;            input,&eol;            request = new HttpRequest(),&eol;            message;&eol;&eol;        if (MEngine.params.on_premise.toLowerCase() === 'true') {&eol;            request.addHeader('TECHNICIAN_KEY: ' + MEngine.params.on_premise_auth_token);&eol;        }&eol;        else {&eol;            request.addHeader('Authorization: Zoho-oauthtoken ' + MEngine.params.on_demand_auth_token);&eol;            request.addHeader('Accept: application/v3+json');&eol;        }&eol;&eol;        if (MEngine.HTTPProxy) {&eol;            request.setProxy(MEngine.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        input = 'input_data=' + encodeURIComponent(data);&eol;        Zabbix.log(4, '[ ManageEngine Webhook ] Sending request: ' + url + '?' + input);&eol;&eol;        switch (method) {&eol;            case 'post':&eol;                response = request.post(url, input);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, input);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ ManageEngine Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.log(4, '[ ManageEngine Webhook ] Failed to parse response received from ManageEngine');&eol;        }&eol;&eol;        if ((request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300)&eol;                && typeof response.response_status !== 'object') {&eol;            throw 'Request failed with HTTP status code ' + request.getStatus() +&eol;                '. Check debug log for more information.';&eol;        }&eol;        else if (typeof response.response_status === 'object' && response.response_status.status === 'failed') {&eol;            message = 'Request failed with status_code ';&eol;&eol;            if (typeof response.response_status.messages === 'object'&eol;                    && response.response_status.messages[0]&eol;                    && response.response_status.messages[0].message) {&eol;                message += response.response_status.messages[0].status_code +&eol;                    '. Message: ' + response.response_status.messages[0].message;&eol;            }&eol;            else {&eol;                message += response.response_status.status_code;&eol;            }&eol;&eol;            message += '. Check debug log for more information.';&eol;            throw message;&eol;        }&eol;        else if (response.request) {&eol;            return response.request.id;&eol;        }&eol;    },&eol;&eol;    createPaylaod: function (fields, isNote) {&eol;        var data = {},&eol;            result;&eol;&eol;        if (isNote) {&eol;            data.description = fields['field_string:description'].replace(/(?:\r\n&pipe;\r&pipe;\n)/g, '<br>');&eol;            result = {request_note: data};&eol;        }&eol;        else {&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    if (fields[field].trim() === '') {&eol;                        Zabbix.log(4, '[ ManageEngine Webhook ] Field "' + field +&eol;                            '" can\'t be empty. The field ignored.');&eol;                    }&eol;                    else {&eol;                        try {&eol;                            var prefix = field.split(':')[0],&eol;                                root;&eol;&eol;                            if  (prefix.startsWith('udf_') && !data.udf_fields) {&eol;                                data.udf_fields = {};&eol;                                root = data.udf_fields;&eol;                            }&eol;                            else if (prefix.startsWith('udf_')) {&eol;                                root = data.udf_fields;&eol;                            }&eol;                            else {&eol;                                root = data;&eol;                            }&eol;&eol;                            if (prefix.endsWith('string')) {&eol;                                root[field.substring(field.indexOf(':') + 1)&eol;                                    .toLowerCase()] = fields[field];&eol;                            }&eol;                            else {&eol;                                root[field.substring(field.indexOf(':') + 1)&eol;                                    .toLowerCase()] = {&eol;                                    name: fields[field]&eol;                                };&eol;                            }&eol;                        }&eol;                        catch (error) {&eol;                            Zabbix.log(4, '[ ManageEngine Webhook ] Can\'t parse field "' + field +&eol;                                '". The field ignored.');&eol;                        }&eol;                    }&eol;                });&eol;            if (data.description) {&eol;                data.description = data.description.replace(/(?:\r\n&pipe;\r&pipe;\n)/g, '<br>');&eol;            }&eol;&eol;            result = {request: data};&eol;        }&eol;&eol;        return result;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        sd = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'sd_on_premise', 'field_string:subject', 'field_string:description',&eol;            'event_recovery_value', 'event_source', 'event_value', 'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'default', color: '#000000'}&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('sd_')) {&eol;                sd[key.substring(3)] = params[key];&eol;            }&eol;            else if (key.startsWith('field_') &pipe;&pipe; key.startsWith('udf_field_')) {&eol;                fields[key] = params[key];&eol;            }&eol;&eol;            if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    if (params.event_update_status === '1' && (typeof params.sd_request_id === 'undefined'&eol;            &pipe;&pipe; params.sd_request_id.trim() === ''&eol;            &pipe;&pipe; params.sd_request_id === '{EVENT.TAGS.__zbx_sd_request_id}'&eol;            &pipe;&pipe; params.sd_request_id === '*UNKNOWN*')) {&eol;        throw 'Parameter "sd_request_id" can\'t be empty for update operation.';&eol;    }&eol;&eol;    MEngine.setParams(sd);&eol;    MEngine.setProxy(params.HTTPProxy);&eol;&eol;    if (MEngine.params.on_premise.toLowerCase() !== 'true') {&eol;        MEngine.refreshAccessToken();&eol;    }&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        fields['field_object:priority'] = params['priority_' + severities[params.event_nseverity].name]&eol;        &pipe;&pipe; 'Normal';&eol;&eol;        MEngine.request('post', 'requests', MEngine.createPaylaod(fields));&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && params.event_update_status === '0') {&eol;        fields['field_object:priority'] = params['priority_' + severities[params.event_nseverity].name]&eol;        &pipe;&pipe; 'Normal';&eol;&eol;        var id = MEngine.request('post', 'requests', MEngine.createPaylaod(fields));&eol;&eol;        result.tags.__zbx_sd_request_id = id;&eol;        result.tags.__zbx_sd_request_link = MEngine.createLink(id, params.sd_url);&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        if (params.event_update_status === '1') {&eol;            MEngine.request('post', 'requests/' + params.sd_request_id + '/notes',&eol;                MEngine.createPaylaod(fields, true)&eol;            );&eol;        }&eol;        delete fields['field_string:description'];&eol;        MEngine.request('put', 'requests/' + params.sd_request_id, MEngine.createPaylaod(fields));&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ ManageEngine Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_sd_request_link}    |ManageEngine: {EVENT.TAGS.__zbx_sd_request_id}              ||0       |
ROW   |50         |4   |MantisBT                |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |1          |10s             |1             |var Mantisbt = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;        Mantisbt.params = params;&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        Mantisbt.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    checkUrlFormat: function (url) {&eol;        if (typeof url === 'string' && !url.endsWith('/')) {&eol;            url += '/';&eol;        }&eol;&eol;        if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {&eol;            url = 'https://' + url;&eol;        }&eol;&eol;        return url;&eol;    },&eol;&eol;    getProblemURL: function (zabbix_url, triggerid, eventid, event_source) {&eol;        var problem_url = zabbix_url;&eol;&eol;        if (event_source === '0') {&eol;            problem_url += 'tr_events.php?triggerid=' + triggerid + '&eventid=' + eventid;&eol;        }&eol;&eol;        return problem_url;&eol;    },&eol;&eol;    request: function (method, url, data) {&eol;        ['token', 'url', 'category'].forEach(function (field) {&eol;            if (typeof Mantisbt.params !== 'object' &pipe;&pipe; typeof Mantisbt.params[field] === 'undefined' &pipe;&pipe; Mantisbt.params[field] === '') {&eol;                throw 'Required MantisBT param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Authorization: ' + Mantisbt.params.token);&eol;&eol;        if (typeof Mantisbt.HTTPProxy !== 'undefined' && Mantisbt.HTTPProxy !== '') {&eol;            request.setProxy(Mantisbt.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ MantisBT Webhook ] Sending request: ' + url + ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'patch':&eol;                response = request.patch(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ MantisBT Webhook ] Received response with status code ' + request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ MantisBT Webhook ] Failed to parse the response received from MantisBT');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (typeof response !== 'object') {&eol;            throw 'Failed to process the response received from MantisBT. Check debug log for more information.';&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (typeof response.message !== 'undefined') {&eol;                message += ': ' + response.message;&eol;            }&eol;&eol;            throw message;&eol;        }&eol;&eol;        return response;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        mantisbt = {},&eol;        url = '',&eol;        data = {},&eol;        result = { tags: {} },&eol;        required_params = [&eol;            'alert_subject', 'alert_message', 'event_source', 'event_value', 'event_update_action',&eol;            'event_update_status', 'event_recovery_value', 'event_nseverity', 'event_tagsjson',&eol;            'event_id', 'trigger_id', 'zabbix_url', 'alert_sendto',&eol;            'mantisbt_token', 'mantisbt_url', 'mantisbt_category', 'mantisbt_issue_number', 'mantisbt_use_zabbix_tags'&eol;        ],&eol;        method,&eol;        severities = ['none', 'low', 'normal', 'high', 'urgent', 'immediate'];&eol;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('mantisbt_')) {&eol;                mantisbt[key.substring(9)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1' && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported for trigger-based actions only.';&eol;    }&eol;&eol;    if (typeof params.zabbix_url !== 'string' &pipe;&pipe; params.zabbix_url.trim() === '' &pipe;&pipe; params.zabbix_url === '{$ZABBIX.URL}') {&eol;        throw 'Field "zabbix_url" cannot be empty.';&eol;    }&eol;&eol;    // Check for backslash in the end of url and schema.&eol;    mantisbt.url = Mantisbt.checkUrlFormat(mantisbt.url);&eol;    params.zabbix_url = Mantisbt.checkUrlFormat(params.zabbix_url);&eol;&eol;    // In case of resolve event.&eol;    if (params.event_source === '0' && params.event_value === '0') {&eol;        method = "patch";&eol;        url = mantisbt.url + 'api/rest/issues/' + mantisbt.issue_number;&eol;        data = {&eol;            summary: params.alert_subject,&eol;            status: {&eol;                name: "resolved"&eol;            }&eol;        };&eol;        if (/commented/.test(params.event_update_action)) {&eol;            data.additional_information = params.event_update_message;&eol;        }&eol;        process_tags = false;&eol;    }&eol;    // In case of update event.&eol;    else if (params.event_source === '0' && params.event_update_status === '1') {&eol;        method = "patch";&eol;        url = mantisbt.url + 'api/rest/issues/' + mantisbt.issue_number;&eol;        data = {&eol;            status: {},&eol;            priority: {&eol;                name: severities[parseInt(params.event_nseverity, 10)]&eol;            }&eol;        };&eol;        if (/commented/.test(params.event_update_action)) {&eol;            data.additional_information = params.event_update_message;&eol;        }&eol;        if (/acknowledged/.test(params.event_update_action)) {&eol;            data.status.name = "acknowledged";&eol;        }&eol;        if (/unacknowledged/.test(params.event_update_action)) {&eol;            data.status.name = "new";&eol;        }&eol;        process_tags = false;&eol;    }&eol;    else {&eol;        method = 'post';&eol;        url = mantisbt.url + 'api/rest/issues';&eol;&eol;        data = {&eol;            summary: params.alert_subject,&eol;            description: params.alert_message,&eol;            project: { name: params.alert_sendto },&eol;            category: { name: mantisbt.category },&eol;            priority: {&eol;                name: parseInt(params.event_nseverity, 10) ? severities[parseInt(params.event_nseverity, 10)] : "none"&eol;            }&eol;        };&eol;        if (params.event_source === '0') {&eol;            problem_url = Mantisbt.getProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source);&eol;            data.description += '\n' + problem_url;&eol;&eol;            if (mantisbt.use_zabbix_tags === "true") {&eol;                var alert_tags = JSON.parse(params.event_tagsjson);&eol;                data.tags = alert_tags.map(function (t) { return { name: t.value ? (t.tag + ': ' + t.value) : t.tag }; });&eol;            }&eol;        }&eol;        process_tags = true;&eol;    }&eol;&eol;    Mantisbt.setParams(mantisbt);&eol;    Mantisbt.setProxy(params.HTTPProxy);&eol;&eol;    var response = Mantisbt.request(method, url, data);&eol;&eol;    if (process_tags) {&eol;        result.tags.__zbx_mantisbt_issue_number = response.issue.id;&eol;        result.tags.__zbx_mantisbt_link = mantisbt.url + 'view.php?id=' + response.issue.id;&eol;    }&eol;&eol;    Zabbix.log(4, '[ MantisBT Webhook ] Result: ' + JSON.stringify(result));&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(4, '[ MantisBT Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_mantisbt_link}      |MantisBT: Issue ID {EVENT.TAGS.__zbx_mantisbt_issue_number} ||0       |
ROW   |51         |4   |Mattermost              |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |1          |10s             |1             |var SEVERITY_COLORS = [&eol;    '#97AAB3', '#7499FF', '#FFC859',&eol;    '#FFA059', '#E97659', '#E45959'&eol;];&eol;&eol;var RESOLVE_COLOR = '#009900';&eol;&eol;var SEND_MODE_HANDLERS = {&eol;    alarm: handlerAlarm,&eol;    event: handlerEvent&eol;};&eol;&eol;if (!String.prototype.format) {&eol;    String.prototype.format = function() {&eol;        var args = arguments;&eol;&eol;        return this.replace(/{(\d+)}/g, function(match, number) {&eol;            return number in args&eol;                ? args[number]&eol;                : match&eol;            ;&eol;        });&eol;    };&eol;}&eol;&eol;function isEventProblem(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 0&eol;    ;&eol;}&eol;&eol;function isEventUpdate(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 1&eol;    ;&eol;}&eol;&eol;function isEventResolve(params) {&eol;    return params.event_value == 0;&eol;}&eol;&eol;function getPermalink(mattermost_url, team_name, postid) {&eol;    return '{0}/{1}/pl/{2}'.format(&eol;        mattermost_url.replace(/\/+$/, ''),&eol;        team_name,&eol;        postid&eol;    );&eol;}&eol;&eol;function getChannel(send_to) {&eol;    switch (true) {&eol;        case /.+\/#.+/.test(send_to):&eol;            return getChannelByName(send_to);&eol;&eol;        case /@.+/.test(send_to):&eol;            return getDirectChannel(send_to);&eol;&eol;        default:&eol;            return getChannelByID(send_to);&eol;    }&eol;}&eol;&eol;function getChannelByName(send_to) {&eol;    var team_chan = send_to&eol;        .trim()&eol;        .split('/#');&eol;&eol;    var resp = JSON.parse(req.get(&eol;        Mattermost.channel_byname.format(team_chan[0], team_chan[1]),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    if (req.getStatus() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getDirectChannel(send_to) {&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var teamUser = send_to&eol;            .trim()&eol;            .split('/@'),&eol;        bot = getBotUser(),&eol;        user = getUserByName(teamUser[1]);&eol;&eol;    var resp = JSON.parse(req.post(&eol;        Mattermost.direct_channel,&eol;        JSON.stringify([bot.id, user.id])&eol;    )&eol;    );&eol;&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.getStatus() != 201) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    resp.team_name = teamUser[0];&eol;&eol;    return resp;&eol;}&eol;&eol;function getChannelByID(channelID) {&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.get(&eol;        Mattermost.get_channel.format(channelID),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.getStatus() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getBotUser() {&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.get(&eol;        Mattermost.bot_user,&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.getStatus() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getUserByName(userName) {&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.get(&eol;        Mattermost.user_byname.format(userName),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.getStatus() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getTeamByID(teamID) {&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;    ));&eol;&eol;    var resp = JSON.parse(req.get(&eol;        Mattermost.get_team.format(teamID),&eol;        JSON.stringify(fields)&eol;    )&eol;    );&eol;&eol;    Zabbix.log(5, '[ Mattermost Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;    ));&eol;&eol;    if (req.getStatus() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function createProblemURL(zabbix_url, triggerid, eventid, event_source) {&eol;    var problem_url = '';&eol;    if (event_source === '0') {&eol;        problem_url = '{0}/tr_events.php?triggerid={1}&eventid={2}'&eol;            .format(&eol;                zabbix_url,&eol;                triggerid,&eol;                eventid&eol;            );&eol;    }&eol;    else {&eol;        problem_url = zabbix_url;&eol;    }&eol;&eol;    return problem_url;&eol;}&eol;&eol;function getTagValue(event_tags, key) {&eol;    var pattern = new RegExp('(' + key + ':.+)');&eol;    var tagValue = event_tags&eol;        .split(',')&eol;        .filter(function (v) {&eol;            return v.match(pattern);&eol;        })&eol;        .map(function (v) {&eol;            return v.split(':')[1];&eol;        })[0]&eol;        &pipe;&pipe; 0;&eol;&eol;    return tagValue;&eol;}&eol;&eol;function handlerAlarm(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        var team_name = channel.team_name&eol;            ? channel.team_name&eol;            : getTeamByID(channel.team_id).name;&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.post(&eol;            Mattermost.post_message,&eol;            JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.getStatus() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_post_id = resp.id;&eol;        result.tags.__mattermost_channel_id = channel.id;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            team_name,&eol;            resp.id&eol;        );&eol;&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.root_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;&eol;        if (params.event_source === '0') {}&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source),&eol;                true&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.post(&eol;            Mattermost.post_message, JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.getStatus() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.channel_id = getTagValue(params.event_tags, 'mattermost_channel_id');&eol;        fields.id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                RESOLVE_COLOR,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source)&eol;            )&eol;        ];&eol;&eol;        var post_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;&eol;        resp = JSON.parse(req.put(&eol;            Mattermost.chat_update.format(post_id),&eol;            JSON.stringify(fields)&eol;        )&eol;        );&eol;&eol;        if (req.getStatus() != 200) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}&eol;&eol;function handlerEvent(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    };&eol;&eol;    if (isEventProblem(params)) {&eol;        var team_name = channel.team_name&eol;            ? channel.team_name&eol;            : getTeamByID(channel.team_id).name;&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source)&eol;            )&eol;        ];&eol;&eol;        var resp = JSON.parse(req.post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.getStatus() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            team_name,&eol;            resp.id&eol;        );&eol;&eol;    }&eol;    else if (isEventUpdate(params)) {&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source),&eol;                false&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.getStatus() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    }&eol;    else if (isEventResolve(params)) {&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                RESOLVE_COLOR,&eol;                params.event_recovery_date,&eol;                params.event_recovery_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id, params.event_source)&eol;            )&eol;        ];&eol;&eol;        resp = JSON.parse(req.post(Mattermost.post_message, JSON.stringify(fields)));&eol;&eol;        if (req.getStatus() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}&eol;&eol;function createMessage(&eol;    event_severity_color,&eol;    event_date,&eol;    event_time,&eol;    problem_url,&eol;    isShort&eol;) {&eol;    var message = {&eol;        fallbac: params.alert_subject,&eol;        title: params.alert_subject,&eol;        color: event_severity_color,&eol;        title_link: problem_url,&eol;        footer: problem_url,&eol;&eol;        fields: [&eol;            {&eol;                title: 'Host',&eol;                value: '{0} [{1}]'.format(params.host_name, params.host_ip),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Event time',&eol;                value: '{0} {1}'.format(event_date, event_time),&eol;                short: true&eol;            }&eol;        ],&eol;    };&eol;&eol;    &eol;    if (params.event_source === '0') {&eol;        message.fields.push(&eol;            {&eol;                title: 'Severity',&eol;                value: params.event_severity,&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Opdata',&eol;                value: params.event_opdata,&eol;                short: true&eol;            }&eol;        );&eol;    }&eol;&eol;    if (!isShort && params.event_source === '0') {&eol;        message.fields.push(&eol;            {&eol;                title: 'Event tags',&eol;                value: '`{0}`'.format(params.event_tags.replace(/__.+?:(.+?,&pipe;.+)/g, '') &pipe;&pipe; 'None'),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Trigger description',&eol;                value: params.trigger_description,&eol;                short: true&eol;            }&eol;        );&eol;    }&eol;&eol;    if (params.event_source !== '0' &pipe;&pipe; params.event_update_status === '1') {&eol;        message.fields.push(&eol;            {&eol;                title: 'Details',&eol;                value: params.alert_message,&eol;                short: false&eol;            }&eol;        );&eol;    }&eol;&eol;    return message;&eol;}&eol;&eol;function validateParams(params) {&eol;    if (typeof params.bot_token !== 'string' &pipe;&pipe; params.bot_token.trim() === '') {&eol;        throw 'Field "bot_token" cannot be empty';&eol;    }&eol;&eol;    if (isNaN(params.event_id)) {&eol;        throw 'Field "event_id" is not a number';&eol;    }&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    if (params.event_source !== '0') {&eol;        params.event_nseverity = '0';&eol;        params.event_severity = 'Not classified';&eol;        params.event_update_status = '0';&eol;        params.send_mode = 'event';&eol;    }&eol;&eol;    if (params.event_source === '1' &pipe;&pipe; params.event_source === '2') {&eol;        params.event_value = '1';&eol;    }&eol;&eol;    if (params.event_source === '1') {&eol;        params.host_name = params.discovery_host_dns;&eol;        params.host_ip = params.discovery_host_ip;&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    if (typeof params.event_severity !== 'string' &pipe;&pipe; params.event_severity.trim() === '') {&eol;        throw 'Field "event_severity" cannot be empty';&eol;    }&eol;&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1') {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (typeof params.host_ip !== 'string' &pipe;&pipe; params.host_ip.trim() === '') {&eol;        throw 'Field "host_ip" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.host_name !== 'string' &pipe;&pipe; params.host_name.trim() === '') {&eol;        throw 'Field "host_name" cannot be empty';&eol;    }&eol;&eol;    if (typeof params.mattermost_url !== 'string' &pipe;&pipe; params.mattermost_url.trim() === '') {&eol;        throw 'Field "mattermost_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.mattermost_url)) {&eol;        throw 'Field "mattermost_url" must contain a schema';&eol;    }&eol;&eol;    if (['alarm', 'event'].indexOf(params.send_mode) === -1) {&eol;        throw 'Incorrect "send_mode" parameter given: ' + params.send_mode + '\nMust be "alarm" or "event".';&eol;    }&eol;&eol;    if (typeof params.send_to !== 'string' &pipe;&pipe; params.send_to.trim() === '') {&eol;        throw 'Field "send_to" cannot be empty';&eol;    }&eol;&eol;    if (isNaN(params.trigger_id) && params.event_source === '0') {&eol;        throw 'field "trigger_id" is not a number';&eol;    }&eol;&eol;    if (typeof params.zabbix_url !== 'string' &pipe;&pipe; params.zabbix_url.trim() === '') {&eol;        throw 'Field "zabbix_url" cannot be empty';&eol;    }&eol;&eol;    if (!/^(http&pipe;https):\/\/.+/.test(params.zabbix_url)) {&eol;        throw 'Field "zabbix_url" must contain a schema';&eol;    }&eol;&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    validateParams(params);&eol;&eol;    var req = new HttpRequest(),&eol;        fields = {},&eol;        result = {tags: {}};&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        req.setProxy(params.HTTPProxy);&eol;    }&eol;&eol;    req.addHeader('Content-Type: application/json; charset=utf-8');&eol;    req.addHeader('Authorization: Bearer ' + params.bot_token);&eol;&eol;    params.mattermost_url = params.mattermost_url.replace(/\/+$/, '');&eol;    params.zabbix_url = params.zabbix_url.replace(/\/+$/, '');&eol;&eol;    var APIEndpoint = params.mattermost_url + '/api/v4/';&eol;&eol;    var Mattermost = {&eol;        post_message: APIEndpoint + 'posts',&eol;        get_channel: APIEndpoint + 'channels/{0}',&eol;        get_team: APIEndpoint + 'teams/{0}',&eol;        chat_update: APIEndpoint + 'posts/{0}',&eol;        direct_channel: APIEndpoint + 'channels/direct',&eol;        channel_byname: APIEndpoint + 'teams/name/{0}/channels/name/{1}',&eol;        user_byname: APIEndpoint + 'users/username/{0}',&eol;        bot_user: APIEndpoint + 'users/me'&eol;&eol;    };&eol;&eol;    params.send_mode = params.send_mode.toLowerCase();&eol;    params.send_mode = params.send_mode in SEND_MODE_HANDLERS&eol;        ? params.send_mode&eol;        : 'alarm';&eol;&eol;    SEND_MODE_HANDLERS[params.send_mode](req, params);&eol;&eol;    if (params.event_source === '0') {&eol;        return JSON.stringify(result);&eol;    }&eol;    else {&eol;        return 'OK';&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.log(4, '[ Mattermost Webhook ] Mattermost notification failed: ' + error);&eol;    throw 'Mattermost notification failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__mattermost_message_link}|Open in Mattermost: {EVENT.TAGS.__mattermost_channel_name}  ||0       |
ROW   |52         |4   |MS Teams                |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;var SEVERITY_COLORS = [&eol;&tab;'#97AAB3',&eol;&tab;'#7499FF',&eol;&tab;'#FFC859',&eol;&tab;'#FFA059',&eol;&tab;'#E97659',&eol;&tab;'#E45959',&eol;&tab;'#009900',&eol;&tab;'#1F1F1F'&eol;],&eol;&tab;serviceLogName = 'MS Teams Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;MSTeams = CWebhook;&eol;&eol;MSTeams.prototype.addBodyFact = function (name, value) {&eol;&tab;if (!CParamValidator.isDefined(this.data.sections[0].facts)) {&eol;&tab;&tab;this.data.sections[0].facts = [];&eol;&tab;}&eol;&tab;this.data.sections[0].facts.push({name: name, value: value});&eol;}&eol;&eol;MSTeams.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({teams_endpoint: {type: 'string'}, event_source: {type: 'string'}, alert_subject: {type: 'string'},&eol;&tab;&tab;alert_message: {type: 'string'}, host_ip: {type: 'string', default: ''}, zabbix_url: {type: 'string', url: true},&eol;&tab;&tab;use_default_message: {type: 'boolean', default: false}, event_nseverity: {type: 'integer', default: 7}}, this.params);&eol;&tab;var actionName = 'Zabbix Home';&eol;&tab;if (!CParamValidator.inArray(this.params.event_source, ['0','3','4'])&eol;&tab;&tab;&pipe;&pipe; this.params.alert_message.startsWith("NOTE: Escalation canceled:")) {&eol;&tab;&tab;this.params['use_default_message'] = true;&eol;&tab;}&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({event_id: {type: 'integer'}, trigger_id: {type: 'integer'}}, this.params);&eol;&tab;&tab;actionName = 'Event Info';&eol;&tab;}&eol;&tab;var actionURL = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&tab;if (this.params.event_value === '0') {&eol;&tab;&tab;this.params.event_nseverity = 6;&eol;&tab;}&eol;&tab;this.data = {&eol;&tab;&tab;themeColor: SEVERITY_COLORS[this.params.event_nseverity].replace('#', ''),&eol;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;sections: [{&eol;&tab;&tab;&tab;markdown: 'false',&eol;&tab;&tab;&tab;activityTitle: this.params.alert_subject,&eol;&tab;&tab;&tab;text: (this.params.event_source === '0' && !this.params.use_default_message) ? this.params.trigger_description : this.params.alert_message&eol;&tab;&tab;}],&eol;&tab;&tab;potentialAction: [{&eol;&tab;&tab;&tab;'@type': 'OpenUri',&eol;&tab;&tab;&tab;name: actionName,&eol;&tab;&tab;&tab;targets: [{&eol;&tab;&tab;&tab;&tab;os: 'default',&eol;&tab;&tab;&tab;&tab;uri: actionURL&eol;&tab;&tab;&tab;}]&eol;&tab;&tab;}]&eol;&tab;};&eol;};&eol;&eol;MSTeams.prototype.makeUpDefaultMessage = function () {&eol;&tab;if (!this.params.use_default_message) {&eol;&tab;&tab;if (!CParamValidator.isEmpty(this.params.host_name) && CParamValidator.isMacroSet(this.params.host_name, 'HOST.NAME')) {&eol;&tab;&tab;&tab;this.addBodyFact('Host', this.params.host_name + ((!CParamValidator.isEmpty(this.params.host_ip)) ? ' [' + this.params.host_ip + ']' : ''));&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isEmpty(this.params.event_severity) && CParamValidator.isMacroSet(this.params.event_severity, 'EVENT.SEVERITY')) {&eol;&tab;&tab;&tab;this.addBodyFact('Severity', this.params.event_severity);&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isEmpty(this.params.event_opdata) && CParamValidator.isMacroSet(this.params.event_opdata, 'EVENT.OPDATA')) {&eol;&tab;&tab;&tab;this.addBodyFact('Operational data', this.params.event_opdata);&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isEmpty(this.params.event_tags) && CParamValidator.isMacroSet(this.params.event_tags, 'EVENT.TAGS')) {&eol;&tab;&tab;&tab;this.addBodyFact('Event tags', this.params.event_tags);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;Object.keys(this.params).forEach(function (key) {&eol;&tab;&tab;&tab;if (key.startsWith('fact_') && this.params[key] !== '') {&eol;&tab;&tab;&tab;&tab;this.addBodyFact(key.substring(5), this.params[key]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (key.startsWith('openUri_') && this.params[key] !== '' && !this.params[key].startsWith('{')) {&eol;&tab;&tab;&tab;&tab;this.data.potentialAction.push({&eol;&tab;&tab;&tab;&tab;&tab;'@type': 'OpenUri',&eol;&tab;&tab;&tab;&tab;&tab;name: key.substring(8),&eol;&tab;&tab;&tab;&tab;&tab;targets: [{&eol;&tab;&tab;&tab;&tab;&tab;&tab;os: 'default',&eol;&tab;&tab;&tab;&tab;&tab;&tab;uri: this.params[key]&eol;&tab;&tab;&tab;&tab;&tab;}]&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;});&eol;&tab;}&eol;}&eol;&eol;const htmlMultiline = function (text) {&eol;&tab;return text.replace(/(?:\r\n&pipe;\r&pipe;\n)/g, '<br>');&eol;}&eol;&eol;MSTeams.prototype.sendRequest = function () {&eol;&tab;this.request.addHeaders({"Content-Type": "application/json"});&eol;&tab;var response = this.request.plainRequest('POST', this.params.teams_endpoint, JSON.stringify(this.data));&eol;&eol;&tab;if (response !== '1') {&eol;&tab;&tab;Logger.log(Logger.WARN, 'FAILED with response: ' + response);&eol;&tab;&tab;throw response;&eol;&tab;}&eol;&tab;return 'OK';&eol;};&eol;&eol;MSTeams.prototype.onProblem = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (!this.params.use_default_message) {&eol;&tab;&tab;this.addBodyFact('Event time', this.params.event_time + ' ' + this.params.event_date);&eol;&tab;&tab;this.makeUpDefaultMessage();&eol;&tab;}&eol;&tab;this.data.sections[0].text = htmlMultiline(this.data.sections[0].text);&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;MSTeams.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (!this.params.use_default_message) {&eol;&tab;&tab;this.data.sections[0].text = this.params.event_update_user + ' ' + this.params.event_update_action + '.';&eol;&tab;&tab;if (this.params.event_update_message) {&eol;&tab;&tab;&tab;this.data.sections[0].text += '<br>Message:<br>' + this.params.event_update_message;&eol;&tab;&tab;}&eol;&tab;&tab;this.addBodyFact('Event update time', this.params.event_update_time + ' ' + this.params.event_update_date);&eol;&tab;&tab;this.makeUpDefaultMessage();&eol;&tab;}&eol;&tab;this.data.sections[0].text = htmlMultiline(this.data.sections[0].text);&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;MSTeams.prototype.onResolve = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (!this.params.use_default_message) {&eol;&tab;&tab;this.addBodyFact('Recovery time', this.params.event_recovery_time + ' ' + this.params.event_recovery_date);&eol;&tab;&tab;this.makeUpDefaultMessage();&eol;&tab;}&eol;&tab;this.data.sections[0].text = htmlMultiline(this.data.sections[0].text);&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;MSTeams.prototype.onDiscovery = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;MSTeams.prototype.onAutoreg = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new MSTeams(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/msteams&eol;&eol;1. Add official Zabbix webhook connector from MS Teams apps for the channel, where you want to receive notifications.&eol;2. Create Incoming webhook for your channel.&eol;3. In the Zabbix web interface go to Administration → Macros section. Setup the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend. &eol;4. On this page replace placeholder <PLACE WEBHOOK URL HERE> with the incoming webhook URL, created during the webhook setup in MS Teams.&eol;5. To receive Zabbix notifications in MS Teams, you need to create a Zabbix user and add Media with the MS Teams media type. Make sure this user has access to all hosts for which you would like problem notifications to be sent to MS Teams.                                                                                                                                                                                                                          |0       |
ROW   |53         |4   |MS Teams Workflow       |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;&eol;var serviceLogName = 'MS Teams Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;MSTeams = CWebhook;&eol;&eol;MSTeams.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;alert_subject: { type: 'string' }, alert_message: { type: 'string' },&eol;&tab;&tab;zabbix_url: { type: 'string', url: true }, teams_endpoint: { type: 'string', url: true }&eol;&tab;}, this.params);&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({ event_id: { type: 'integer' }, trigger_id: { type: 'integer' } }, this.params);&eol;&tab;}&eol;&eol;&tab;this.body = {&eol;&tab;&tab;type: "message",&eol;&tab;&tab;attachments: [&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;contentType: "application/vnd.microsoft.card.adaptive",&eol;&tab;&tab;&tab;&tab;contentUrl: null,&eol;&tab;&tab;&tab;&tab;content: {&eol;&tab;&tab;&tab;&tab;&tab;$schema: "http://adaptivecards.io/schemas/adaptive-card.json",&eol;&tab;&tab;&tab;&tab;&tab;type: "AdaptiveCard",&eol;&tab;&tab;&tab;&tab;&tab;version: "1.4",&eol;&tab;&tab;&tab;&tab;&tab;body: [&eol;&tab;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;type: "Container",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;items: [&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;type: "TextBlock",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;size: "Medium",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;wrap: "true",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;weight: "Bolder",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;text: this.params.alert_subject&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;],&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;style: "",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;bleed: true&eol;&tab;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;],&eol;&tab;&tab;&tab;&tab;&tab;actions: [&eol;&tab;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;type: "Action.OpenUrl",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;title: "Event info",&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;url: CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id)&eol;&tab;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;]&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;]&eol;&tab;};&eol;&eol;&tab;this.params.alert_message = this.params.alert_message.split('\n');&eol;&eol;&tab;for (line in this.params.alert_message) {&eol;&tab;&tab;this.body.attachments[0].content.body.push({&eol;&tab;&tab;&tab;type: "TextBlock",&eol;&tab;&tab;&tab;wrap: "true",&eol;&tab;&tab;&tab;text: this.params.alert_message[line]&eol;&tab;&tab;});&eol;&tab;}&eol;&eol;};&eol;&eol;MSTeams.prototype.sendRequest = function (color) {&eol;&tab;this.body.attachments[0].content.body[0].style = color;&eol;&eol;&tab;this.request.addHeaders({ "Content-Type": "application/json" });&eol;&tab;var response = this.request.plainRequest('POST', this.params.teams_endpoint, JSON.stringify(this.body));&eol;&eol;&tab;if (this.request.getStatus() !== 202) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus() + '. Endpoint response:' + response);&eol;&tab;&tab;throw 'HTTP code: ' + this.request.getStatus() + '. Endpoint response:' + response;&eol;&tab;}&eol;&eol;&tab;return 'OK';&eol;};&eol;&eol;MSTeams.prototype.onProblem = function () {&eol;&tab;return this.sendRequest("attention");&eol;};&eol;&eol;MSTeams.prototype.onResolve = function () {&eol;&tab;return this.sendRequest("good");&eol;};&eol;&eol;MSTeams.prototype.onUpdate = function () {&eol;&tab;return this.sendRequest("emphasis");&eol;};&eol;&eol;MSTeams.prototype.onDiscovery = function () {&eol;&tab;return this.sendRequest("emphasis");&eol;};&eol;&eol;MSTeams.prototype.onAutoreg = function () {&eol;&tab;return this.sendRequest("emphasis");&eol;};&eol;&eol;try {&eol;&tab;var hook = new MSTeams(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;};|30s    |0           |0              |                                      |                                                            |To set up a webhook, please follow these steps:&eol;&eol;- Create a workflow in MS Teams. You can use the "Post a message in a channel when a webhook request is received" template for it.&eol;- Copy the endpoint URL and place it in the teams_endpoint parameter.&eol;- Set up the global macro {$ZABBIX.URL}, which will contain the URL to the Zabbix frontend.&eol;- Create a Zabbix user and add the MS Teams Workflow media to it.&eol;&eol;For more detailed instructions, please visit https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |0       |
ROW   |54         |4   |Opsgenie                |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var method,&eol;    Media = {&eol;    params: {},&eol;    name: '',&eol;    labels: [],&eol;    HTTPProxy: '',&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Media.params = params;&eol;        Media.params.api += Media.params.api.endsWith('/') ? '' : '/';&eol;        Media.params.web += Media.params.web.endsWith('/') ? '' : '/';&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        if (typeof HTTPProxy !== 'undefined' && HTTPProxy.trim() !== '') {&eol;            Media.HTTPProxy = HTTPProxy;&eol;        }&eol;    },&eol;&eol;    setTags: function(event_tags_json) {&eol;        if (typeof event_tags_json !== 'undefined' && event_tags_json !== ''&eol;                && event_tags_json !== '{EVENT.TAGSJSON}') {&eol;&eol;            try {&eol;                var tags = JSON.parse(event_tags_json),&eol;                    label;&eol;&eol;                tags.forEach(function (tag) {&eol;                    if (typeof tag.tag === 'string') {&eol;                        label = (tag.tag + (typeof tag.value !== 'undefined'&eol;                                && tag.value !== '' ? (':' + tag.value) : '')).replace(/\s/g, '_');&eol;                        Media.labels.push(label);&eol;                    }&eol;                });&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Failed to parse "event_tags_json" param');&eol;            }&eol;        }&eol;    },&eol;&eol;    request: function (method, query, data, allow_404) {&eol;        if (typeof(allow_404) === 'undefined') {&eol;            allow_404 = false;&eol;        }&eol;&eol;        ['api', 'token'].forEach(function (field) {&eol;            if (typeof Media.params !== 'object' &pipe;&pipe; typeof Media.params[field] === 'undefined'&eol;                    &pipe;&pipe; Media.params[field] === '') {&eol;                throw 'Required ' + Media.name + ' param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Media.params.api + query,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Authorization: ' + Media.params.token);&eol;        request.setProxy(Media.HTTPProxy);&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Failed to parse response.');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if ((request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300)&eol;                && (!allow_404 &pipe;&pipe; request.getStatus() !== 404)) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null) {&eol;                if (typeof response.errors === 'object' && Object.keys(response.errors).length > 0) {&eol;                    message += ': ' + JSON.stringify(response.errors);&eol;                }&eol;                else if (typeof response.errorMessages === 'object' && Object.keys(response.errorMessages).length > 0) {&eol;                    message += ': ' + JSON.stringify(response.errorMessages);&eol;                }&eol;                else if (typeof response.message === 'string') {&eol;                    message += ': ' + response.message;&eol;                }&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getAlertId: function (requestId) {&eol;        status_counter = params.status_counter &pipe;&pipe; 25; &eol;        do {&eol;            resp = Media.request('get', 'requests/' + requestId, undefined, true);&eol;        status_counter -= 1;            &eol;        }&eol;        while ( status_counter > 0 && &eol;            ( &eol;            typeof resp.response !== 'object' &pipe;&pipe; &eol;            typeof resp.response.data === 'undefined' &pipe;&pipe;&eol;            resp.response.data.success === false &&&eol;                !resp.response.data.status.includes("There is no open alert") &&&eol;                !resp.response.data.status.includes("Alert is already")&eol;            ) &eol;        );&eol;&eol;        if (typeof resp.response !== 'object' &pipe;&pipe; typeof resp.response.data === 'undefined') {&eol;            throw 'Cannot get ' + Media.name + ' issue ID. Check debug log for more information.';&eol;        }&eol;        else if (resp.response.data.success === false ) {&eol;            throw Media.name + ': Operation status (' + resp.response.data.status + ')';&eol;        }&eol;&eol;        return resp;&eol;    }&eol;};&eol;&eol;try {&eol;    var result = {tags: {}},&eol;        params = JSON.parse(value),&eol;        media = {},&eol;        fields = {},&eol;        resp = {},&eol;        responders = [],&eol;        tags = [],&eol;        required_params = [&eol;            'alert_subject',&eol;            'alert_message',&eol;            'event_id',&eol;            'event_source',&eol;            'event_value',&eol;            'event_update_status',&eol;            'opsgenie_api',&eol;            'opsgenie_web',&eol;            'opsgenie_token'&eol;        ],&eol;        severities = [&eol;            'not_classified',&eol;            'information',&eol;            'warning',&eol;            'average',&eol;            'high',&eol;            'disaster',&eol;            'resolved',&eol;            'default'&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;            if (key.startsWith('opsgenie_')) {&eol;                media[key.substring(9)] = params[key];&eol;            }&eol;        });&eol;&eol;    // Possible values of event_source:&eol;    // 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    // Check event_value for trigger-based and internal events.&eol;    // Possible values: 1 for problem, 0 for recovering&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check event_update_status only for trigger-based events.&eol;    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check event_id for a numeric value.&eol;    if (isNaN(parseInt(params.event_id)) &pipe;&pipe; params.event_id < 1) {&eol;        throw 'Incorrect "event_id" parameter given: ' + params.event_id + '\nMust be a positive number.';&eol;    }&eol;&eol;    if ((params.event_source === '1' &pipe;&pipe; params.event_source === '2')  && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for Trigger and Internal actions.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity]];&eol;    params.zbxurl = params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/');&eol;&eol;    Media.name = 'Opsgenie';&eol;    Media.setParams(media);&eol;    Media.params.token = 'GenieKey ' + Media.params.token;&eol;    Media.setProxy(params.HTTPProxy);&eol;    Media.setTags(params.event_tags_json); // Set Media.labels&eol;&eol;    // Create an issue.&eol;    // Numeric value of the event that triggered an action (1 for problem, 0 for recovering).&eol;    // Numeric value of the problem update status. Possible values:&eol;    // 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if ((params.event_source == 0 && params.event_value == 1 && params.event_update_status == 0)&eol;            &pipe;&pipe; (params.event_source == 3 && params.event_value == 1)&eol;            &pipe;&pipe; params.event_source == 1 &pipe;&pipe; params.event_source == 2) {&eol;        fields.message = params.alert_subject;&eol;        fields.alias = params.event_id;&eol;        fields.description = params.alert_message;&eol;        fields.priority = priority;&eol;        fields.source = 'Zabbix';&eol;&eol;        if (params.event_source === '0') {&eol;            fields.details = {&eol;                'Zabbix server': params.zbxurl,&eol;                Problem: params.zbxurl + 'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id&eol;            };&eol;        }&eol;        else {&eol;            fields.details = {'Zabbix server': params.zbxurl};&eol;        }&eol;&eol;        if (typeof params.opsgenie_teams === 'string') {&eol;            responders = params.opsgenie_teams.split(',');&eol;            fields.responders = responders.map(function(team) {&eol;                return {type: 'team', name: team.trim()};&eol;            });&eol;        }&eol;&eol;        fields.tags = Media.labels;&eol;        if (typeof params.opsgenie_tags === 'string') {&eol;            tags = params.opsgenie_tags.split(',');&eol;            tags.forEach(function(item) {&eol;                fields.tags.push(item.trim());&eol;            });&eol;        }&eol;&eol;        resp = Media.request('post', '', fields);&eol;        if (typeof resp.response !== 'object' &pipe;&pipe; typeof resp.response.result === 'undefined') {&eol;            throw 'Cannot create ' + Media.name + ' issue. Check debug log for more information.';&eol;        }&eol;&eol;        if (resp.status === 202) {&eol;            resp = Media.getAlertId(resp.response.requestId);&eol;            if (params.event_source == 0 && params.event_value == 1 && params.event_update_status == 0) {&eol;                result.tags.__zbx_ops_issuekey = resp.response.data.alertId;&eol;                result.tags.__zbx_ops_issuelink = Media.params.web + 'alert/detail/' + resp.response.data.alertId;&eol;            }&eol;        }&eol;        else {&eol;            throw Media.name + ' response code is unexpected. Check debug log for more information.';&eol;        }&eol;    }&eol;    // Update or close the created issue.&eol;    else {&eol;        fields.user = (params.event_value != 0) ? params.zbxuser : '';&eol;        fields.note = params.alert_message;&eol;        if ( [0, 3].indexOf(parseInt(params.event_source)) > -1  && params.event_value == 0 ) {&eol;            // skip sending of close request from update operation(mandatory when both update & recovery operations are defined in action)  &eol;            method = params.event_update_status == 0 ? "close" : "skip";&eol;        }&eol;        else if ( params.event_source == 0 && params.event_value == 1 && params.event_update_status == 1 && params.event_update_action.includes('acknowledged')) {&eol;            method = params.event_update_action.includes('unacknowledged') ? "unacknowledge" : "acknowledge";&eol;        }&eol;        else {&eol;            method = "notes";&eol;        }&eol;&eol;        if (method !== "skip") {&eol;        resp = Media.request('post', params.event_id + '/' + method +'?identifierType=alias', fields);&eol;&eol;        if (typeof resp.response !== 'object' &pipe;&pipe; typeof resp.response.result === 'undefined') {&eol;            throw 'Cannot update ' + Media.name + ' issue. Check debug log for more information.';&eol;        }&eol;&eol;        if (resp.status === 202) {&eol;            resp = Media.getAlertId(resp.response.requestId);&eol;        }&eol;        else {&eol;            throw Media.name + ' response code is unexpected. Check debug log for more information.';&eol;        }&eol;    }&eol;    }&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ ' + Media.name + ' Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_ops_issuelink}      |Opsgenie: {EVENT.TAGS.__zbx_ops_issuekey}                   |Please refer to https://docs.opsgenie.com/docs/alert-api and https://www.zabbix.com/documentation/7.0/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add dedicated user with media type "Opsgenie".&eol;Change the values of the variables opsgenie_api (https://api.opsgenie.com/v2/alerts or https://api.eu.opsgenie.com/v2/alerts),&eol;opsgenie_web (for example, https://myzabbix.app.opsgenie.com), opsgenie_token|0       |
ROW   |55         |4   |OTRS CE                 |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const SEVERITIES = ["not_classified", "information", "warning", "average", "high", "disaster"],&eol;&tab;serviceLogName = ' ((OTRS)) CE Webhook ',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;OTRS = CWebhook;&eol;&eol;OTRS.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({alert_subject: {type: 'string'}, alert_message: {type: 'string'},&eol;&tab;&tab;event_nseverity: {type: 'integer', default: -1}, otrs_url: {type: 'string', url: true}, otrs_auth_user: {type: 'string'},&eol;&tab;&tab;otrs_auth_password: {type: 'string'}, otrs_customer: {type: 'string'}, otrs_default_priority_id: {type: 'integer', min: 1, max: 5},&eol;&tab;&tab;otrs_queue: {type: 'string'}, otrs_ticket_type: {type: 'string'}, otrs_ticket_state: {type: 'string'}, otrs_time_unit: {type: 'integer'},&eol;&tab;&tab;otrs_closed_state_id: {type: 'integer', default: 0}, zabbix_url: {type: 'string', url: true}}, this.params);&eol;&tab;this.params.entrypoint = '/nph-genericinterface.pl/Webservice/ZabbixTicketConnector/Ticket';&eol;&eol;&tab;var priority;&eol;&tab;if (this.params.event_nseverity >= 0 && this.params.event_nseverity < SEVERITIES.length) {&eol;&tab;&tab;priority = this.params['severity_' + SEVERITIES[this.params.event_nseverity]];&eol;&tab;}&eol;&tab;this.priority = (CParamValidator.isDefined(priority)) ? priority.trim() : this.params.otrs_default_priority_id;&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({trigger_id: {type: 'integer'}, event_id: {type: 'integer'}}, this.params);&eol;&tab;&tab;this.params.zabbix_url = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&tab;&tab;this.params.alert_message = this.params.alert_subject + '\n' + this.params.alert_message + '\n' +&eol;&tab;&tab;&tab;this.params.zabbix_url + '\n';&eol;&tab;}&eol;&tab;if (this.params.event_value != '0' && CParamValidator.isMacroSet(this.params.otrs_ticket_id)) {&eol;&tab;&tab;this.params.event_update_status = '1';&eol;&tab;}&eol;&tab;this.dynamicFields = {}&eol;&tab;Object.keys(this.params).forEach(function (key) {&eol;&tab;&tab;if (key.startsWith('dynamicfield_')) {&eol;&tab;&tab;&tab;this.dynamicFields[key.substring(13)] = this.params[key];&eol;&tab;&tab;}&eol;&tab;});&eol;&eol;&tab;this.data = {&eol;&tab;&tab;Article: {&eol;&tab;&tab;&tab;Subject: this.params.alert_subject,&eol;&tab;&tab;&tab;Body: (CParamValidator.isDefined(this.params.alert_message)) ? this.params.alert_message : '',&eol;&tab;&tab;&tab;TimeUnit: this.params.otrs_time_unit.toString(),&eol;&tab;&tab;&tab;ContentType: 'text/plain; charset=utf8'&eol;&tab;&tab;}&eol;&tab;};&eol;&eol;&tab;this.result = {tags: {}};&eol;};&eol;&eol;OTRS.prototype.sendRequest = function (method) {&eol;&tab;var url = this.params.otrs_url + this.params.entrypoint +&eol;&tab;&tab;'?UserLogin=' + encodeURIComponent(this.params.otrs_auth_user) +&eol;&tab;&tab;'&Password=' + encodeURIComponent(this.params.otrs_auth_password);&eol;&eol;&tab;var response = this.request.jsonRequest(method, url, this.data);&eol;&eol;&tab;if (!CParamValidator.isType(response, 'object')) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'API response ERROR: ' + response);&eol;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;}&eol;&tab;if (this.request.getStatus() < 200 &pipe;&pipe; this.request.getStatus() >= 300) {&eol;&tab;&tab;var message = 'status code ' + this.request.getStatus();&eol;&tab;&tab;Logger.log(Logger.INFO, 'API response ERROR with ' + message + ': ' + response);&eol;&tab;&tab;throw 'Request failed with ' + message + '. Check debug log for more information.';&eol;&tab;}&eol;&tab;if (CParamValidator.isDefined(response.Error) && Object.keys(response.Error).length > 0) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'API response ERROR: ' + JSON.stringify(response.Error));&eol;&tab;&tab;throw 'Request failed: ' + JSON.stringify(response.Error);&eol;&tab;}&eol;&eol;&tab;return {&eol;&tab;&tab;status: this.request.getStatus(),&eol;&tab;&tab;response: response&eol;&tab;};&eol;};&eol;&eol;OTRS.prototype.createTicket = function () {&eol;&tab;this.data['Ticket'] = {&eol;&tab;&tab;Title: this.params.alert_subject,&eol;&tab;&tab;Queue: this.params.otrs_queue,&eol;&tab;&tab;Type: this.params.otrs_ticket_type,&eol;&tab;&tab;State: this.params.otrs_ticket_state,&eol;&tab;&tab;PriorityID: this.priority.toString(),&eol;&tab;&tab;CustomerUser: this.params.otrs_customer&eol;&tab;}&eol;&eol;&tab;var result = this.sendRequest('post');&eol;&eol;&tab;if (!CParamValidator.isDefined(result.response.TicketID) &pipe;&pipe; result.status != 200) {&eol;&tab;&tab;throw 'Cannot create ((OTRS)) CE ticket. Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;return result.response.TicketID;&eol;}&eol;&eol;OTRS.prototype.updateTicket = function () {&eol;&tab;CParamValidator.validate({otrs_ticket_id: {type: 'string'}, entrypoint: {type: 'string'}}, this.params);&eol;&tab;this.params.entrypoint += '/' + encodeURIComponent(this.params.otrs_ticket_id);&eol;&eol;&tab;var result = this.sendRequest('put');&eol;&eol;&tab;if (!CParamValidator.isDefined(result.response.TicketID) &pipe;&pipe; result.status != 200) {&eol;&tab;&tab;throw 'Cannot update ((OTRS)) CE ticket. Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;return result.response.TicketID;&eol;}&eol;&eol;OTRS.prototype.onProblem = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (CParamValidator.isDefined(alert.source) && CParamValidator.inArray(alert.source, ['trigger', 'service', 'internal'])) {&eol;&tab;&tab;if (Object.keys(this.dynamicFields).length > 0) {&eol;&tab;&tab;&tab;this.data.DynamicField = [];&eol;&tab;&tab;&tab;Object.keys(this.dynamicFields).forEach(function(field) {&eol;&tab;&tab;&tab;&tab;if (field !== undefined) {&eol;&tab;&tab;&tab;&tab;&tab;if (this.dynamicFields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/)) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;this.dynamicFields[field] = this.dynamicFields[field].replace(/\./g, '-');&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&eol;&tab;&tab;&tab;&tab;&tab;this.data.DynamicField.push({Name: field, Value: this.dynamicFields[field]});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&tab;&tab;const ticket_id = this.createTicket(alert);&eol;&tab;&tab;this.result.tags.__zbx_otrs_ticket_id = ticket_id;&eol;&tab;&tab;this.result.tags.__zbx_otrs_ticketlink = this.params.otrs_url + 'index.pl?Action=AgentTicketZoom;TicketID=' + ticket_id;&eol;&eol;&tab;&tab;return this.result;&eol;&tab;}&eol;&tab;return this.createTicket();&eol;}&eol;&eol;OTRS.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.updateTicket();&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;OTRS.prototype.onResolve = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (this.params.otrs_closed_state_id > 0) {&eol;&tab;&tab;this.data['Ticket'] = {&eol;&tab;&tab;&tab;StateID: this.params.otrs_closed_state_id&eol;&tab;&tab;}&eol;&tab;}&eol;&tab;this.updateTicket();&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;OTRS.prototype.onDiscovery = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;OTRS.prototype.onAutoreg = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new OTRS(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_otrs_ticketlink}    |((OTRS)) CE: ticket #{EVENT.TAGS.__zbx_otrs_ticket_id}      |This media type integrates your Zabbix installation with your Zammad installation using the Zabbix webhook feature.&eol;&eol;((OTRS)) CE configuration:&eol;&eol;1. Create a new web service. To do so, navigate to "Admin" → "Web services" and import the "ZabbixTicketConnector.yml" file (it can be found in the official Zabbix repository next to the media type file).&eol;&eol;2. Create a new customer.&eol;&eol;3. Create a new customer user. Select the ID of the customer that you created in the previous step.&eol;&eol;4. Create a new agent. Depending on the ticket queue you want to use for tickets created by the webhook, set the "RW" permission for the group that this ticket queue belongs to. In the example below, if you want to use the "Misc" queue, you must set the "RW" permission for the group "users".&eol;&eol;Zabbix configuration:&eol;&eol;1. Before you can start using the ((OTRS)) CE webhook, set the global macro "{$ZABBIX.URL}":&eol;- In the Zabbix web interface, go to "Administration" → "Macros" in the top-left dropdown menu.&eol;- Set the global macro "{$ZABBIX.URL}" to the URL of the Zabbix frontend. The URL should be either an IP address, a fully qualified domain name, or localhost.&eol;- Specifying a protocol is mandatory, whereas the port is optional. Depending on the web server configuration, you might also need to append "/zabbix" to the end of URL. Good examples:&eol;  - http://zabbix.com&eol;  - https://zabbix.lan/zabbix&eol;  - http://server.zabbix.lan/&eol;  - http://localhost&eol;  - http://127.0.0.1:8080&eol;- Bad examples:&eol;  - zabbix.com&eol;  - http://zabbix/&eol;&eol;2. Set the following webhook parameters:&eol;- otrs_auth_user - the username of the agent&eol;- otrs_auth_password - the password of the agent&eol;- otrs_customer - the email of the customer user&eol;- otrs_queue - the queue that will be used for tickets created by the webhook&eol;- otrs_url - the frontend URL of your ((OTRS)) CE installation (for example, "https://otrs.example.com/otrs")&eol;&eol;3. If you want to prioritize issues according to the severity values in Zabbix, you can define mapping parameters (create them as additional webhook parameters):&eol;- severity_<name> - the ((OTRS)) CE priority ID (<name> in the parameter name can be one of the following values: "not_classified", "information", "warning", "average", "high", "disaster")&eol;&eol;4. If you have dynamic fields in ((OTRS)) CE and want them to be filled with values from Zabbix, add webhook parameters in the format "dynamicfield_<((OTRS)) CE dynamic field name>", similarly to the previous step. Dynamic fields can only be of the types "text", "textarea", "checkbox", or "date".&eol;&eol;5. If you want the webhook to close tickets related to **resolved** problems in Zabbix, you can change the following parameter value:&eol;- otrs_closed_state_id - ((OTRS)) CE state ID for closed tasks (possible values: 0 - Disable tickets closing, >0 - State ID from the State Management page).&eol;&eol;6. If you use the ticket type feature, you can change the type of the created tickets:&eol;- otrs_ticket_type - ((OTRS)) CE ticket type (set to "Unclassified" by default; present on fresh installations).&eol;&eol;7. Click the "Enabled" checkbox to enable the mediatype and click the "Update" button to save the webhook settings.&eol;&eol;8. Create a Zabbix user and add media:&eol;- To create a new user, go to the "Users" → "Users" section, click the "Create user" button in the top right corner. In the "User" tab, fill in all required fields (marked with red asterisks).&eol;- In the "Media" tab, click "Add" and select the type "Zammad" from the drop-down list. Add any value in the "Send to" field: it is not used in the webhook, but is required.&eol;- Make sure this user has access to all hosts for which you would like problem notifications to be sent to Zammad.&eol;&eol;9. Done! You can now start using this media type in actions and create tickets.&eol;&eol;You can find the latest version of this media and additional information in the official Zabbix repository:&eol;https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/otrs_ce|0       |
ROW   |56         |4   |PagerDuty               |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;var severityMapping = [&eol;&tab;'info',&eol;&tab;'info',&eol;&tab;'warning',&eol;&tab;'warning',&eol;&tab;'error',&eol;&tab;'critical'&eol;],&eol;&tab;serviceLogName = 'PagerDuty Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;PagerDuty = CWebhook;&eol;&eol;function getDefaultEventData(data, params) {&eol;&tab;data.event_action = 'trigger';&eol;&tab;data.payload.custom_details = {&eol;&tab;&tab;'Alert message': params.alert_message&eol;&tab;};&eol;&tab;Object.keys(params).forEach(function (key) {&eol;&tab;&tab;if (key.startsWith('customdetails_') && !CParamValidator.isEmpty(params[key])) {&eol;&tab;&tab;&tab;data.payload.custom_details[key.substring(14)] = params[key];&eol;&tab;&tab;}&eol;&tab;});&eol;&tab;data.client = 'Zabbix';&eol;&tab;data.client_url = params.zabbix_url;&eol;&eol;&tab;return data;&eol;};&eol;&eol;PagerDuty.prototype.onCheckParams = function () {&eol;&tab;this.params.url = 'https://events.pagerduty.com/v2/enqueue';&eol;&tab;CParamValidator.validate({api_token: {type: 'string'}, event_id: {type: 'integer'},&eol;&tab;&tab;alert_subject: {type: 'string'}, host_ip: {type: 'string', default: ''}, zabbix_url: {type: 'string', url: true},&eol;&tab;&tab;event_nseverity: {type: 'integer', min: 0, max: 5, default: 0}}, this.params);&eol;&tab;if (CParamValidator.inArray(this.params.event_source, ['0','3','4'])) {&eol;&tab;&tab;CParamValidator.validate({host_name: {type: 'string', default: ''}}, this.params);&eol;&tab;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;&tab;CParamValidator.validate({trigger_id: {type: 'integer'}, event_update_status: {type: 'string', array: ['0', '1']},&eol;&tab;&tab;&tab;&tab;event_ack: {type: 'boolean'}}, this.params);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;CParamValidator.validate({alert_message: {type: 'string'}, event_ack: {type: 'boolean', default: false}}, this.params);&eol;&tab;&tab;}&eol;&tab;}&eol;&tab;this.data = {&eol;&tab;&tab;routing_key: this.params.api_token,&eol;&tab;&tab;dedup_key: String(this.params.event_id),&eol;&tab;&tab;payload: {&eol;&tab;&tab;&tab;summary: this.params.alert_subject,&eol;&tab;&tab;&tab;source: (!CParamValidator.isEmpty(this.params.host_name)) ? (this.params.host_name +&eol;&tab;&tab;&tab;&tab;((!CParamValidator.isEmpty(this.params.host_ip)) ? ' : ' + this.params.host_ip : '')) : 'Zabbix',&eol;&tab;&tab;&tab;severity: severityMapping[this.params.event_nseverity],&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;PagerDuty.prototype.onProblem = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.data = getDefaultEventData(this.data, this.params);&eol;&tab;if (CParamValidator.isDefined(alert.source) && alert.source === 'Trigger') {&eol;&tab;&tab;this.data.links = [{&eol;&tab;&tab;&tab;href: CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id),&eol;&tab;&tab;&tab;text: 'Event link'&eol;&tab;&tab;}];&eol;&tab;}&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;PagerDuty.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;if (this.params.event_ack === true) {&eol;&tab;&tab;this.data.event_action = 'acknowledge';&eol;&tab;&tab;return this.sendRequest();&eol;&tab;}&eol;&tab;this.data = getDefaultEventData(this.data, this.params);&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;PagerDuty.prototype.onResolve = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.data = getDefaultEventData(this.data, this.params);&eol;&tab;this.data.event_action = 'resolve';&eol;&tab;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;PagerDuty.prototype.onDiscovery = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;this.data = getDefaultEventData(this.data, this.params);&eol;&tab;this.data.payload.source = 'Discovery';&eol;&eol;&tab;return this.sendRequest();&eol;}&eol;&eol;PagerDuty.prototype.onAutoreg = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;PagerDuty.prototype.sendRequest = function () {&eol;&tab;var response = this.request.jsonRequest('POST', this.params.url, this.data);&eol;&tab;if (!CParamValidator.isType(response, 'object')) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'API response ERROR: ' + response);&eol;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;}&eol;&tab;if (this.request.getStatus() != 202) {&eol;&tab;&tab;if (CParamValidator.isType(response.errors, 'array') && CParamValidator.isType(response.errors[0], 'string')) {&eol;&tab;&tab;&tab;throw response.errors[0];&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unknown error. HTTP status: ' + this.request.getStatus();&eol;&tab;&tab;}&eol;&tab;}&eol;&tab;if (response.status != 'success') {&eol;&tab;&tab;Logger.log(Logger.INFO, 'API response ERROR: ' + response);&eol;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;return 'OK';&eol;};&eol;&eol;try {&eol;&tab;var hook = new PagerDuty(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            |Please refer to https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2 and https://www.zabbix.com/documentation/7.0/manual/config/notifications/media/webhook#example_scripts.&eol;&eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add a dedicated user with the media type "PagerDuty" and place the integration key in the user's "Send to" parameter to integrate into the service|0       |
ROW   |57         |4   |Pushover                |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |0          |3          |10s             |1             |try {&eol;    var params = JSON.parse(value),&eol;        request = new HttpRequest(),&eol;        data,&eol;        response,&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        request.setProxy(params.HTTPProxy);&eol;    }&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['priority_' + severities[params.event_nseverity].name] &pipe;&pipe; params.priority_default;&eol;&eol;    if (isNaN(priority) &pipe;&pipe; priority < -2 &pipe;&pipe; priority > 2) {&eol;        throw '"priority" should be -2..2';&eol;    }&eol;&eol;    if (params.event_source === '0' && isNaN(params.triggerid)) {&eol;        throw 'field "triggerid" is not a number';&eol;    }&eol;&eol;    if (isNaN(params.eventid)) {&eol;        throw 'field "eventid" is not a number';&eol;    }&eol;&eol;    if (typeof params.message !== 'string' &pipe;&pipe; params.message.trim() === '') {&eol;        throw 'field "message" cannot be empty';&eol;    }&eol;&eol;    data = {&eol;        token: params.token,&eol;        user: params.user,&eol;        title: params.title,&eol;        message: params.message,&eol;        url: (params.event_source === '0') &eol;            ? params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid&eol;            : params.url,&eol;        url_title: params.url_title,&eol;        priority: priority&eol;    };&eol;&eol;    if (priority == 2) {&eol;        if (isNaN(params.retry) &pipe;&pipe; params.retry < 30) {&eol;            throw 'field "retry" should be a number with value of at least 30 if "priority" is set to 2';&eol;        }&eol;&eol;        if (isNaN(params.expire) &pipe;&pipe; params.expire > 10800) {&eol;            throw 'field "expire" should be a number with value of at most 10800 if "priority" is set to 2';&eol;        }&eol;&eol;        data.retry = params.retry;&eol;        data.expire = params.expire;&eol;    }&eol;&eol;    data = JSON.stringify(data);&eol;    Zabbix.log(4, '[ Pushover Webhook ] Sending request: ' + params.endpoint + '\n' + data);&eol;&eol;    request.addHeader('Content-Type: application/json');&eol;    response = request.post(params.endpoint, data);&eol;&eol;    Zabbix.log(4, '[ Pushover Webhook ] Received response with status code ' + request.getStatus() + '\n' + response);&eol;&eol;    if (response !== null) {&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.log(4, '[ Pushover Webhook ] Failed to parse response received from Pushover');&eol;            response = null;&eol;        }&eol;    }&eol;&eol;    if (request.getStatus() != 200 &pipe;&pipe; response === null &pipe;&pipe; typeof response !== 'object' &pipe;&pipe; response.status !== 1) {&eol;        if (response !== null && typeof response === 'object' && typeof response.errors === 'object'&eol;                && typeof response.errors[0] === 'string') {&eol;            throw response.errors[0];&eol;        }&eol;        else {&eol;            throw 'Unknown error. Check debug log for more information.';&eol;        }&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.log(4, '[ Pushover Webhook ] Pushover notification failed: ' + error);&eol;    throw 'Pushover notification failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            |Please refer to setup guide here: https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/pushover&eol;&eol;Set token parameter with to your Pushover application key.&eol;When assigning Pushover media to the Zabbix user - add user key into send to field|0       |
ROW   |58         |4   |Redmine                 |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Redmine = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Redmine.params = params;&eol;        if (typeof Redmine.params.url === 'string') {&eol;            if (!Redmine.params.url.endsWith('/')) {&eol;                Redmine.params.url += '/';&eol;            }&eol;        }&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;&eol;            data.issue.custom_fields = [];&eol;            Object.keys(fields)&eol;                .forEach(function (field) {&eol;                    var field_value = fields[field];&eol;&eol;                    if (field_value !== undefined) {&eol;                        data.issue.custom_fields.push({ id: field, value: field_value });&eol;                    }&eol;                });&eol;&eol;        }&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'access_key'].forEach(function (field) {&eol;            if (typeof Redmine.params !== 'object' &pipe;&pipe; typeof Redmine.params[field] === 'undefined'&eol;                &pipe;&pipe; Redmine.params[field] === '' ) {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Redmine.params.url + query,&eol;            request = new HttpRequest();&eol;&eol;        if (typeof Redmine.HTTPProxy === 'string' && Redmine.HTTPProxy.trim() !== '') {&eol;            request.setProxy(Redmine.HTTPProxy);&eol;        }&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('X-Redmine-API-Key: ' + Redmine.params.access_key);&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ Redmine Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ Redmine Webhook ] Received response with status code ' + request.getStatus() + ': ' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ Redmine Webhook ] Failed to parse response received from Redmine');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.errors !== 'undefined'&eol;                && Object.keys(response.errors).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errors);&eol;            }&eol;            else if (response !== null && typeof response.errorMessages !== 'undefined'&eol;                && Object.keys(response.errorMessages).length > 0) {&eol;                message += ': ' + JSON.stringify(response.errorMessages);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getProjectID: function(name) {&eol;        var result = Redmine.request('get', 'projects.json'),&eol;            project_id;&eol;&eol;        if (result.response) {&eol;            var projects = result.response.projects &pipe;&pipe; [];&eol;&eol;            for (var i in projects) {&eol;                if (projects[i].name === name) {&eol;                    project_id = projects[i].id;&eol;                    break;&eol;                }&eol;            }&eol;        }&eol;        else {&eol;            Zabbix.log(4, '[ Redmine Webhook ] Failed to retrieve project data.');&eol;        }&eol;&eol;        if (typeof project_id === 'undefined') {&eol;            throw 'Cannot find project with name: ' + name;&eol;        }&eol;&eol;        return project_id;&eol;    },&eol;&eol;    createIssue: function(subject, description, priority, fields) {&eol;        var project_id = /^\d+$/.test(Redmine.params.project)&eol;                ? Redmine.params.project&eol;                : Redmine.getProjectID(Redmine.params.project),&eol;            data = {&eol;                issue: {&eol;                    project_id: project_id,&eol;                    tracker_id: Redmine.params.tracker_id,&eol;                    subject: subject,&eol;                    description: description&eol;                }&eol;            },&eol;            result;&eol;&eol;        if (priority) {&eol;            data.issue.priority_id = priority;&eol;        }&eol;&eol;        result = Redmine.request('post', 'issues.json', Redmine.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object'&eol;            &pipe;&pipe; typeof result.response.issue.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot create Redmine issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.issue.id;&eol;    },&eol;&eol;    updateIssue: function (note, fields, status) {&eol;        var data = {&eol;            issue: {&eol;                notes: note &pipe;&pipe; ''&eol;            }&eol;        };&eol;&eol;        if (status) {&eol;            data.issue.status_id = status;&eol;        }&eol;&eol;        Redmine.request('put', 'issues/' + Redmine.params.issue_key + '.json', Redmine.addCustomFields(data, fields));&eol;    }&eol;&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        params_redmine = {},&eol;        params_fields = {},&eol;        params_update = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'tracker_id', 'project',&eol;            'event_source', 'event_value',  'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: null, color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('redmine_')) {&eol;                params_redmine[key.substring(8)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                params_fields[key.substring(12)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                params_update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;&eol;    if (typeof params_redmine.close_status_id === 'string' && params_redmine.close_status_id.trim() !== '' && !parseInt(params_redmine.close_status_id, 10)) {&eol;        throw 'Incorrect "redmine_close_status_id" parameter given! Must be an integer.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if (params.event_source === '0'&eol;        && ((params.event_value === '1' && params.event_update_status === '1')&eol;            &pipe;&pipe; (params.event_value === '0'&eol;                && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.redmine_issue_key)) &pipe;&pipe; parseInt(params.redmine_issue_key) < 1 )) {&eol;        throw 'Incorrect "redmine_issue_key" parameter given: ' + params.redmine_issue_key +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name];&eol;    priority = priority && priority.trim() &pipe;&pipe; severities[7].name;&eol;&eol;    Redmine.setParams(params_redmine);&eol;    Redmine.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0'&eol;        && params.event_value !== '0') {&eol;        Redmine.createIssue(params.alert_subject, params.alert_message, priority);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && params_update.status === '0') {&eol;        var issue_id = Redmine.createIssue(params.alert_subject,&eol;            params.alert_subject + '\n' + params.alert_message + '\n' +&eol;            params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') +&eol;            'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id + '\n',&eol;            priority,&eol;            params_fields);&eol;&eol;        result.tags.__zbx_redmine_issue_id = issue_id;&eol;        result.tags.__zbx_redmine_issuelink = params.redmine_url +&eol;            (params.redmine_url.endsWith('/') ? '' : '/') + 'issues/' + issue_id;&eol;    }&eol;    // Close issue if parameter close_status_id is set and it is a recovery operation&eol;    else if (params.event_value === '0' && typeof params_redmine.close_status_id === 'string' && params_redmine.close_status_id.trim() !== '') {&eol;        Redmine.updateIssue(params.alert_subject + '\n' + params.alert_message, params_fields, params_redmine.close_status_id);&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        Redmine.updateIssue(params.alert_subject + '\n' + params.alert_message, params_fields);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ Redmine Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_redmine_issuelink}  |Redmine: issue #{EVENT.TAGS.__zbx_redmine_issue_id}         ||0       |
ROW   |59         |4   |Rocket.Chat             |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var RocketChat = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        RocketChat.params = params;&eol;        if (RocketChat.params.url && RocketChat.params.api_url) {&eol;            if (!RocketChat.params.url.endsWith('/')) {&eol;                RocketChat.params.url += '/';&eol;            }&eol;            if (!RocketChat.params.api_url.endsWith('/')) {&eol;                RocketChat.params.api_url += '/';&eol;            }&eol;            if (RocketChat.params.api_url.startsWith('/')) {&eol;                RocketChat.params.api_url = RocketChat.params.api_url.substring(1);&eol;            }&eol;&eol;            RocketChat.params.url += RocketChat.params.api_url;&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        RocketChat.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    addFields: function (fields) {&eol;        var data = [];&eol;&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    if (fields[field] === '') {&eol;                        Zabbix.log(4, '[ RocketChat Webhook ] Field "' + field +&eol;                            '" can\'t be empty. The field ignored.');&eol;                    }&eol;                    else {&eol;                        try {&eol;                            var parts = field.split(':'),&eol;                                prefix = parts[0].split('_');&eol;&eol;                            if (typeof prefix[2] === 'undefined'&eol;                                    &pipe;&pipe; (prefix[2] === 'p' && params.event_value === '1')&eol;                                    &pipe;&pipe; (prefix[2] === 'r' && params.event_value === '0')) {&eol;                                data.push({&eol;                                    title: field.substring(field.indexOf(':') + 1),&eol;                                    value: fields[field],&eol;                                    short: prefix[1] === 'short'&eol;                                });&eol;                            }&eol;                        }&eol;                        catch (error) {&eol;                            Zabbix.log(4, '[ RocketChat Webhook ] Can\'t parse field "' + field +&eol;                                '". The field ignored.');&eol;                        }&eol;                    }&eol;                });&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'api_url', 'user_id', 'user_token', 'send_to'].forEach(function (field) {&eol;            if (typeof RocketChat.params !== 'object' &pipe;&pipe; typeof RocketChat.params[field] === 'undefined'&eol;                    &pipe;&pipe; RocketChat.params[field] === '' ) {&eol;                throw 'Required parameter is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = RocketChat.params.url + query,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('X-Auth-Token:' + RocketChat.params.user_token);&eol;        request.addHeader('X-User-Id:' + RocketChat.params.user_id);&eol;&eol;        if (typeof RocketChat.HTTPProxy !== 'undefined' && RocketChat.HTTPProxy !== '') {&eol;            request.setProxy(RocketChat.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ RocketChat Webhook ] Sending request: ' + url +&eol;            ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ RocketChat Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ RocketChat Webhook ] Failed to parse response received from RocketChat');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.message !== 'undefined') {&eol;                message += ': ' + JSON.stringify(response.message);&eol;            }&eol;            else if (response !== null && typeof response.error !== 'undefined') {&eol;                message += ': ' + JSON.stringify(response.error);&eol;            }&eol;&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    postMessage: function(use_default_message, message, fields) {&eol;        var data = {&eol;            channel: RocketChat.params.send_to,&eol;            attachments: [{&eol;                collapsed: false,&eol;                color: RocketChat.params.color,&eol;                title: params.alert_subject&eol;            }]&eol;        };&eol;&eol;        if (RocketChat.params.title_link) {&eol;            data.attachments[0].title_link = RocketChat.params.title_link;&eol;        }&eol;&eol;        if (use_default_message) {&eol;            data.attachments[0].text = message;&eol;        }&eol;        else {&eol;            data.attachments[0].fields = RocketChat.addFields(fields);&eol;        }&eol;&eol;        var result = RocketChat.request('post', 'chat.postMessage', data);&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.message._id === 'undefined') {&eol;            throw 'Cannot send RocketChat message. Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            id: result.response.message._id,&eol;            rid: result.response.message.rid,&eol;            channel: result.response.channel&eol;        };&eol;    },&eol;&eol;    sendMessage: function(update, fields) {&eol;&eol;        var data = {&eol;            message: {&eol;                rid: RocketChat.params.room_id,&eol;                tmid: RocketChat.params.msg_id,&eol;                tshow: true&eol;            }&eol;        };&eol;&eol;        if (update.status === '0') {&eol;            data.message.attachments = [{&eol;                collapsed: false,&eol;                color: RocketChat.params.color,&eol;                title: params.alert_subject,&eol;                title_link: RocketChat.params.title_link,&eol;                fields: RocketChat.addFields(fields)&eol;            }];&eol;        }&eol;        else {&eol;            data.message.alias = update.user;&eol;            data.message.msg = update.action;&eol;            if (update.message) {&eol;                data.message.attachments = [{&eol;                    color: RocketChat.params.color,&eol;                    text: update.message&eol;                }];&eol;            }&eol;        }&eol;&eol;        RocketChat.request('post', 'chat.sendMessage', data);&eol;    },&eol;&eol;    getMessageLink: function(rid, id) {&eol;        var room = RocketChat.request('get', 'rooms.info?roomId=' + encodeURIComponent(rid)),&eol;            link = params.rc_url +&eol;                (params.rc_url.endsWith('/') ? '' : '/');&eol;&eol;        switch (room.response.room.t) {&eol;            case 'c':&eol;                link += 'channel/' + room.response.room.name + '?msg=' + id;&eol;                break;&eol;&eol;            case 'p':&eol;                link += 'group/' + room.response.room.name + '?msg=' + id;&eol;                break;&eol;&eol;            case 'd':&eol;                link += 'direct/' + rid + '?msg=' + id;&eol;                break;&eol;&eol;            default:&eol;                Zabbix.log(4, '[ RocketChat Webhook ] Can\'t get room type. Link to message will not be added.');&eol;        }&eol;&eol;        return link;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        response,&eol;        fields = {},&eol;        rc = {},&eol;        update = {},&eol;        result = {tags: {}},&eol;        required_params = ['alert_subject', 'alert_message', 'event_source', 'event_value'],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('rc_')) {&eol;                rc[key.substring(3)] = params[key];&eol;            }&eol;            else if (key.startsWith('field_')) {&eol;                fields[key.substring(6)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Forcing parameters for non trigger-based events.&eol;    if (params.event_source !== '0') {&eol;        params.use_default_message = 'true';&eol;        params.event_nseverity = '0';&eol;        params.rc_title_link = false;&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;            && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    RocketChat.setParams(rc);&eol;    RocketChat.setProxy(params.HTTPProxy);&eol;    RocketChat.params.color = severities[params.event_nseverity].color;&eol;&eol;    // Send default message if use_default_message === true.&eol;    if (params.use_default_message.toLowerCase() === 'true') {&eol;        response = RocketChat.postMessage(true, params.alert_message);&eol;        result.tags.__zbx_rc_id = response.id;&eol;        result.tags.__zbx_rc_rid = response.rid;&eol;        result.tags.__zbx_rc_msg_url = RocketChat.getMessageLink(response.rid, response.id);&eol;    }&eol;    // Send message for trigger-based events.&eol;    else if (params.event_value === '1' && update.status === '0') {&eol;        response = RocketChat.postMessage(false, params.alert_message, fields);&eol;        result.tags.__zbx_rc_id = response.id;&eol;        result.tags.__zbx_rc_rid = response.rid;&eol;        result.tags.__zbx_rc_msg_url = RocketChat.getMessageLink(response.rid, response.id);&eol;    }&eol;    // Send thread message for trigger-based event.&eol;    else {&eol;        RocketChat.sendMessage(update, fields);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ RocketChat Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_rc_msg_url}         |Rocket.Chat                                                 ||0       |
ROW   |60         |4   |ServiceNow              |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var ServiceNow = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        ServiceNow.params = params;&eol;        if (typeof ServiceNow.params.url === 'string') {&eol;            if (!ServiceNow.params.url.endsWith('/')) {&eol;                ServiceNow.params.url += '/';&eol;            }&eol;&eol;            ServiceNow.params.url += 'api/now/table/incident';&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        ServiceNow.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    setFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    data[field] = (fields[field].match(/^\d{4}\.\d{2}\.\d{2}$/) !== null)&eol;                        ? fields[field].replace(/\./g, '-')&eol;                        : fields[field];&eol;                });&eol;        }&eol;    },&eol;&eol;    request: function (method, data) {&eol;        ['url', 'user', 'password'].forEach(function (field) {&eol;            if (typeof ServiceNow.params !== 'object' &pipe;&pipe; typeof ServiceNow.params[field] === 'undefined'&eol;                &pipe;&pipe; ServiceNow.params[field] === '' ) {&eol;                throw 'Required ServiceNow param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = ServiceNow.params.url,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Authorization: Basic ' + btoa(ServiceNow.params.user + ':' + ServiceNow.params.password));&eol;&eol;        if (typeof ServiceNow.HTTPProxy !== 'undefined' && ServiceNow.HTTPProxy !== '') {&eol;            request.setProxy(ServiceNow.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ ServiceNow Webhook ] Sending request: ' + url + ((typeof data === 'string')&eol;            ? ('\n' + data)&eol;            : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ ServiceNow Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ ServiceNow Webhook ] Failed to parse response received from ServiceNow');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.error.message !== 'undefined'&eol;                && Object.keys(response.error).length > 0) {&eol;                message += ': ' + JSON.stringify(response.error.message);&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;        else if (typeof response.result !== 'object' &pipe;&pipe; typeof response.result.sys_id === 'undefined') {&eol;            throw 'Cannot create ServiceNow incident. Check debug log for more information.';&eol;        }&eol;&eol;        return response.result;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        servicenow = {},&eol;        data = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject', 'alert_message', 'event_source', 'event_value',&eol;            'event_update_status', 'event_recovery_value', 'event_nseverity'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ],&eol;        method = 'post',&eol;        process_tags = true;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('servicenow_')) {&eol;                servicenow[key.substring(11)] = params[key];&eol;            }&eol;            else if (key.startsWith('u_')) {&eol;                fields[key] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    data.short_description = params.alert_subject;&eol;    data.description = params.alert_message;&eol;    data.comments = params.alert_message;&eol;&eol;    if (typeof params['urgency_for_' + severities[params.event_nseverity].name] !== 'undefined') {&eol;        data.urgency = params['urgency_for_' + severities[params.event_nseverity].name];&eol;    }&eol;&eol;    ServiceNow.setParams(servicenow);&eol;    ServiceNow.setProxy(params.HTTPProxy);&eol;    ServiceNow.setFields(data, fields);&eol;&eol;    if (params.event_source === '0' && (params.event_value === '0' &pipe;&pipe; params.event_update_status === '1')) {&eol;        process_tags = false;&eol;        method = 'put';&eol;        delete data.description;&eol;        delete data.urgency;&eol;        ServiceNow.params.url += '/' + params.servicenow_sys_id;&eol;    }&eol;&eol;    var response = ServiceNow.request(method, data);&eol;&eol;    if (process_tags) {&eol;        result.tags.__zbx_servicenow_sys_id = response.sys_id;&eol;        result.tags.__zbx_servicenow_link = params.servicenow_url +&eol;            (params.servicenow_url.endsWith('/') ? '' : '/') + 'incident.do?sys_id=' + response.sys_id;&eol;        result.tags.__zbx_servicenow_number = response.number;&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ ServiceNow Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_servicenow_link}    |ServiceNow: {EVENT.TAGS.__zbx_servicenow_number}            ||0       |
ROW   |61         |4   |SIGNL4                  |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |// SIGNL4 Webhook&eol;try {&eol;    var response,&eol;        payload,&eol;        params = JSON.parse(value),&eol;        endpoint = 'https://connect.signl4.com/webhook/',&eol;        request = new HttpRequest();&eol;&eol;    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {&eol;        request.setProxy(params.HTTPProxy);&eol;    }&eol;&eol;    if (typeof params.teamsecret === 'string' && params.teamsecret.trim() !== '') {&eol;        endpoint += params.teamsecret;&eol;        delete params.teamsecret;&eol;    }&eol;    else {&eol;        throw 'The team secret of your SIGNL4 team cannot be empty.';&eol;    }&eol;&eol;    if (typeof params.Severity === 'string' && params.Severity === '{EVENT.SEVERITY}') {&eol;        params.Severity = 'Not classified';&eol;    }&eol;&eol;&tab;if (typeof params.User === 'string' && params.User === '{USER.FULLNAME}') {&eol;        params.User = '';&eol;    }&eol;&eol;&tab;if (typeof params.Event_Update_Action === 'string' && params.Event_Update_Action === '{EVENT.UPDATE.ACTION}') {&eol;        params.Event_Update_Action = '';&eol;    }&eol;&eol;&tab;// Assemble X-S4-ExternalID for two-way integration&eol;&tab;// Format: "ZabbixEventID: 222 ZabbixURL: https://your-zabbix-server/zabbix/"&eol;&tab;params['X-S4-ExternalID'] = 'ZabbixEventID: ' + params.Event_ID;&eol;&tab;if (typeof params.Zabbix_URL === 'string' && params.Zabbix_URL.indexOf('http') == 0) {&eol;&tab;&tab;// Make sure the URL ends with '/'&eol;&tab;&tab;if (params.Zabbix_URL.charAt(params.Zabbix_URL.length - 1) != '/') {&eol;&tab;&tab;&tab;params.Zabbix_URL = params.Zabbix_URL + '/';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;params['X-S4-ExternalID'] = params['X-S4-ExternalID'] + ' ZabbixURL: ' +  params.Zabbix_URL;&eol;&eol;&tab;&tab;// Add Link parameter&eol;&tab;&tab;params['Link'] = params.Zabbix_URL + "tr_events.php?triggerid="+params.Trigger_ID + "&eventid=" + params.Event_ID;&eol;&tab;}&eol;&eol;&tab;// Check if this is a new problem or a recovery&eol;&tab;if (params.Trigger_Status == 'OK') {&eol;&tab;&tab;params['X-S4-Status'] = 'resolved';&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;params['X-S4-Status'] = 'new';&eol;&tab;&tab;params['X-S4-SourceSystem'] = 'Zabbix';&eol;&tab;}&eol;&eol;    payload = JSON.stringify(params);&eol;    Zabbix.log(4, '[ SIGNL4 Webhook ] Sending request: ' + payload);&eol;&eol;    request.addHeader('Content-Type: application/json');&eol;    response = request.post(endpoint, 'payload=' + payload);&eol;&eol;    Zabbix.log(4, '[ SIGNL4 Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response&eol;    );&eol;&eol;    if (request.getStatus() !== 201) {&eol;        throw 'Request failed with status code ' + request.getStatus() +&eol;                '. Check debug log for more information.';&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.log(4, '[ SIGNL4 Webhook ] ERROR: ' + error);&eol;&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            |SIGNL4 is a mobile alert notification app for powerful alerting, alert management and mobile assignment of work items. It offers alerting via app push, SMS and voice calls including escalations, tracking, and duty scheduling.&eol;&eol;Get the app at https://www.signl4.com.&eol;&eol;Find out more including an integration video here: https://www.signl4.com/blog/portfolio_item/zabbix-mobile-alert-notification-duty-schedule-escalation|0       |
ROW   |62         |4   |Slack                   |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |1          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;var serviceLogName = 'Slack Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Slack = CWebhook;&eol;&eol;Slack.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;alert_subject: { type: 'string' },&eol;&tab;&tab;alert_message: { type: 'string' },&eol;&tab;&tab;bot_token: { type: 'string' },&eol;&tab;&tab;zabbix_url: { type: 'string', url: true },&eol;&tab;&tab;channel: { type: 'string', macro: 'ALERT.SENDTO' },&eol;&tab;&tab;slack_mode: { type: 'string', array: ['alarm', 'event'], }&eol;&tab;}, this.params);&eol;&eol;&tab;if (this.params.event_source === '0') {&eol;&tab;&tab;CParamValidator.validate({&eol;&tab;&tab;&tab;event_id: { type: 'integer' },&eol;&tab;&tab;&tab;trigger_id: { type: 'integer' }&eol;&tab;&tab;}, this.params);&eol;&tab;}&eol;&eol;&tab;if (CParamValidator.inArray(this.params.event_source, ['0', '3', '4'])) {&eol;&tab;&tab;CParamValidator.validate({&eol;&tab;&tab;&tab;event_tags: { type: 'array', macro: 'EVENT.TAGSJSON', tags: true, default: {} }&eol;&tab;&tab;}, this.params);&eol;&tab;}&eol;&eol;&tab;if (this.params.event_value != '0' && CParamValidator.isDefined(this.params.event_tags['__channel_id_' + this.params.channel])) {&eol;&tab;&tab;this.params.event_update_status = '1';&eol;&tab;}&eol;&eol;&tab;this.severity_colors = [&eol;&tab;&tab;'#97AAB3',&eol;&tab;&tab;'#7499FF',&eol;&tab;&tab;'#FFC859',&eol;&tab;&tab;'#FFA059',&eol;&tab;&tab;'#E97659',&eol;&tab;&tab;'#E45959'&eol;&tab;];&eol;&eol;&tab;this.resolve_color = '#009900';&eol;&tab;this.slack_endpoint = 'https://slack.com/api/';&eol;&eol;&tab;this.problem_url = CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id);&eol;&eol;&tab;this.data = {&eol;&tab;&tab;channel: this.params.channel,&eol;&tab;&tab;attachments: [&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;fallback: this.params.alert_subject,&eol;&tab;&tab;&tab;&tab;title: this.params.alert_subject,&eol;&tab;&tab;&tab;&tab;color: this.severity_colors[this.params.event_nseverity],&eol;&tab;&tab;&tab;&tab;title_link: this.problem_url,&eol;&tab;&tab;&tab;&tab;text: this.params.alert_message,&eol;&tab;&tab;&tab;&tab;actions: [&eol;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;type: 'button',&eol;&tab;&tab;&tab;&tab;&tab;&tab;text: 'Open in Zabbix',&eol;&tab;&tab;&tab;&tab;&tab;&tab;url: this.problem_url&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;]&eol;&tab;&tab;&tab;}&eol;&tab;&tab;]&eol;&tab;};&eol;&eol;&tab;this.reply = {&eol;&tab;&tab;channel: this.params.channel,&eol;&tab;&tab;thread_ts: '',&eol;&tab;&tab;blocks: [&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;type: 'context',&eol;&tab;&tab;&tab;&tab;elements: [&eol;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;type: 'plain_text',&eol;&tab;&tab;&tab;&tab;&tab;&tab;text: 'Event update message'&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;]&eol;&tab;&tab;&tab;},&eol;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;type: 'rich_text',&eol;&tab;&tab;&tab;&tab;elements: [&eol;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;type: 'rich_text_section',&eol;&tab;&tab;&tab;&tab;&tab;&tab;elements: [&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;{&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;type: 'text',&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;text: '',&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;style: {&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;italic: true&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;&tab;&tab;]&eol;&tab;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;]&eol;&tab;&tab;&tab;}&eol;&tab;&tab;]&eol;&tab;};&eol;};&eol;&eol;Slack.prototype.sendRequest = function (route, data, tags) {&eol;&tab;this.request.clearHeader();&eol;&tab;this.request.addHeaders({&eol;&tab;&tab;'Content-Type': 'application/json; charset=utf-8;',&eol;&tab;&tab;'Authorization': 'Bearer ' + this.params.bot_token&eol;&tab;});&eol;&eol;&tab;var response = this.request.jsonRequest('POST', this.slack_endpoint + route, data);&eol;&eol;&tab;if (this.request.getStatus() !== 200 &pipe;&pipe; !CParamValidator.isType(response.ok, 'boolean') &pipe;&pipe; response.ok !== true) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.error, 'string')) {&eol;&tab;&tab;&tab;throw 'Endpoint response:' + response.error;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;if (tags) {&eol;&tab;&tab;return {&eol;&tab;&tab;&tab;tags: {&eol;&tab;&tab;&tab;&tab;['__message_ts_' + this.params.channel]: response.ts,&eol;&tab;&tab;&tab;&tab;['__channel_id_' + this.params.channel]: response.channel,&eol;&tab;&tab;&tab;&tab;['__message_link_' + this.params.channel]: this.getPermalink(response.channel, response.ts),&eol;&tab;&tab;&tab;}&eol;&tab;&tab;};&eol;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;return { tags: {} };&eol;&tab;}&eol;};&eol;&eol;Slack.prototype.getPermalink = function (channel, message_ts) {&eol;&tab;var response = this.request.jsonRequest('GET', this.slack_endpoint + 'chat.getPermalink' + '?channel=' + channel + '&message_ts=' + message_ts);&eol;&eol;&tab;if (this.request.getStatus() !== 200 &pipe;&pipe; !CParamValidator.isType(response.ok, 'boolean') &pipe;&pipe; response.ok !== true) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.error, 'string')) {&eol;&tab;&tab;&tab;throw 'Endpoint response:' + response.error;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;if (!CParamValidator.isDefined(response.permalink)) {&eol;&tab;&tab;throw 'Permalink is missed from the JSON response';&eol;&tab;}&eol;&eol;&tab;return response.permalink;&eol;};&eol;&eol;Slack.prototype.onProblem = function (properties) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + properties.source + '; Event: ' + properties.event);&eol;&eol;&tab;if (this.params.slack_mode === "alarm") {&eol;&tab;&tab;return this.sendRequest('chat.postMessage', this.data, true);&eol;&tab;} else {&eol;&tab;&tab;return this.sendRequest('chat.postMessage', this.data, false);&eol;&tab;}&eol;};&eol;&eol;Slack.prototype.onUpdate = function (properties) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + properties.source + '; Event: ' + properties.event);&eol;&eol;&tab;if (this.params.slack_mode === "alarm") {&eol;&tab;&tab;this.data.channel = this.params.event_tags['__channel_id_' + this.params.channel];&eol;&tab;&tab;this.data.ts = this.params.event_tags['__message_ts_' + this.params.channel];&eol;&eol;&tab;&tab;if (CParamValidator.isMacroSet(this.params.event_update_message, 'EVENT.UPDATE.MESSAGE') && !CParamValidator.isEmpty(this.params.event_update_message)) {&eol;&tab;&tab;&tab;this.reply.thread_ts = this.data.ts;&eol;&tab;&tab;&tab;this.reply.blocks[1].elements[0].elements[0].text = this.params.event_update_message;&eol;&tab;&tab;&tab;this.sendRequest('chat.postMessage', this.reply, false);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (/\backnowledged/.test(this.params.event_update_action)) {&eol;&tab;&tab;&tab;this.sendRequest('reactions.add', { channel: this.data.channel, timestamp: this.data.ts, name: 'white_check_mark' }, false);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (/\bunacknowledged/.test(this.params.event_update_action)) {&eol;&tab;&tab;&tab;this.sendRequest('reactions.remove', { channel: this.data.channel, timestamp: this.data.ts, name: 'white_check_mark' }, false);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (/\bclosed/.test(this.params.event_update_action)) {&eol;&tab;&tab;&tab;return { tags: {} };&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;return this.sendRequest('chat.update', this.data, false);&eol;&tab;&tab;}&eol;&tab;} else {&eol;&tab;&tab;return this.sendRequest('chat.postMessage', this.data, false);&eol;&tab;}&eol;};&eol;&eol;Slack.prototype.onResolve = function (properties) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + properties.source + '; Event: ' + properties.event);&eol;&tab;this.data.attachments[0].color = this.resolve_color;&eol;&eol;&tab;if (this.params.slack_mode === "alarm") {&eol;&tab;&tab;this.data.channel = this.params.event_tags['__channel_id_' + this.params.channel];&eol;&tab;&tab;this.data.ts = this.params.event_tags['__message_ts_' + this.params.channel];&eol;&eol;&tab;&tab;return this.sendRequest('chat.update', this.data, false);&eol;&tab;} else {&eol;&tab;&tab;return this.sendRequest('chat.postMessage', this.data, false);&eol;&tab;}&eol;};&eol;&eol;Slack.prototype.onDiscovery = function (properties) {&eol;&tab;return this.onProblem(properties);&eol;};&eol;&eol;Slack.prototype.onAutoreg = function (properties) {&eol;&tab;return this.onProblem(properties);&eol;};&eol;&eol;try {&eol;&tab;var hook = new Slack(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'Notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |0              |                                      |                                                            |Preparing slack for a Zabbix media type:&eol;1. On the page Your Apps (https://api.slack.com/apps) press 'Create an App', select 'From scratch' and specify its name and workspace.&eol;2. In the 'Add features and functionality' section, select 'Bots' and press 'Review Scopes to Add'.&eol;3. In the 'Scopes' section, find 'Bot Token Scopes', press 'Add an OAuth Scope' and add 'chat:write', 'im:write', 'groups:write' and 'reactions:write' scopes.&eol;4. In the 'Settings' section on the left side of the page press 'Install App' and then 'Install to Workspace'.&eol;5. Press 'Allow' and copy 'Bot User OAuth Access Token', which will be used to set up webhook.&eol;&eol;In Zabbix:&eol;1. Set global macro {$ZABBIX.URL}&eol;2. Set user media for slack using channel name or member ID&eol;3. Set media param 'bot_token' to the previously created token&eol;&eol;For a detailed instructions please read full README file https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/slack/README.md                     |0       |
ROW   |63         |4   |SolarWinds Service Desk |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var SolarWinds = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        SolarWinds.params = params;&eol;        SolarWinds.params.endpoint = 'https://api.samanage.com/';&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        SolarWinds.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof data.incident === 'object' && typeof fields === 'object' && Object.keys(fields).length) {&eol;            if (typeof fields.sw_fields === 'object' && Object.keys(fields.sw_fields).length) {&eol;                Object.keys(fields.sw_fields)&eol;                    .forEach(function(field) {&eol;                        try {&eol;                            data.incident[field] = JSON.parse(fields.sw_fields[field]);&eol;                        }&eol;                        catch (error) {&eol;                            data.incident[field] = fields.sw_fields[field];&eol;                        }&eol;                    });&eol;            }&eol;&eol;            if (typeof fields.sw_customfields === 'object' && Object.keys(fields.sw_customfields).length) {&eol;                data.incident.custom_fields_values = {custom_fields_value: []};&eol;                Object.keys(fields.sw_customfields)&eol;                    .forEach(function(field) {&eol;                        data.incident.custom_fields_values.custom_fields_value.push({&eol;                            name: field,&eol;                            value: fields.sw_customfields[field]&eol;                        });&eol;                    });&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['token'].forEach(function (field) {&eol;            if (typeof SolarWinds.params !== 'object' &pipe;&pipe; typeof SolarWinds.params[field] === 'undefined'&eol;                &pipe;&pipe; SolarWinds.params[field] === '' ) {&eol;                throw 'Required SolarWinds param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = SolarWinds.params.endpoint + query,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('X-Samanage-Authorization: Bearer ' + SolarWinds.params.token);&eol;        request.addHeader('Accept: application/vnd.samanage.v2.1+json');&eol;&eol;        if (typeof SolarWinds.HTTPProxy !== 'undefined' && SolarWinds.HTTPProxy !== '') {&eol;            request.setProxy(SolarWinds.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ SolarWinds SD Webhook ] Sending request: ' + url + ((typeof data === 'string')&eol;            ? ('\n' + data)&eol;            : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ SolarWinds SD Webhook ] Received response with status code ' + request.getStatus() +&eol;            '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ SolarWinds SD Webhook ] Failed to parse response received from SolarWinds');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.error !== 'undefined'&eol;                && Object.keys(response.error).length > 0) {&eol;                message += ': ' + JSON.stringify(response.error);&eol;            }&eol;            else if (response !== null && typeof response === 'object'&eol;                && Object.keys(response).length > 0) {&eol;                Object.keys(response)&eol;                    .forEach(function(field) {&eol;                        message += '\n' + field + ': ' + response[field][0];&eol;                    });&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    createIncident: function(name, description, fields) {&eol;        var data = {&eol;            incident: {&eol;                name: name,&eol;                description: description,&eol;                priority: SolarWinds.params.priority&eol;            }&eol;        };&eol;&eol;        var result = SolarWinds.request('post', 'incidents.json', SolarWinds.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.id === 'undefined') {&eol;            throw 'Cannot create SolarWinds incident. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.id;&eol;    },&eol;&eol;    updateIncident: function(name, fields, message) {&eol;        var data = {&eol;            incident: {&eol;                name: name,&eol;                priority: SolarWinds.params.priority&eol;            }&eol;        };&eol;&eol;        SolarWinds.request(&eol;            'put',&eol;            'incidents/' + SolarWinds.params.incident_id + '.json',&eol;            SolarWinds.addCustomFields(data, fields));&eol;&eol;        SolarWinds.commenIncident(message);&eol;    },&eol;&eol;    commenIncident: function(message) {&eol;        var data = {&eol;            comment: {&eol;                body: message&eol;            }&eol;        };&eol;&eol;        SolarWinds.request('post', 'incidents/' + SolarWinds.params.incident_id + '/comments.json', data);&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        samanage = {},&eol;        result = {tags: {}},&eol;        required_params = ['alert_subject', 'event_recovery_value', 'event_source', 'event_value', 'priority_default'],&eol;        severities = [&eol;            {name: 'not_classified'},&eol;            {name: 'information'},&eol;            {name: 'warning'},&eol;            {name: 'average'},&eol;            {name: 'high'},&eol;            {name: 'disaster'},&eol;            {name: 'resolved'},&eol;            {name: 'default'}&eol;        ];&eol;&eol;    fields.sw_fields = {};&eol;    fields.sw_customfields = {};&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('samanage_')) {&eol;                samanage[key.substring(9)] = params[key];&eol;            }&eol;            else if (key.startsWith('sw_field_')) {&eol;                fields.sw_fields[key.substring(9)] = params[key];&eol;            }&eol;            else if (key.startsWith('sw_customfield_')) {&eol;                fields.sw_customfields[key.substring(15)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_recovery_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    samanage.priority = params['priority_' + severities[params.event_nseverity].name] &pipe;&pipe; params.priority_default;&eol;&eol;    SolarWinds.setParams(samanage);&eol;    SolarWinds.setProxy(params.HTTPProxy);&eol;&eol;    // Create incident for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_recovery_value !== '0') {&eol;        SolarWinds.createIncident(params.alert_subject, params.alert_message);&eol;    }&eol;    // Create incident for trigger-based events.&eol;    else if (params.event_value === '1' && params.event_update_status === '0'&eol;            && (samanage.incident_id === '{EVENT.TAGS.__zbx_solarwinds_inc_id}' &pipe;&pipe; samanage.incident_id === '*UNKNOWN*')) {&eol;        var key = SolarWinds.createIncident(params.alert_subject, params.alert_message, fields);&eol;&eol;&eol;        result.tags.__zbx_solarwinds_inc_id = key;&eol;        result.tags.__zbx_solarwinds_inc_link = params.samanage_url +&eol;            (params.samanage_url.endsWith('/') ? '' : '/') + 'incidents/' + key;&eol;    }&eol;    // Update created incident for trigger-based event.&eol;    else {&eol;        if (samanage.incident_id === '{EVENT.TAGS.__zbx_solarwinds_inc_id}' &pipe;&pipe; samanage.incident_id === '' &pipe;&pipe; samanage.incident_id === '*UNKNOWN*') {&eol;            throw 'Incorrect incident key given: ' + samanage.incident_id;&eol;        }&eol;        if (!params.alert_message) {&eol;            throw 'Parameter "alert_message" can\'t be empty.';&eol;        }&eol;        SolarWinds.updateIncident(params.alert_subject, fields, params.alert_message);&eol;    }&eol;&eol;    if (params.event_source === '0') {&eol;        return JSON.stringify(result);&eol;    }&eol;    else {&eol;        return 'OK';&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ SolarWinds SD Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_solarwinds_inc_link}|SolarWinds incident ID: {EVENT.TAGS.__zbx_solarwinds_inc_id}||0       |
ROW   |64         |4   |SysAid                  |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var SysAid = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        var required = ['url', 'auth_user', 'auth_password', 'category_level_1', 'category_level_2',&eol;            'category_level_3', 'incident_id', 'template_id', 'urgency_id', 'incident_state',&eol;            'default_priority_id'&eol;        ];&eol;&eol;        required.forEach(function (field) {&eol;            if (typeof params !== 'object' &pipe;&pipe; typeof params[field] === 'undefined' &pipe;&pipe; params[field] === '') {&eol;                throw 'Required param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        SysAid.params = params;&eol;        if (typeof SysAid.params.url === 'string' && !SysAid.params.url.endsWith('/')) {&eol;            SysAid.params.url += '/';&eol;        }&eol;    },&eol;&eol;    login: function () {&eol;        var result = SysAid.request('post', 'api/v1/login', {&eol;            user_name: SysAid.params.auth_user,&eol;            password: SysAid.params.auth_password&eol;        });&eol;&eol;        return result.response.user.id;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        var response,&eol;            request = SysAid.req &pipe;&pipe; (SysAid.req = new HttpRequest()),&eol;            url = SysAid.params.url + query;&eol;&eol;        if (typeof SysAid.HTTPProxy !== 'undefined' && SysAid.HTTPProxy.trim() !== '') {&eol;            request.setProxy(SysAid.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ SysAid Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ SysAid Webhook ] Received response with status code ' + request.getStatus() + ': ' + response);&eol;&eol;        if (request.getStatus() !== 200) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            message += ': ' + response;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ SysAid Webhook ] Failed to parse response received from SysAid');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (response === null &pipe;&pipe; (typeof response.Error !== 'undefined' && Object.keys(response.Error).length > 0)) {&eol;            throw 'Request failed: ' + JSON.stringify(response.Error);&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    createIncident: function(subject, message, priority) {&eol;        var result = SysAid.request('post', 'api/v1/sr/?template=' + encodeURIComponent(SysAid.params.template_id), {&eol;            info: [&eol;                {&eol;                    key: 'problem_type',&eol;                    value: [&eol;                        SysAid.params.category_level_1,&eol;                        SysAid.params.category_level_2,&eol;                        SysAid.params.category_level_3&eol;                    ].join('_')&eol;                },&eol;                {&eol;                    key: 'title',&eol;                    value: subject&eol;                },&eol;                {&eol;                    key: 'description',&eol;                    value: message&eol;                },&eol;                {&eol;                    key: 'status',&eol;                    value: '1'&eol;                },&eol;                {&eol;                    key: 'urgency',&eol;                    value: SysAid.params.urgency_id&eol;                },&eol;                {&eol;                    key: 'priority',&eol;                    value: priority &pipe;&pipe; SysAid.params.default_priority_id,&eol;                }&eol;            ]&eol;        });&eol;&eol;        if (result.response.id === 'undefined') {&eol;            throw 'Cannot create SysAid incident. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.id;&eol;    },&eol;&eol;    updateTicket: function(note) {&eol;        var date = new Date().getTime();&eol;&eol;        SysAid.request('put', 'api/v1/sr/' + encodeURIComponent(SysAid.params.incident_id), {&eol;            id: SysAid.params.incident_id,&eol;            info: [&eol;                {&eol;                    key: 'update_time',&eol;                    value: date&eol;                },&eol;                {&eol;                    key: 'notes',&eol;                    value: [&eol;                        {&eol;                            userName: 'Zabbix',&eol;                            createDate: date,&eol;                            text: note&eol;                        }&eol;                    ]&eol;                }&eol;            ]&eol;        });&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        params_sysaid = {},&eol;        params_update = {},&eol;        result = {tags: {}},&eol;        required_params = ['alert_subject', 'event_source', 'event_value',  'event_update_status'],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: null, color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('sysaid_')) {&eol;                params_sysaid[key.substring(7)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                params_update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    if (params.event_source === '0' && ((params.event_value === '1' && params.event_update_status === '1')&eol;            &pipe;&pipe; (params.event_value === '0' && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;            && (isNaN(parseInt(params.sysaid_incident_id)) &pipe;&pipe; parseInt(params.sysaid_incident_id) < 1 )) {&eol;        throw 'Incorrect "sysaid_incident_id" parameter given: ' + params.sysaid_incident_id + '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name];&eol;    priority = priority && priority.trim() &pipe;&pipe; severities[7].name;&eol;&eol;    SysAid.setParams(params_sysaid);&eol;    SysAid.HTTPProxy = params.HTTPProxy;&eol;    SysAid.login();&eol;&eol;    if (params.event_source !== '0' && params.event_value !== '0') {&eol;        // Create ticket for non trigger-based events.&eol;        SysAid.createIncident(params.alert_subject, params.alert_message, priority);&eol;    }&eol;    else if (params.event_value === '1' && params_update.status === '0') {&eol;        // Create ticket for trigger-based events.&eol;        var incident_id = SysAid.createIncident(params.alert_subject, params.alert_subject + '\n' + params.alert_message +&eol;                '\n' + params.zabbix_url + (params.zabbix_url.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' +&eol;                params.trigger_id + '&eventid=' + params.event_id + '\n', priority&eol;        );&eol;&eol;        result.tags.__zbx_sysaid_incident_id = incident_id;&eol;        result.tags.__zbx_sysaid_incidentlink = params.sysaid_url +&eol;            (params.sysaid_url.endsWith('/') ? '' : '/') + 'SREdit.jsp?id=' + incident_id + '&fromId=IncidentsList';&eol;    }&eol;    else {&eol;        // Update created ticket for trigger-based event.&eol;        SysAid.updateTicket(params.alert_subject + '\n' + params.alert_message);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ SysAid Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_sysaid_incidentlink}|SysAid: incident #{EVENT.TAGS.__zbx_sysaid_incident_id}     ||0       |
ROW   |65         |4   |Telegram                |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;var serviceLogName = 'Telegram Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Telegram = CWebhook;&eol;&eol;function escapeMarkup(str, mode) {&eol;&tab;switch (mode) {&eol;&tab;&tab;case 'markdown':&eol;&tab;&tab;&tab;return str.replace(/([_*\[`])/g, '\\$&');&eol;&tab;&tab;case 'markdownv2':&eol;&tab;&tab;&tab;return str.replace(/([_*\[\]()~`>#+\-=&pipe;{}.!])/g, '\\$&');&eol;&tab;&tab;case 'html':&eol;&tab;&tab;&tab;return str.replace(/<(\s&pipe;[^a-z\/])/g, '&lt;$1');&eol;&tab;&tab;default:&eol;&tab;&tab;&tab;return str;&eol;&tab;}&eol;}&eol;&eol;Telegram.prototype.getMessageID = function (chat_id, message_thread_id) {&eol;&tab;const tag_key = '__telegram_msg_id_' + chat_id + (message_thread_id ? '_' + message_thread_id : '');&eol;&tab;if (CParamValidator.isDefined(this.params.event_tags[tag_key])) {&eol;&tab;&tab;return this.params.event_tags[tag_key];&eol;&tab;}&eol;&tab;return null;&eol;}&eol;&eol;Telegram.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate(&eol;&tab;&tab;{&eol;&tab;&tab;&tab;api_token: {type: 'string'},&eol;&tab;&tab;&tab;api_chat_id: {type: 'string'},&eol;&tab;&tab;&tab;alert_message: {type: 'string'},&eol;&tab;&tab;&tab;event_tags: {type: 'array', tags: true, default: {}}&eol;&tab;&tab;},&eol;&tab;&tab;this.params&eol;&tab;);&eol;&tab;this.params.url = 'https://api.telegram.org/bot';&eol;&tab;this.data = {&eol;&tab;&tab;disable_web_page_preview: true,&eol;&tab;&tab;disable_notification: false&eol;&tab;};&eol;&tab;const match = this.params.api_chat_id.match(/^(-?\d+&pipe;@[a-zA-Z0-9_]+)(?::(\d+))?$/);&eol;&tab;if (!match) {&eol;&tab;&tab;throw 'Invalid format for api_chat_id: "' + this.params.api_chat_id + '". Must be a numeric group ID or @GroupName, optionally followed by :message_thread_id.';&eol;&tab;}&eol;&tab;this.data['chat_id'] = match[1];&eol;&tab;if (CParamValidator.isDefined(match[2])) {&eol;&tab;&tab;this.data['message_thread_id'] = match[2];&eol;&tab;}&eol;&tab;this.data['text'] = ((this.params.alert_subject !== '') ? this.params.alert_subject + '\n' : '') + this.params.alert_message;&eol;&tab;if (['markdown', 'html', 'markdownv2'].indexOf(this.params.api_parse_mode.toLowerCase()) !== -1) {&eol;&tab;&tab;this.data['parse_mode'] = this.params.api_parse_mode.toLowerCase();&eol;&tab;&tab;this.data['text'] = escapeMarkup(this.data['text'], this.data['parse_mode']);&eol;&tab;}&eol;&tab;const reply_to_message_id = this.getMessageID(this.data['chat_id'], this.data['message_thread_id']);&eol;&tab;if (reply_to_message_id !== null) {&eol;&tab;&tab;this.data['reply_to_message_id'] = reply_to_message_id;&eol;&tab;}&eol;&tab;this.result = {tags: {}};&eol;};&eol;&eol;Telegram.prototype.onEvent = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&tab;Logger.log(Logger.INFO, 'URL: ' + this.params.url.replace(this.params.api_token, '<TOKEN>'));&eol;&tab;var response = this.request.jsonRequest('POST', this.params.url + this.params.api_token + '/sendMessage', this.data);&eol;&eol;&tab;if (this.request.getStatus() !== 200 &pipe;&pipe; !CParamValidator.isType(response.ok, 'boolean') &pipe;&pipe; response.ok !== true) {&eol;&tab;&tab;Logger.log(Logger.INFO, 'HTTP code: ' + this.request.getStatus());&eol;&tab;&tab;if (CParamValidator.isType(response.description, 'string')) {&eol;&tab;&tab;&tab;throw response.description;&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unknown error. Check debug log for more information.';&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;if (CParamValidator.isDefined(response.result.message_id) && this.getMessageID(this.data['chat_id'], this.data['message_thread_id']) === null) {&eol;&tab;&tab;this.result.tags['__telegram_msg_id_' + this.data['chat_id'] + (this.data['message_thread_id'] ? '_' + this.data['message_thread_id'] : '')] = response.result.message_id;&eol;&tab;}&eol;&eol;&tab;return this.result;&eol;};&eol;&eol;try {&eol;&tab;var hook = new Telegram(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |0              |                                      |                                                            |This media type integrates your Zabbix installation with Telegram using the Zabbix webhook feature.&eol;&eol;Telegram configuration:&eol;&eol;1. Register a new Telegram bot: send "/newbot" to "@BotFather" and follow the instructions. The token provided by "@BotFather" in the final step will be needed for configuring the Zabbix webhook.&eol;&eol;2. Set up personal or group notifications:&eol;&eol;2.1 Personal notifications:&eol;&eol;2.1.1 Retrieve the chat ID of the user the bot should send messages to. The user should send "/getid" to "@myidbot" in the Telegram messenger.&eol;&eol;2.1.2 The user should also send "/start" to the bot created in step 1. If you skip this step, the Telegram bot won't be able to send messages to the user (bots cannot initiate conversations with users).&eol;&eol;2.2 Group notifications:&eol;&eol;2.2.1 Retrieve the group ID of the group that the bot should send messages to. Add "@myidbot" and the bot created in step 1 to your group.&eol;&eol;2.2.2 In the group chat, send: "/getgroupid@myidbot".&eol;&eol;2.2.3 If the bot is added to a supergroup and you want the bot to send messages to a specific topic instead of the default "General" channel, right-click any message in that topic and click "Copy Message Link". The copied link will have the following format: "https://t.me/c/<short_group_id>/<topic_id>/<message_id>", for example: "https://t.me/c/1234567890/2/1". In this example, the topic ID is "2".&eol;&eol;Note:&eol;- The group ID is a negative number, for example: "-1234567890".&eol;- The supergroup ID is a negative number prefixed with "-100", for example: "-1001234567890"&eol;- The public group or supergroup ID can also be specified in media type properties as a name prefixed by "@", for example: "@MyGroupName".&eol;&eol;3. Depending on where you want to send notifications, copy and save the bot token, personal chat ID or group ID, and topic ID (if you want to send messages to a specific supergroup topic), as you will need these later to set up the media type in Zabbix.&eol;&eol;Zabbix configuration:&eol;&eol;1. Set the following webhook parameters:&eol;- "api_parse_mode" - the formatting mode applied for messages (possible values: "markdown", "html", "markdownv2")&eol;- "api_token" - the token of the bot used to send messages&eol;&eol;Learn more about message formatting options in Telegram Bot API documentation:&eol;- Markdown: https://core.telegram.org/bots/api#markdown-style&eol;- HTML: https://core.telegram.org/bots/api#html-style&eol;- MarkdownV2: https://core.telegram.org/bots/api#markdownv2-style&eol;&eol;Note: Your Telegram-related actions should be separated from other notification types (e.g., SMS); otherwise, if you use Markdown or HTML in the alert subject or body, you may receive plain-text alerts with raw tags.&eol;&eol;2. Click the "Enabled" checkbox to enable the media type and click the "Update" button to save the webhook settings.&eol;&eol;3. Create a Zabbix user and add media:&eol;- To create a new user, go to the "Users" → "Users" section, click the "Create user" button in the top right corner. In the "User" tab, fill in all required fields (marked with red asterisks).&eol;- Make sure this user has access to all hosts for which you would like problem notifications to be sent to Zammad.&eol;- In the "Media" tab, click "Add" and select the type "Telegram" from the drop-down list.&eol;- In the "Send to" field, specify the Telegram user chat ID or group ID that you retrieved during Telegram setup. To send notifications to a specific topic within a supergroup, specify the topic ID after the semicolon delimiter in the format "<group_id>:<topic_id>", for example: "-1001234567890:2", "@MyGroupName:2".&eol;&eol;4. Done! You can now start using this media type in actions and create tickets.&eol;&eol;You can find the latest version of this media and additional information in the official Zabbix repository:&eol;https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/telegram|0       |
ROW   |66         |4   |TOPdesk                 |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Media = {&eol;    params: {},&eol;    name: '',&eol;    labels: [],&eol;    HTTPProxy: '',&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Media.params = params;&eol;        Media.params.api += Media.params.api.endsWith('/') ? '' : '/';&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        if (typeof HTTPProxy !== 'undefined' && HTTPProxy.trim() !== '') {&eol;            Media.HTTPProxy = HTTPProxy;&eol;        }&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['api', 'token'].forEach(function (field) {&eol;            if (typeof Media.params !== 'object' &pipe;&pipe; typeof Media.params[field] === 'undefined'&eol;                    &pipe;&pipe; Media.params[field] === '') {&eol;                throw 'Required ' + Media.name + ' param is not set: "' + field + '".';&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Media.params.api + query,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Accept: application/json');&eol;        request.addHeader('Authorization: ' + Media.params.token);&eol;        request.setProxy(Media.HTTPProxy);&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Sending request: ' +&eol;            url + ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Failed to parse response.');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null) {&eol;                if (typeof response.errors === 'object' && Object.keys(response.errors).length > 0) {&eol;                    message += ': ' + JSON.stringify(response.errors);&eol;                }&eol;                else if (typeof response.errorMessages === 'object' && Object.keys(response.errorMessages).length > 0) {&eol;                    message += ': ' + JSON.stringify(response.errorMessages);&eol;                }&eol;                else if (typeof response.message === 'string') {&eol;                    message += ': ' + response.message;&eol;                }&eol;            }&eol;&eol;            throw message + ' Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    }&eol;};&eol;&eol;try {&eol;    var result = {tags: {}},&eol;        params = JSON.parse(value),&eol;        media = {},&eol;        fields = {},&eol;        resp = {},&eol;        required_params = [&eol;            'alert_subject',&eol;            'alert_message',&eol;            'event_id',&eol;            'event_source',&eol;            'event_value',&eol;            'event_update_status',&eol;            'topdesk_api',&eol;            'topdesk_user',&eol;            'topdesk_password'&eol;        ],&eol;        severities = [&eol;            'not_classified',&eol;            'information',&eol;            'warning',&eol;            'average',&eol;            'high',&eol;            'disaster',&eol;            'resolved',&eol;            'default'&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter "' + key + '" cannot be empty.';&eol;            }&eol;            if (key.startsWith('topdesk_')) {&eol;                media[key.substring(8)] = params[key];&eol;            }&eol;        });&eol;&eol;    // Possible values of event_source:&eol;    // 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-3.';&eol;    }&eol;&eol;    // Check event_value for trigger-based and internal events.&eol;    // Possible values: 1 for problem, 0 for recovering&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check event_update_status only for trigger-based events.&eol;    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check event_id for a numeric value.&eol;    if (isNaN(parseInt(params.event_id)) &pipe;&pipe; params.event_id < 1) {&eol;        throw 'Incorrect "event_id" parameter given: ' + params.event_id + '\nMust be a positive number.';&eol;    }&eol;&eol;    if ((params.event_source === '1' &pipe;&pipe; params.event_source === '2')  && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for Trigger and Internal actions.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity]];&eol;    params.zbxurl = params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/');&eol;&eol;    Media.name = 'TOPdesk';&eol;    Media.setParams(media);&eol;    Media.params.token = 'Basic ' + btoa(Media.params.user + ':' + Media.params.password);&eol;    Media.setProxy(params.HTTPProxy);&eol;&eol;    // Create an issue.&eol;    // Numeric value of the event that triggered an action (1 for problem, 0 for recovering).&eol;    // Numeric value of the problem update status. Possible values:&eol;    // 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if ((params.event_source == 0 && params.event_value == 1 && params.event_update_status == 0)&eol;            &pipe;&pipe; (params.event_source == 3 && params.event_value == 1)&eol;            &pipe;&pipe; params.event_source == 1 &pipe;&pipe; params.event_source == 2) {&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Request of the ticket creating.');&eol;        fields.caller = {dynamicName: 'Zabbix'};&eol;        fields.briefDescription = params.alert_subject;&eol;        fields.request = params.alert_message.replace(/\n/g, '<br>');&eol;        fields.priority = {name: priority};&eol;        fields.processingStatus = {name: Media.params.status};&eol;        fields.externalNumber = params.event_id;&eol;        fields.request += '<br>' + params.zbxurl;&eol;&eol;        if (params.event_source === '0') {&eol;            fields.request += 'tr_events.php?triggerid=' + params.trigger_id + '&eventid=' + params.event_id;&eol;        }&eol;&eol;        resp = Media.request('post', 'tas/api/incidents', fields);&eol;        if (typeof resp.response !== 'object' &pipe;&pipe; typeof resp.response.id === 'undefined') {&eol;            throw 'Cannot create ' + Media.name + ' issue. Check debug log for more information.';&eol;        }&eol;&eol;        if (params.event_source == 0 && params.event_value == 1 && params.event_update_status == 0) {&eol;            result.tags.__zbx_tpd_issuekey = resp.response.number;&eol;            result.tags.__zbx_tpd_issuelink = Media.params.api +&eol;                'tas/secure/incident?action=show&unid=' + resp.response.id;&eol;        }&eol;    }&eol;    // Update a created issue.&eol;    else {&eol;        if (params.event_source == 3 && params.event_value == 0) {&eol;            throw 'Internal event recovery actions are not supported.';&eol;        }&eol;&eol;        Zabbix.log(4, '[ ' + Media.name + ' Webhook ] Request of the ticket updating.');&eol;        fields.action = params.alert_message.replace(/\n/g, '<br>');&eol;&eol;        resp = Media.request('put', 'tas/api/incidents/number/' + Media.params.issue_key, fields);&eol;        if (typeof resp.response !== 'object' &pipe;&pipe; typeof resp.response.id === 'undefined'&eol;                &pipe;&pipe; resp.response.number !== Media.params.issue_key) {&eol;            throw 'Cannot update ' + Media.name + ' issue. Check debug log for more information.';&eol;        }&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ ' + Media.name + ' Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_tpd_issuelink}      |TOPdesk: {EVENT.TAGS.__zbx_tpd_issuekey}                    |Please refer to https://developers.topdesk.com/documentation/index.html and https://www.zabbix.com/documentation/7.0/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add a dedicated user with the media type "TOPdesk".&eol;Change the values of the variables topdesk_api (URL), topdesk_password, topdesk_user. The topdesk_status is the default status for creating a new TOPdesk ticket|0       |
ROW   |67         |4   |VictorOps               |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var VictorOps = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        VictorOps.params = params;&eol;        if (VictorOps.params.endpoint) {&eol;            if (!VictorOps.params.endpoint.endsWith('/')) {&eol;                VictorOps.params.endpoint += '/';&eol;            }&eol;&eol;            if (typeof VictorOps.params.routing_key !== 'undefined'&eol;                    && VictorOps.params.routing_key !== '{ALERT.SENDTO}'&eol;                    && VictorOps.params.routing_key !== 'Default') {&eol;                VictorOps.params.endpoint += VictorOps.params.routing_key;&eol;            }&eol;        }&eol;    },&eol;&eol;    setProxy: function (HTTPProxy) {&eol;        VictorOps.HTTPProxy = HTTPProxy;&eol;    },&eol;&eol;    addFields: function (fields) {&eol;        var data = {};&eol;&eol;        if (typeof fields === 'object') {&eol;            Object.keys(fields)&eol;                .forEach(function(field) {&eol;                    if (fields[field] === '') {&eol;                        Zabbix.log(4, '[ VictorOps Webhook ] Field "' + field +&eol;                            '" can\'t be empty. The field ignored.');&eol;                    }&eol;                    else {&eol;                        try {&eol;                            var parts = field.split(':'),&eol;                                prefix = parts[0].split('_');&eol;&eol;                            if (typeof prefix[1] === 'undefined'&eol;                                    &pipe;&pipe; (prefix[1] === 'p' && params.event_value === '1'&eol;                                        && (params.event_update_status === '0'&eol;                                            &pipe;&pipe; params.event_update_status === '{EVENT.UPDATE.STATUS}'))&eol;                                    &pipe;&pipe; (prefix[1] === 'r' && params.event_value === '0'&eol;                                        && (params.event_update_status === '0'&eol;                                            &pipe;&pipe; params.event_update_status === '{EVENT.UPDATE.STATUS}'))&eol;                                    &pipe;&pipe; (prefix[1] === 'u' && params.event_update_status === '1')) {&eol;                                data[field.substring(field.indexOf(':') + 1)] = fields[field];&eol;                            }&eol;                        }&eol;                        catch (error) {&eol;                            Zabbix.log(4, '[ VictorOps Webhook ] Can\'t parse field "' + field +&eol;                                '". The field ignored.');&eol;                        }&eol;                    }&eol;                });&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (data) {&eol;        if (typeof VictorOps.params !== 'object' &pipe;&pipe; typeof VictorOps.params.endpoint === 'undefined'&eol;                &pipe;&pipe; VictorOps.params.endpoint === '' ) {&eol;            throw 'Required parameter is not set: "vops_endpoint".';&eol;        }&eol;&eol;        var response,&eol;            url = VictorOps.params.endpoint,&eol;            request = new HttpRequest();&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;&eol;        if (typeof VictorOps.HTTPProxy !== 'undefined' && VictorOps.HTTPProxy !== '') {&eol;            request.setProxy(VictorOps.HTTPProxy);&eol;        }&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[ VictorOps Webhook ] Sending request: ' + url +&eol;            ((typeof data === 'string') ? ('\n' + data) : ''));&eol;&eol;        response = request.post(url, data);&eol;&eol;        Zabbix.log(4, '[ VictorOps Webhook ] Received response with status code ' +&eol;            request.getStatus() + '\n' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[ VictorOps Webhook ] Failed to parse response received from VictorOps');&eol;                response = null;&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.messages !== 'undefined') {&eol;                message += ': ' + JSON.stringify(response.messages);&eol;            }&eol;&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;&eol;        return response;&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        vops = {},&eol;        required_params = ['event_source', 'event_value', 'priority_update'],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ];&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('vops_')) {&eol;                vops[key.substring(5)] = params[key];&eol;            }&eol;            else if (key.startsWith('field')) {&eol;                fields[key.substring(5)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key] === '') {&eol;                throw 'Parameter "' + key + '" can\'t be empty.';&eol;            }&eol;        });&eol;&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;            && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    if (params.event_update_status === '1') {&eol;        fields[':message_type'] = params.priority_update;&eol;    }&eol;    else {&eol;        fields[':message_type'] = params['priority_' + severities[params.event_nseverity].name]&eol;            &pipe;&pipe; 'INFO';&eol;    }&eol;&eol;    if (params.event_info && params.event_source === '0') {&eol;        fields[':event_info'] = params.event_info;&eol;    }&eol;&eol;    VictorOps.setParams(vops);&eol;    VictorOps.setProxy(params.HTTPProxy);&eol;    VictorOps.request(VictorOps.addFields(fields));&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[ VictorOps Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                            ||0       |
ROW   |68         |4   |Zammad                  |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |const CLogger = function(serviceName) {&eol;&tab;this.serviceName = serviceName;&eol;&tab;this.INFO = 4&eol;&tab;this.WARN = 3&eol;&tab;this.ERROR = 2&eol;&tab;this.log = function(level, msg) {&eol;&tab;&tab;Zabbix.log(level, '[' + this.serviceName + '] ' + msg);&eol;&tab;}&eol;}&eol;&eol;const CWebhook = function(value) {&eol;&tab;try {&eol;&tab;&tab;params = JSON.parse(value);&eol;&eol;&tab;&tab;if (['0', '1', '2', '3', '4'].indexOf(params.event_source) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_source" parameter given: ' + params.event_source + '.\nMust be 0-4.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1 && ['0', '1'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0 or 1.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;if (['0', '3', '4'].indexOf(params.event_source) !== -1) {&eol;&tab;&tab;&tab;if (params.event_source === '1' && ['0', '1', '2', '3'].indexOf(params.event_value) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_value" parameter given: ' + params.event_value + '.\nMust be 0-3.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '0' && ['0', '1'].indexOf(params.event_update_status) === -1) {&eol;&tab;&tab;&tab;&tab;throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '.\nMust be 0 or 1.';&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;if (params.event_source === '4') {&eol;&tab;&tab;&tab;&tab;if (['0', '1', '2', '3', '4', '5'].indexOf(params.event_update_nseverity) !== -1 && params.event_update_nseverity != params.event_nseverity) {&eol;&tab;&tab;&tab;&tab;&tab;params.event_nseverity = params.event_update_nseverity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_severity = params.event_update_severity;&eol;&tab;&tab;&tab;&tab;&tab;params.event_update_status = '1';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.runCallback = function(name, params) {&eol;&tab;&tab;&tab;if (typeof this[name] === 'function') {&eol;&tab;&tab;&tab;&tab;return this[name].apply(this, [params]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEvent = function(source, event) {&eol;&tab;&tab;&tab;const alert = { source: source, event: event };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + event, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.handleEventless = function(source) {&eol;&tab;&tab;&tab;const alert = { source: source, event: null };&eol;&tab;&tab;&tab;return [&eol;&tab;&tab;&tab;&tab;this.runCallback('on' + source, alert),&eol;&tab;&tab;&tab;&tab;this.runCallback('onEvent', alert)&eol;&tab;&tab;&tab;];&eol;&tab;&tab;}&eol;&eol;&tab;&tab;this.run = function() {&eol;&tab;&tab;&tab;var results = [];&eol;&tab;&tab;&tab;if (typeof this.httpProxy === 'string' && this.httpProxy.trim() !== '') {&eol;&tab;&tab;&tab;&tab;this.request.setProxy(this.httpProxy);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;const types = { '0': 'Trigger', '1': 'Discovery', '2': 'Autoreg', '3': 'Internal', '4': 'Service' };&eol;&eol;&tab;&tab;&tab;if (['0', '3', '4'].indexOf(this.params.event_source) !== -1) {&eol;&tab;&tab;&tab;&tab;var event = (this.params.event_update_status === '1')&eol;&tab;&tab;&tab;&tab;&tab;? 'Update'&eol;&tab;&tab;&tab;&tab;&tab;: ((this.params.event_value === '1') ? 'Problem' : 'Resolve');&eol;&eol;&tab;&tab;&tab;&tab;results = this.handleEvent(types[this.params.event_source], event);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else if (typeof types[this.params.event_source] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;results = this.handleEventless(types[this.params.event_source]);&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;throw 'Unexpected "event_source": ' + this.params.event_source;&eol;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;for (idx in results) {&eol;&tab;&tab;&tab;&tab;if (typeof results[idx] !== 'undefined') {&eol;&tab;&tab;&tab;&tab;&tab;return JSON.stringify(results[idx]);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;this.httpProxy = params.http_proxy;&eol;&tab;&tab;this.params = params;&eol;&tab;&tab;this.runCallback('onCheckParams', {});&eol;&tab;} catch (error) {&eol;&tab;&tab;throw 'Webhook processing failed: ' + error;&eol;&tab;}&eol;}&eol;&eol;const CParamValidator = {&eol;&eol;&tab;isType: function(value, type) {&eol;&tab;&tab;if (type === 'array') {&eol;&tab;&tab;&tab;return Array.isArray(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'integer') {&eol;&tab;&tab;&tab;return CParamValidator.isInteger(value);&eol;&tab;&tab;}&eol;&tab;&tab;if (type === 'float') {&eol;&tab;&tab;&tab;return CParamValidator.isFloat(value);&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (typeof value === type);&eol;&tab;},&eol;&eol;&tab;isInteger: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseInt(value));&eol;&tab;},&eol;&eol;&tab;isFloat: function(value) {&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, /^-?\d+\.\d+$/)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !isNaN(parseFloat(value));&eol;&tab;},&eol;&eol;&tab;isDefined: function(value) {&eol;&tab;&tab;return !CParamValidator.isType(value, 'undefined');&eol;&tab;},&eol;&eol;&tab;isEmpty: function(value) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be checked for emptiness.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (value.trim() === '');&eol;&tab;},&eol;&eol;&tab;isMacroSet: function(value, macro) {&eol;&tab;&tab;if (CParamValidator.isDefined(macro)) {&eol;&tab;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{' + macro + '\}$'))&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return !(CParamValidator.ifMatch(value, '^\{[$#]{0,1}[A-Z_\.]+[\:]{0,1}["]{0,1}.*["]{0,1}\}$') &pipe;&pipe; value === '*UNKNOWN*')&eol;&tab;},&eol;&eol;&tab;withinRange: function(value, min, max) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'number')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a number to be checked for range.';&eol;&tab;&tab;}&eol;&tab;&tab;if (value < ((CParamValidator.isDefined(min)) ? min : value)&eol;&tab;&tab;&tab;&pipe;&pipe; value > ((CParamValidator.isDefined(max)) ? max : value)) {&eol;&tab;&tab;&tab;return false;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return true;&eol;&tab;},&eol;&eol;&tab;inArray: function(value, array) {&eol;&tab;&tab;if (!CParamValidator.isType(array, 'array')) {&eol;&tab;&tab;&tab;throw 'The array must be an array to check the value for existing in it.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return (array.indexOf((typeof value === 'string') ? value.toLowerCase() : value) !== -1);&eol;&tab;},&eol;&eol;&tab;ifMatch: function(value, regex) {&eol;&tab;&tab;return (new RegExp(regex)).test(value);&eol;&tab;},&eol;&eol;&tab;match: function(value, regex) {&eol;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;throw 'Value "' + value + '" must be a string to be matched with the regular expression.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.match(new RegExp(regex));&eol;&tab;},&eol;&eol;&tab;checkURL: function(value) {&eol;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must be a non-empty string.';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.ifMatch(value, '^(http&pipe;https):\/\/.+')) {&eol;&tab;&tab;&tab;throw 'URL value "' + value + '" must contain a schema.';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return value.endsWith('/') ? value.slice(0, -1) : value;&eol;&tab;},&eol;&eol;&tab;check: function(key, rule, params) {&eol;&tab;&tab;if (!CParamValidator.isDefined(rule.type)) {&eol;&tab;&tab;&tab;throw 'Mandatory attribute "type" has not been defined for parameter "' + key + '".';&eol;&tab;&tab;}&eol;&tab;&tab;if (!CParamValidator.isDefined(params[key])) {&eol;&tab;&tab;&tab;throw 'Checked parameter "' + key + '" was not found in the list of input parameters.';&eol;&tab;&tab;}&eol;&tab;&tab;var value = params[key],&eol;&tab;&tab;&tab;error_message = null;&eol;&tab;&tab;switch (rule.type) {&eol;&tab;&tab;&tab;case 'string':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'string')) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" must be a string.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isEmpty(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a non-empty string';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.len) && value.length < rule.len) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a string with a length > ' + rule.len;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.regex) && !CParamValidator.ifMatch(value, rule.regex)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must match the regular expression "' + rule.regex + '"';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.url) && rule.url === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = CParamValidator.checkURL(value);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'integer':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isInteger(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an integer';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseInt(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'float':&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isFloat(value)) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a floating-point number';&eol;&tab;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;value = parseFloat(value);&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'boolean':&eol;&tab;&tab;&tab;&tab;if (CParamValidator.inArray(value, ['1', 'true', 'yes', 'on'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = true;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else if (CParamValidator.inArray(value, ['0', 'false', 'no', 'off'])) {&eol;&tab;&tab;&tab;&tab;&tab;value = false;&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a boolean-like.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'array':&eol;&tab;&tab;&tab;&tab;try {&eol;&tab;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;} catch (error) {&eol;&tab;&tab;&tab;&tab;&tab;throw 'Value "' + key + '" contains invalid JSON.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'array')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an array.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.tags) && rule.tags === true) {&eol;&tab;&tab;&tab;&tab;&tab;value = value.reduce(function(acc, obj) {&eol;&tab;&tab;&tab;&tab;&tab;&tab;acc[obj.tag] = obj.value &pipe;&pipe; null;&eol;&tab;&tab;&tab;&tab;&tab;&tab;return acc;&eol;&tab;&tab;&tab;&tab;&tab;}, {});&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;case 'object':&eol;&tab;&tab;&tab;&tab;value = JSON.parse(value);&eol;&tab;&tab;&tab;&tab;if (!CParamValidator.isType(value, 'object')) {&eol;&tab;&tab;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be an object.';&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;&tab;break;&eol;&tab;&tab;&tab;default:&eol;&tab;&tab;&tab;&tab;throw 'Unexpected attribute type "' + rule.type + '" for value "' + key + '". Available: ' +&eol;&tab;&tab;&tab;&tab;['integer', 'float', 'string', 'boolean', 'array', 'object'].join(', ');&eol;&tab;&tab;}&eol;&tab;&tab;params[key] = value;&eol;&tab;&tab;if (CParamValidator.inArray(rule.type, ['integer', 'float']) && error_message === null && (CParamValidator.isDefined(rule.min)&eol;&tab;&tab;&tab;&pipe;&pipe; CParamValidator.isDefined(rule.max)) && !CParamValidator.withinRange(value, rule.min, rule.max)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be a number ' + ((CParamValidator.isDefined(rule.min) && CParamValidator.isDefined(rule.max))&eol;&tab;&tab;&tab;&tab;? (rule.min + '..' + rule.max) : ((CParamValidator.isDefined(rule.min)) ? '>' + rule.min : '<' + rule.max));&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.array) && !CParamValidator.inArray(value, rule.array)) {&eol;&tab;&tab;&tab;error_message = 'Value "' + key + '" must be in the array ' + JSON.stringify(rule.array);&eol;&tab;&tab;}&eol;&tab;&tab;else if (CParamValidator.isDefined(rule.macro) && !CParamValidator.isMacroSet(value.toString(), rule.macro)) {&eol;&tab;&tab;&tab;error_message = 'The macro ' + ((CParamValidator.isDefined(rule.macro)) ? '{' + rule.macro + '} ' : ' ') + 'is not set';&eol;&tab;&tab;}&eol;&tab;&tab;if (error_message !== null) {&eol;&tab;&tab;&tab;if (CParamValidator.isDefined(rule.default) && CParamValidator.isType(rule.default, rule.type)) {&eol;&tab;&tab;&tab;&tab;params[key] = rule.default;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;Zabbix.log(4, 'Default value for "' + key + '" must be a ' + rule.type + '. Skipped.');&eol;&tab;&tab;&tab;&tab;throw 'Incorrect value for variable "' + key + '". ' + error_message;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return this;&eol;&tab;},&eol;&eol;&tab;validate: function(rules, params) {&eol;&tab;&tab;if (!CParamValidator.isType(params, 'object') &pipe;&pipe; CParamValidator.isType(params, 'array')) {&eol;&tab;&tab;&tab;throw 'Incorrect parameters value. The value must be an object.';&eol;&tab;&tab;}&eol;&tab;&tab;for (var key in rules) {&eol;&tab;&tab;&tab;CParamValidator.check(key, rules[key], params);&eol;&tab;&tab;}&eol;&tab;}&eol;}&eol;&eol;const CHttpRequest = function(logger) {&eol;&tab;this.request = new HttpRequest();&eol;&tab;if (typeof logger !== 'object' &pipe;&pipe; logger === null) {&eol;&tab;&tab;this.logger = Zabbix;&eol;&tab;}&eol;&tab;else {&eol;&tab;&tab;this.logger = logger;&eol;&tab;}&eol;&eol;&tab;this.clearHeader = function() {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;}&eol;&eol;&tab;this.addHeaders = function(value) {&eol;&tab;&tab;var headers = [];&eol;&eol;&tab;&tab;if (typeof value === 'object' && value !== null) {&eol;&tab;&tab;&tab;if (!Array.isArray(value)) {&eol;&tab;&tab;&tab;&tab;Object.keys(value).forEach(function(key) {&eol;&tab;&tab;&tab;&tab;&tab;headers.push(key + ': ' + value[key]);&eol;&tab;&tab;&tab;&tab;});&eol;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;else {&eol;&tab;&tab;&tab;&tab;headers = value;&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;else if (typeof value === 'string') {&eol;&tab;&tab;&tab;value.split('\r\n').forEach(function(header) {&eol;&tab;&tab;&tab;&tab;headers.push(header);&eol;&tab;&tab;&tab;});&eol;&tab;&tab;}&eol;&eol;&tab;&tab;for (var idx in headers) {&eol;&tab;&tab;&tab;this.request.addHeader(headers[idx]);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;this.setProxy = function(proxy) {&eol;&tab;&tab;this.request.setProxy(proxy);&eol;&tab;}&eol;&eol;&tab;this.plainRequest = function(method, url, data) {&eol;&tab;&tab;var resp = null;&eol;&tab;&tab;method = method.toLowerCase();&eol;&tab;&tab;this.logger.log(4, 'Sending ' + method + ' request:' + JSON.stringify(data));&eol;&tab;&tab;if (['get', 'post', 'put', 'patch', 'delete', 'trace'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url, data);&eol;&tab;&tab;}&eol;&tab;&tab;else if (['connect', 'head', 'options'].indexOf(method) !== -1) {&eol;&tab;&tab;&tab;resp = this.request[method](url);&eol;&tab;&tab;}&eol;&tab;&tab;else {&eol;&tab;&tab;&tab;throw 'Unexpected method. Method ' + method + ' is not supported.';&eol;&tab;&tab;}&eol;&tab;&tab;this.logger.log(4, 'Response has been received: ' + resp);&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.jsonRequest = function(method, url, data) {&eol;&tab;&tab;this.addHeaders('Content-Type: application/json');&eol;&tab;&tab;var resp = this.plainRequest(method, url, JSON.stringify(data));&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;resp = JSON.parse(resp);&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;throw 'Failed to parse response: not well-formed JSON was received';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return resp;&eol;&tab;}&eol;&eol;&tab;this.getStatus = function() {&eol;&tab;&tab;return this.request.getStatus();&eol;&tab;}&eol;}&eol;&eol;const CWebhookHelper = {&eol;&eol;&tab;createProblemURL: function(event_source, zabbix_url, trigger_id, event_id) {&eol;&tab;&tab;if (event_source === '0') {&eol;&tab;&tab;&tab;return zabbix_url + '/tr_events.php?triggerid=' + trigger_id + '&eventid=' + event_id;&eol;&tab;&tab;} else if (event_source === '4') {&eol;&tab;&tab;&tab;return zabbix_url + '/zabbix.php?action=service.list';&eol;&tab;&tab;}&eol;&eol;&tab;&tab;return zabbix_url;&eol;&tab;},&eol;&eol;};&eol;&eol;var ZABBIX_SEVERITY_MAP = ["not_classified", "information", "warning", "average", "high", "disaster"],&eol;&tab;serviceLogName = 'Zammad Webhook',&eol;&tab;Logger = new CLogger(serviceLogName),&eol;&tab;Zammad = CWebhook;&eol;&eol;Zammad.prototype.onCheckParams = function () {&eol;&tab;CParamValidator.validate({&eol;&tab;&tab;alert_message: {type: 'string'},&eol;&tab;&tab;alert_subject: {type: 'string'},&eol;&tab;&tab;zammad_url: {type: 'string', url: true},&eol;&tab;&tab;zammad_customer: {type: 'string'},&eol;&tab;&tab;zammad_access_token: {type: 'string'},&eol;&tab;&tab;zammad_group: {type: 'string'},&eol;&tab;&tab;zammad_enable_tags: {type: 'boolean', default: false},&eol;&tab;&tab;event_nseverity: {type: 'integer', default: -1},&eol;&tab;&tab;zabbix_url: {type: 'string', url: true}&eol;&tab;}, this.params);&eol;&eol;&tab;if (CParamValidator.inArray(this.params.event_source, ['0', '3', '4'])) {&eol;&tab;&tab;CParamValidator.validate({&eol;&tab;&tab;&tab;event_tags: {type: 'array', macro: 'EVENT.TAGSJSON', tags: true, default: {}}&eol;&tab;&tab;}, this.params);&eol;&tab;}&eol;&eol;&tab;var priority;&eol;&eol;&tab;if (this.params.event_nseverity >= 0 && this.params.event_nseverity < ZABBIX_SEVERITY_MAP.length) {&eol;&tab;&tab;priority = this.params['severity_' + ZABBIX_SEVERITY_MAP[this.params.event_nseverity]];&eol;&tab;}&eol;&tab;this.priority = (CParamValidator.isDefined(priority)) ? priority.trim() : null;&eol;&eol;&tab;this.result = {tags: {}};&eol;};&eol;&eol;Zammad.prototype.onProblem = function (alert) {&eol;&tab;if (CParamValidator.isDefined(this.params.event_tags['__zbx_zammad_ticket_id'])) {&eol;&tab;&tab;return this.onUpdate(alert);&eol;&tab;}&eol;&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;this.request.addHeaders('Authorization: Token token=' + this.params.zammad_access_token);&eol;&eol;&tab;var payload_data = {&eol;&tab;&tab;title: this.params.alert_subject,&eol;&tab;&tab;group: this.params.zammad_group,&eol;&tab;&tab;article: {&eol;&tab;&tab;&tab;subject: this.params.alert_subject,&eol;&tab;&tab;&tab;body: this.params.alert_message + '\n' + CWebhookHelper.createProblemURL(this.params.event_source, this.params.zabbix_url, this.params.trigger_id, this.params.event_id),&eol;&tab;&tab;&tab;type: 'note',&eol;&tab;&tab;&tab;internal: false&eol;&tab;&tab;},&eol;&tab;&tab;customer: this.params.zammad_customer&eol;&tab;};&eol;&eol;&tab;if (this.priority) {&eol;&tab;&tab;payload_data.priority_id = this.priority;&eol;&tab;}&eol;&eol;&tab;const response = this.request.jsonRequest('POST', this.params.zammad_url + '/api/v1/tickets', payload_data);&eol;&eol;&tab;if (this.request.getStatus() != 201 &pipe;&pipe; !CParamValidator.isDefined(response.id)) {&eol;&tab;&tab;var message = 'Cannot create Zammad ticket. Request failed with status code ' + this.request.getStatus();&eol;&eol;&tab;&tab;if (CParamValidator.isDefined(response.error) && Object.keys(response.error).length > 0) {&eol;&tab;&tab;&tab;message += ': ' + response.error;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;throw message + ' Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;this.result.tags = {&eol;&tab;&tab;__zbx_zammad_ticket_id: response.id,&eol;&tab;&tab;__zbx_zammad_ticketlink: this.params.zammad_url + '/#ticket/zoom/' + response.id&eol;&tab;};&eol;&eol;&tab;if (this.params.zammad_enable_tags && Object.keys(this.params.event_tags).length > 0 && CParamValidator.inArray(this.params.event_source, ['0', '3', '4'])) {&eol;&tab;&tab;this.request.clearHeader();&eol;&tab;&tab;this.request.addHeaders({&eol;&tab;&tab;&tab;"Content-Type": "application/json",&eol;&tab;&tab;&tab;"Authorization": "Token token=" + this.params.zammad_access_token&eol;&tab;&tab;});&eol;&eol;&tab;&tab;payload_data = {&eol;&tab;&tab;&tab;item: '',&eol;&tab;&tab;&tab;object: 'Ticket',&eol;&tab;&tab;&tab;o_id: response.id&eol;&tab;&tab;};&eol;&eol;&tab;&tab;try {&eol;&tab;&tab;&tab;for (var tag in this.params.event_tags) {&eol;&tab;&tab;&tab;&tab;payload_data.item = tag;&eol;&eol;&tab;&tab;&tab;&tab;if (this.params.event_tags[tag]) {&eol;&tab;&tab;&tab;&tab;&tab;payload_data.item += ": " + this.params.event_tags[tag];&eol;&tab;&tab;&tab;&tab;}&eol;&eol;&tab;&tab;&tab;&tab;this.request.plainRequest('POST', this.params.zammad_url + '/api/v1/tags/add', JSON.stringify(payload_data));&eol;&eol;&tab;&tab;&tab;&tab;if (this.request.getStatus() != 201) {&eol;&tab;&tab;&tab;&tab;&tab;Logger.log(Logger.INFO, 'Failed to set tag: ' + tag);&eol;&tab;&tab;&tab;&tab;}&eol;&tab;&tab;&tab;}&eol;&tab;&tab;}&eol;&tab;&tab;catch (error) {&eol;&tab;&tab;&tab;Logger.log(Logger.INFO, 'Failed to add ticket tags: ' + error);&eol;&tab;&tab;}&eol;&tab;}&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;Zammad.prototype.onUpdate = function (alert) {&eol;&tab;Logger.log(Logger.INFO, 'Source: ' + alert.source + '; Event: ' + alert.event);&eol;&eol;&tab;if (!CParamValidator.isDefined(this.params.event_tags['__zbx_zammad_ticket_id'])) {&eol;&tab;&tab;throw "Failed to update the existing ticket: no ticket ID was received."&eol;&tab;}&eol;&eol;&eol;&tab;this.request.addHeaders('Authorization: Token token=' + this.params.zammad_access_token);&eol;&eol;&tab;const payload_data = {&eol;&tab;&tab;ticket_id: this.params.event_tags['__zbx_zammad_ticket_id'],&eol;&tab;&tab;subject: this.params.alert_subject,&eol;&tab;&tab;body: this.params.alert_message,&eol;&tab;&tab;type: 'note',&eol;&tab;&tab;internal: false&eol;&tab;};&eol;&eol;&tab;const response = this.request.jsonRequest('POST', this.params.zammad_url + '/api/v1/ticket_articles', payload_data);&eol;&eol;&tab;if (this.request.getStatus() != 201 &pipe;&pipe; !CParamValidator.isDefined(response.id)) {&eol;&tab;&tab;var message = 'Cannot update Zammad ticket. Request failed with status code ' + this.request.getStatus();&eol;&eol;&tab;&tab;if (CParamValidator.isDefined(response.error) && Object.keys(response.error).length > 0) {&eol;&tab;&tab;&tab;message += ': ' + response.error;&eol;&tab;&tab;}&eol;&eol;&tab;&tab;throw message + ' Check debug log for more information.';&eol;&tab;}&eol;&eol;&tab;return this.result;&eol;}&eol;&eol;Zammad.prototype.onResolve = function (alert) {&eol;&tab;return this.onUpdate(alert);&eol;}&eol;&eol;Zammad.prototype.onDiscovery = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;Zammad.prototype.onAutoreg = function (alert) {&eol;&tab;return this.onProblem(alert);&eol;}&eol;&eol;try {&eol;&tab;var hook = new Zammad(value);&eol;&tab;hook.request = new CHttpRequest(Logger);&eol;&tab;return hook.run();&eol;}&eol;catch (error) {&eol;&tab;Logger.log(Logger.WARN, 'notification failed: ' + error);&eol;&tab;throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_zammad_ticketlink}  |Zammad: Ticket #{EVENT.TAGS.__zbx_zammad_ticket_id}         |This media type integrates your Zabbix installation with your Zammad installation using the Zabbix webhook feature.&eol;&eol;Zammad configuration:&eol;&eol;1. Check that API Token Access is enabled in "Settings" → "System" → "API".&eol;2. Open the profile settings of the customer user and create a new Personal User Token.&eol;3. Set the "ticket.agent" permission for the token and press Create.&eol;4. Copy and save the created token somewhere, as it will be shown only once for security reasons.&eol;&eol;Zabbix configuration:&eol;&eol;1. Before you can start using Zammad webhook, set up the global macro "{$ZABBIX.URL}":&eol;- In the Zabbix web interface, go to "Administration" → "Macros" section in the dropdown menu in the top left corner.&eol;- Set up the global macro "{$ZABBIX.URL}" which will contain the URL to the Zabbix frontend. The URL should be either an IP address, a fully qualified domain name, or localhost.&eol;- Specifying a protocol is mandatory, whereas the port is optional. Depending on the web server configuration you might also need to append "/zabbix" to the end of URL. Good examples:&eol;  - http://zabbix.com&eol;  - https://zabbix.lan/zabbix&eol;  - http://server.zabbix.lan/&eol;  - http://localhost&eol;  - http://127.0.0.1:8080&eol;- Bad examples:&eol;  - zabbix.com&eol;  - http://zabbix/&eol;&eol;2. Set the following webhook parameters:&eol;- zammad_access_token - the access token that you created during Zammad configuration&eol;- zammad_url - the frontend URL of your Zammad installation&eol;- zammad_customer - the Zammad user email&eol;- zammad_enable_tags - if you want to add the Zabbix event tags to the Zammad tickets that are created, you can set it to one of the following values: "1", "true", "yes", "on" (note, that if the tag support is enabled, each tag is sent via separate HTTP request and created tags will also remain in the Zammad when tickets are closed/deleted)&eol;- zammad_group - if needed, you can change the Zammad user group&eol;&eol;3. If you want to prioritize issues according to the severity values in Zabbix, you can define mapping parameters (create them as additional webhook parameters):&eol;- severity_<name> - the Zammad priority ID (<name> in the parameter name can be one of the following values: "not_classified", "information", "warning", "average", "high", "disaster")&eol;&eol;4. Create a Zabbix user and add media:&eol;- If you want to create a new user, go to the "Users" → "Users" section, click the "Create user" button in the top right corner. In the "User" tab, fill in all required fields (marked with red asterisks).&eol;- In the "Media" tab, add a new media and select "Zammad" type from the drop-down list. Add any value to the "Send to" field: it is required to be filled, but it is not used.&eol;- Make sure this user has access to all hosts for which you would like problem notifications to be sent to Zammad.&eol;&eol;5. Great! You can now start using this media type in actions and create tickets!&eol;&eol;You can find the latest version of this media and additional information in the official Zabbix repository:&eol;https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/zammad|0       |
ROW   |69         |4   |Zendesk                 |                                       |           |                  |         |          |        |      |25       |0            |0               |0               |0                  |1          |3          |10s             |1             |var Zendesk = {&eol;    params: {},&eol;&eol;    setParams: function (params) {&eol;        if (typeof params !== 'object') {&eol;            return;&eol;        }&eol;&eol;        Zendesk.params = params;&eol;        if (typeof Zendesk.params.url === 'string') {&eol;            if (!Zendesk.params.url.endsWith('/')) {&eol;                Zendesk.params.url += '/';&eol;            }&eol;            Zendesk.params.url += 'api/v2/';&eol;        }&eol;    },&eol;&eol;    addCustomFields: function (data, fields) {&eol;        if (typeof fields === 'object' && Object.keys(fields).length) {&eol;            var schema = Zendesk.getSchema(),&eol;                arr = [],&eol;                i,&eol;                n;&eol;&eol;            if (schema) {&eol;                Object.keys(fields)&eol;                    .forEach(function(field) {&eol;                        for (i = 0, n = schema.ticket_fields.length; i < n; i++) {&eol;                            if (schema.ticket_fields[i].id == field&eol;                                && ['text', 'integer', 'date'].indexOf(schema.ticket_fields[i].type) !== -1){&eol;&eol;                                switch (schema.ticket_fields[i].type) {&eol;                                    case 'integer':&eol;                                        fields[field] = parseInt(fields[field]);&eol;                                        break;&eol;                                    case 'date':&eol;                                        if (fields[field].match(/^\d{4}[.-]\d{2}[.-]\d{2}$/) !== null) {&eol;                                            fields[field] = fields[field].replace(/\./g, '-');&eol;                                        }&eol;                                        else {&eol;                                            fields[field] = '';&eol;                                        }&eol;                                        break;&eol;                                }&eol;&eol;                                arr.push({id: field, value: fields[field]});&eol;                                break;&eol;                            }&eol;                        }&eol;                    });&eol;&eol;                if (arr.length) {&eol;                    data.ticket['custom_fields'] = arr;&eol;                }&eol;            }&eol;            else {&eol;                Zabbix.log(4, '[Zendesk Webhook] Failed to retrieve field schema.');&eol;            }&eol;        }&eol;&eol;        return data;&eol;    },&eol;&eol;    request: function (method, query, data) {&eol;        ['url', 'token', 'type'].forEach(function (field) {&eol;            if (typeof Zendesk.params !== 'object' &pipe;&pipe; typeof Zendesk.params[field] === 'undefined') {&eol;                throw 'Required Zendesk param is not set: ' + field + '\n' + Zendesk.params[field];&eol;            }&eol;        });&eol;&eol;        var response,&eol;            url = Zendesk.params.url + query,&eol;            request = new HttpRequest();&eol;&eol;        if (typeof Zendesk.HTTPProxy === 'string' && Zendesk.HTTPProxy.trim() !== '') {&eol;            request.setProxy(Zendesk.HTTPProxy);&eol;        }&eol;&eol;        request.addHeader('Content-Type: application/json');&eol;        request.addHeader('Authorization: Basic ' + btoa(Zendesk.params.token));&eol;&eol;        if (typeof data !== 'undefined') {&eol;            data = JSON.stringify(data);&eol;        }&eol;&eol;        Zabbix.log(4, '[Zendesk Webhook] Sending request: ' + url + ((typeof data === 'string') ? (' ' + data) : ''));&eol;&eol;        switch (method) {&eol;            case 'get':&eol;                response = request.get(url, data);&eol;                break;&eol;&eol;            case 'post':&eol;                response = request.post(url, data);&eol;                break;&eol;&eol;            case 'put':&eol;                response = request.put(url, data);&eol;                break;&eol;&eol;            default:&eol;                throw 'Unsupported HTTP request method: ' + method;&eol;        }&eol;&eol;        Zabbix.log(4, '[Zendesk Webhook] Received response with status code ' + request.getStatus() + '. ' + response);&eol;&eol;        if (response !== null) {&eol;            try {&eol;                response = JSON.parse(response);&eol;            }&eol;            catch (error) {&eol;                Zabbix.log(4, '[Zendesk Webhook] Failed to parse response received from Zendesk.');&eol;            }&eol;        }&eol;&eol;        if (request.getStatus() < 200 &pipe;&pipe; request.getStatus() >= 300) {&eol;            var message = 'Request failed with status code ' + request.getStatus();&eol;&eol;            if (response !== null && typeof response.error !== 'undefined'&eol;                && Object.keys(response.error).length > 0) {&eol;                message += ': ' + JSON.stringify(response.error);&eol;            }&eol;            else if (response !== null && typeof response.description !== 'undefined'&eol;                && Object.keys(response.description).length > 0) {&eol;                message += ': ' + JSON.stringify(response.description);&eol;            }&eol;            else {&eol;                message += '. ' + response;&eol;            }&eol;            throw message + '. Check debug log for more information.';&eol;        }&eol;&eol;        return {&eol;            status: request.getStatus(),&eol;            response: response&eol;        };&eol;    },&eol;&eol;    getSchema: function() {&eol;        var result = Zendesk.request('get', 'ticket_fields.json');&eol;&eol;        return result.response;&eol;    },&eol;&eol;    createIssue: function(data, fields) {&eol;        var result = Zendesk.request('post', 'tickets.json', Zendesk.addCustomFields(data, fields));&eol;&eol;        if (typeof result.response !== 'object' &pipe;&pipe; typeof result.response.ticket.id === 'undefined'&eol;            &pipe;&pipe; result.status != 201) {&eol;            throw 'Cannot create Zendesk issue. Check debug log for more information.';&eol;        }&eol;&eol;        return result.response.ticket.id;&eol;    },&eol;&eol;    updateIssue: function(data, fields) {&eol;        Zendesk.request('put', 'tickets/' + Zendesk.params.issue_key + '.json', Zendesk.addCustomFields(data, fields));&eol;    }&eol;};&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        fields = {},&eol;        zendesk = {},&eol;        update = {},&eol;        data = {},&eol;        result = {tags: {}},&eol;        required_params = [&eol;            'alert_subject',&eol;            'alert_message',&eol;            'event_id',&eol;            'event_source',&eol;            'event_value',&eol;            'event_update_status'&eol;        ],&eol;        severities = [&eol;            {name: 'not_classified', color: '#97AAB3'},&eol;            {name: 'information', color: '#7499FF'},&eol;            {name: 'warning', color: '#FFC859'},&eol;            {name: 'average', color: '#FFA059'},&eol;            {name: 'high', color: '#E97659'},&eol;            {name: 'disaster', color: '#E45959'},&eol;            {name: 'resolved', color: '#009900'},&eol;            {name: 'default', color: '#000000'}&eol;        ],&eol;        priority;&eol;&eol;    Object.keys(params)&eol;        .forEach(function (key) {&eol;            if (key.startsWith('zendesk_')) {&eol;                zendesk[key.substring(8)] = params[key];&eol;            }&eol;            else if (key.startsWith('customfield_')) {&eol;                fields[key.substring(12)] = params[key];&eol;            }&eol;            else if (key.startsWith('event_update_')) {&eol;                update[key.substring(13)] = params[key];&eol;            }&eol;            else if (required_params.indexOf(key) !== -1 && params[key].trim() === '') {&eol;                throw 'Parameter ' + key + ' cannot be empty.';&eol;            }&eol;        });&eol;&eol;    // Possible values: question, incident, problems, task&eol;    if (['question', 'incident', 'problem', 'task'].indexOf(params.zendesk_type) === -1) {&eol;        throw 'Incorrect "zendesk_type" parameter given: ' + params.zendesk_type +&eol;            '\nMust be one of question, incident, problem, task.';&eol;    }&eol;&eol;    // Possible values: 0 - Trigger, 1 - Discovery, 2 - Autoregistration, 3 - Internal.&eol;    if ([0, 1, 2, 3].indexOf(parseInt(params.event_source)) === -1) {&eol;        throw 'Incorrect "event_source" parameter given: ' + params.event_source + '\nMust be 0-3.';&eol;    }&eol;&eol;    // Check {EVENT.VALUE} for trigger-based and internal events.&eol;    // Possible values: 1 for problem, 0 for recovering&eol;    if (params.event_value !== '0' && params.event_value !== '1'&eol;        && (params.event_source === '0' &pipe;&pipe; params.event_source === '3')) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&eol;    // Possible values: 0 - Webhook was called because of problem/recovery event, 1 - Update operation.&eol;    if (params.event_source === '0' && params.event_update_status !== '0' && params.event_update_status !== '1') {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_source !== '0' && params.event_value === '0') {&eol;        throw 'Recovery operations are supported only for trigger-based actions.';&eol;    }&eol;&eol;    // Zendesk_issue_key must be a positive integer if an update action is being performed.&eol;    if (params.event_source === '0' && ((params.event_value === '1' && params.event_update_status === '1')&eol;        &pipe;&pipe; (params.event_value === '0' && (params.event_update_status === '0' &pipe;&pipe; params.event_update_status === '1')))&eol;        && (isNaN(parseInt(params.zendesk_issue_key)) &pipe;&pipe; parseInt(params.zendesk_issue_key) < 1 )) {&eol;        throw 'Incorrect "zendesk_issue_key" parameter given: ' + params.zendesk_issue_key +&eol;            '\nMust be positive integer.';&eol;    }&eol;&eol;    if ([0, 1, 2, 3, 4, 5].indexOf(parseInt(params.event_nseverity)) === -1) {&eol;        params.event_nseverity = '7';&eol;    }&eol;&eol;    if (params.event_value === '0') {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    priority = params['severity_' + severities[params.event_nseverity].name] &pipe;&pipe; severities[7].name;&eol;&eol;    Zendesk.setParams(zendesk);&eol;    Zendesk.HTTPProxy = params.HTTPProxy;&eol;&eol;    // Create issue for non trigger-based events.&eol;    if (params.event_source !== '0' && params.event_value !== '0') {&eol;        data = {&eol;            ticket: {&eol;                external_id: params.event_id,&eol;                type: Zendesk.params.type,&eol;                status: 'new',&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.alert_message,&eol;                    public: 'false'&eol;                },&eol;                priority: priority,&eol;                tags: params.event_tags&eol;            }&eol;        };&eol;&eol;        Zendesk.createIssue(data, fields);&eol;    }&eol;    // Create issue for trigger-based events.&eol;    else if (params.event_value === '1' && update.status === '0') {&eol;        data = {&eol;            ticket: {&eol;                external_id: params.event_id,&eol;                type: Zendesk.params.type,&eol;                status: 'new',&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.zbxurl + (params.zbxurl.endsWith('/') ? '' : '/') + 'tr_events.php?triggerid=' +&eol;                        params.trigger_id + '&eventid=' + params.event_id + '\n' + params.alert_message,&eol;                    public: 'false'&eol;                },&eol;                priority: priority,&eol;                tags: params.event_tags&eol;            }&eol;        };&eol;        var key = Zendesk.createIssue(data, fields);&eol;&eol;        result.tags.__zbx_zdk_issuekey = key;&eol;        result.tags.__zbx_zdk_issuelink = params.zendesk_url +&eol;            (params.zendesk_url.endsWith('/') ? '' : '/') + 'agent/tickets/' + key;&eol;    }&eol;    // Update created issue for trigger-based event.&eol;    else {&eol;        data = {&eol;            ticket: {&eol;                type: Zendesk.params.type,&eol;                subject: params.alert_subject,&eol;                comment: {&eol;                    body: params.alert_message,&eol;                    public: 'false'&eol;                }&eol;            }&eol;        };&eol;&eol;        Zendesk.updateIssue(data, fields);&eol;    }&eol;&eol;    return JSON.stringify(result);&eol;}&eol;catch (error) {&eol;    Zabbix.log(3, '[Zendesk Webhook] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__zbx_zdk_issuelink}      |Zendesk: {EVENT.TAGS.__zbx_zdk_issuekey}                    ||0       |

TABLE |media_type_param
FIELDS|mediatype_paramid|mediatypeid|name                                     |value                                                                |sortorder|
ROW   |1                |38         |endpoint                                 |<PLACE HTTP API URL>                                                 |0        |
ROW   |2                |38         |flash                                    |false                                                                |0        |
ROW   |3                |38         |password                                 |<PLACE PASSWORD>                                                     |0        |
ROW   |4                |38         |ring                                     |false                                                                |0        |
ROW   |5                |38         |send_to                                  |{ALERT.SENDTO}                                                       |0        |
ROW   |6                |38         |telauto                                  |true                                                                 |0        |
ROW   |7                |38         |text                                     |{ALERT.MESSAGE}                                                      |0        |
ROW   |8                |38         |username                                 |<PLACE USERNAME>                                                     |0        |
ROW   |9                |39         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |10               |39         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |11               |39         |discord_endpoint                         |{ALERT.SENDTO}                                                       |0        |
ROW   |12               |39         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |13               |39         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |14               |39         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |15               |39         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |16               |39         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |17               |39         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |18               |39         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |19               |39         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |20               |39         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |21               |39         |user_agent                               |ZabbixServer (zabbix.com, 7.0)                                       |0        |
ROW   |22               |39         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |23               |40         |acknowledged                             |{EVENT.ACK.STATUS}                                                   |0        |
ROW   |24               |40         |endpoint                                 |/endpoint                                                            |0        |
ROW   |25               |40         |event_date                               |{EVENT.DATE}                                                         |0        |
ROW   |26               |40         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |27               |40         |event_name                               |{EVENT.NAME}                                                         |0        |
ROW   |28               |40         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |29               |40         |event_object                             |{EVENT.OBJECT}                                                       |0        |
ROW   |30               |40         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |31               |40         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |32               |40         |event_tags                               |{EVENT.TAGSJSON}                                                     |0        |
ROW   |33               |40         |event_time                               |{EVENT.TIME}                                                         |0        |
ROW   |34               |40         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |35               |40         |host_groups                              |{TRIGGER.HOSTGROUP.NAME}                                             |0        |
ROW   |36               |40         |host_host                                |{HOST.HOST}                                                          |0        |
ROW   |37               |40         |host_id                                  |{HOST.ID}                                                            |0        |
ROW   |38               |40         |host_ip                                  |{HOST.IP}                                                            |0        |
ROW   |39               |40         |host_port                                |{HOST.PORT}                                                          |0        |
ROW   |40               |40         |HTTPProxy                                |                                                                     |0        |
ROW   |41               |40         |monitoring_source                        |Zabbix sever                                                         |0        |
ROW   |42               |40         |operation_data                           |{EVENT.OPDATA}                                                       |0        |
ROW   |43               |40         |send_to                                  |{ALERT.SENDTO}                                                       |0        |
ROW   |44               |40         |subject                                  |{ALERT.SUBJECT}                                                      |0        |
ROW   |45               |40         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |46               |40         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |47               |40         |trigger_name                             |{TRIGGER.NAME}                                                       |0        |
ROW   |48               |41         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |49               |41         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |50               |41         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |51               |41         |express_message                          |{ALERT.MESSAGE}                                                      |0        |
ROW   |52               |41         |express_send_to                          |{ALERT.SENDTO}                                                       |0        |
ROW   |53               |41         |express_tags                             |{EVENT.TAGSJSON}                                                     |0        |
ROW   |54               |41         |express_token                            |<PLACE BOT TOKEN>                                                    |0        |
ROW   |55               |41         |express_url                              |<PLACE INSTANCE URL>                                                 |0        |
ROW   |56               |42         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |57               |42         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |58               |42         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |59               |42         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |60               |42         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |61               |42         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |62               |42         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |63               |42         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |64               |42         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |65               |42         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |66               |42         |github_api_version                       |2022-11-28                                                           |0        |
ROW   |67               |42         |github_issue_number                      |{EVENT.TAGS.__zbx_github_issue_number}                               |0        |
ROW   |68               |42         |github_repo                              |{ALERT.SENDTO}                                                       |0        |
ROW   |69               |42         |github_token                             |<PLACE GITHUB TOKEN>                                                 |0        |
ROW   |70               |42         |github_url                               |https://api.github.com                                               |0        |
ROW   |71               |42         |github_user_agent                        |Zabbix/7.0                                                           |0        |
ROW   |72               |42         |github_zabbix_event_priority_label_prefix|Zabbix Event Priority:                                               |0        |
ROW   |73               |42         |github_zabbix_event_source_label_prefix  |Zabbix Event Source:                                                 |0        |
ROW   |74               |42         |github_zabbix_event_status_label_prefix  |Zabbix Event Status:                                                 |0        |
ROW   |75               |42         |github_zabbix_generic_label              |Zabbix GitHub Webhook                                                |0        |
ROW   |76               |42         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |77               |42         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |78               |43         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |79               |43         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |80               |43         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |81               |43         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |82               |43         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |83               |43         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |84               |43         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |85               |43         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |86               |43         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |87               |43         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |88               |43         |glpi_problem_id                          |{EVENT.TAGS.__zbx_glpi_problem_id}                                   |0        |
ROW   |89               |43         |glpi_token                               |<PLACE GLPI TOKEN>                                                   |0        |
ROW   |90               |43         |glpi_url                                 |<PLACE GLPI URL>                                                     |0        |
ROW   |91               |43         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |92               |43         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |93               |44         |.ILERT.ALERT.SOURCE.KEY                  |{ALERT.SENDTO}                                                       |0        |
ROW   |94               |44         |.ILERT.INCIDENT.SUMMARY                  |                                                                     |0        |
ROW   |95               |44         |ALERT.MESSAGE                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |96               |44         |ALERT.SUBJECT                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |97               |44         |EVENT.ACK.STATUS                         |{EVENT.ACK.STATUS}                                                   |0        |
ROW   |98               |44         |EVENT.DATE                               |{EVENT.DATE}                                                         |0        |
ROW   |99               |44         |EVENT.ID                                 |{EVENT.ID}                                                           |0        |
ROW   |100              |44         |EVENT.NAME                               |{EVENT.NAME}                                                         |0        |
ROW   |101              |44         |EVENT.NSEVERITY                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |102              |44         |EVENT.OPDATA                             |{EVENT.OPDATA}                                                       |0        |
ROW   |103              |44         |EVENT.RECOVERY.DATE                      |{EVENT.RECOVERY.DATE}                                                |0        |
ROW   |104              |44         |EVENT.RECOVERY.TIME                      |{EVENT.RECOVERY.TIME}                                                |0        |
ROW   |105              |44         |EVENT.RECOVERY.VALUE                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |106              |44         |EVENT.SEVERITY                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |107              |44         |EVENT.TAGS                               |{EVENT.TAGS}                                                         |0        |
ROW   |108              |44         |EVENT.TIME                               |{EVENT.TIME}                                                         |0        |
ROW   |109              |44         |EVENT.UPDATE.ACTION                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |110              |44         |EVENT.UPDATE.DATE                        |{EVENT.UPDATE.DATE}                                                  |0        |
ROW   |111              |44         |EVENT.UPDATE.MESSAGE                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |112              |44         |EVENT.UPDATE.STATUS                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |113              |44         |EVENT.UPDATE.TIME                        |{EVENT.UPDATE.TIME}                                                  |0        |
ROW   |114              |44         |EVENT.VALUE                              |{EVENT.VALUE}                                                        |0        |
ROW   |115              |44         |HOST.HOST                                |{HOST.HOST}                                                          |0        |
ROW   |116              |44         |HOST.IP                                  |{HOST.IP}                                                            |0        |
ROW   |117              |44         |HOST.NAME                                |{HOST.NAME}                                                          |0        |
ROW   |118              |44         |ITEM.ID1                                 |{ITEM.ID1}                                                           |0        |
ROW   |119              |44         |ITEM.ID2                                 |{ITEM.ID2}                                                           |0        |
ROW   |120              |44         |ITEM.ID3                                 |{ITEM.ID3}                                                           |0        |
ROW   |121              |44         |ITEM.ID4                                 |{ITEM.ID4}                                                           |0        |
ROW   |122              |44         |ITEM.ID5                                 |{ITEM.ID5}                                                           |0        |
ROW   |123              |44         |ITEM.NAME1                               |{ITEM.NAME1}                                                         |0        |
ROW   |124              |44         |ITEM.NAME2                               |{ITEM.NAME2}                                                         |0        |
ROW   |125              |44         |ITEM.NAME3                               |{ITEM.NAME3}                                                         |0        |
ROW   |126              |44         |ITEM.NAME4                               |{ITEM.NAME4}                                                         |0        |
ROW   |127              |44         |ITEM.NAME5                               |{ITEM.NAME5}                                                         |0        |
ROW   |128              |44         |TRIGGER.DESCRIPTION                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |129              |44         |TRIGGER.ID                               |{TRIGGER.ID}                                                         |0        |
ROW   |130              |44         |TRIGGER.NAME                             |{TRIGGER.NAME}                                                       |0        |
ROW   |131              |44         |TRIGGER.SEVERITY                         |{TRIGGER.SEVERITY}                                                   |0        |
ROW   |132              |44         |TRIGGER.STATUS                           |{TRIGGER.STATUS}                                                     |0        |
ROW   |133              |44         |TRIGGER.URL                              |{TRIGGER.URL}                                                        |0        |
ROW   |134              |44         |TRIGGER.VALUE                            |{TRIGGER.VALUE}                                                      |0        |
ROW   |135              |44         |USER.FULLNAME                            |{USER.FULLNAME}                                                      |0        |
ROW   |136              |44         |ZABBIX.URL                               |{$ZABBIX.URL}                                                        |0        |
ROW   |137              |45         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |138              |45         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |139              |45         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |140              |45         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |141              |45         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |142              |45         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |143              |45         |itop_api_version                         |1.3                                                                  |0        |
ROW   |144              |45         |itop_class                               |UserRequest                                                          |0        |
ROW   |145              |45         |itop_comment                             |Created by Zabbix action {ACTION.NAME}                               |0        |
ROW   |146              |45         |itop_id                                  |{EVENT.TAGS.__zbx_itop_id}                                           |0        |
ROW   |147              |45         |itop_log                                 |private_log                                                          |0        |
ROW   |148              |45         |itop_organization_id                     |<PLACE ORGANIZATION ID>                                              |0        |
ROW   |149              |45         |itop_password                            |<PLACE PASSWORD OR TOKEN>                                            |0        |
ROW   |150              |45         |itop_url                                 |<PLACE YOUR ITOP URL>                                                |0        |
ROW   |151              |45         |itop_user                                |<PLACE LOGIN>                                                        |0        |
ROW   |152              |46         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |153              |46         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |154              |46         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |155              |46         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |156              |46         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |157              |46         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |158              |46         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |159              |46         |event_tags_json                          |{EVENT.TAGSJSON}                                                     |0        |
ROW   |160              |46         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |161              |46         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |162              |46         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |163              |46         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |164              |46         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |165              |46         |event_update_user                        |{USER.FULLNAME}                                                      |0        |
ROW   |166              |46         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |167              |46         |jira_issue_type                          |<PLACE ISSUETYPE NAME>                                               |0        |
ROW   |168              |46         |jira_password                            |<PLACE PASSWORD OR TOKEN>                                            |0        |
ROW   |169              |46         |jira_priority_autoregistration           |Low                                                                  |0        |
ROW   |170              |46         |jira_priority_discovery                  |Low                                                                  |0        |
ROW   |171              |46         |jira_priority_internal                   |Low                                                                  |0        |
ROW   |172              |46         |jira_project_key                         |<PLACE PROJECT KEY>                                                  |0        |
ROW   |173              |46         |jira_url                                 |<PLACE YOUR JIRA URL>                                                |0        |
ROW   |174              |46         |jira_user                                |<PLACE LOGIN>                                                        |0        |
ROW   |175              |46         |severity_average                         |Medium                                                               |0        |
ROW   |176              |46         |severity_disaster                        |Highest                                                              |0        |
ROW   |177              |46         |severity_high                            |High                                                                 |0        |
ROW   |178              |46         |severity_information                     |Lowest                                                               |0        |
ROW   |179              |46         |severity_not_classified                  |Lowest                                                               |0        |
ROW   |180              |46         |severity_warning                         |Low                                                                  |0        |
ROW   |181              |46         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |182              |46         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |183              |46         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |184              |47         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |185              |47         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |186              |47         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |187              |47         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |188              |47         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |189              |47         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |190              |47         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |191              |47         |event_tags_json                          |{EVENT.TAGSJSON}                                                     |0        |
ROW   |192              |47         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |193              |47         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |194              |47         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |195              |47         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |196              |47         |issue_comments_public                    |false                                                                |0        |
ROW   |197              |47         |jira_password                            |<PLACE PASSWORD OR TOKEN>                                            |0        |
ROW   |198              |47         |jira_priority_autoregistration           |Low                                                                  |0        |
ROW   |199              |47         |jira_priority_discovery                  |Low                                                                  |0        |
ROW   |200              |47         |jira_priority_internal                   |Low                                                                  |0        |
ROW   |201              |47         |jira_request_type_id                     |<PLACE REQUEST TYPE ID>                                              |0        |
ROW   |202              |47         |jira_servicedesk_id                      |<PLACE SERVICEDESK ID>                                               |0        |
ROW   |203              |47         |jira_url                                 |<PLACE YOUR JIRA URL>                                                |0        |
ROW   |204              |47         |jira_user                                |<PLACE LOGIN>                                                        |0        |
ROW   |205              |47         |severity_average                         |Medium                                                               |0        |
ROW   |206              |47         |severity_disaster                        |Highest                                                              |0        |
ROW   |207              |47         |severity_high                            |High                                                                 |0        |
ROW   |208              |47         |severity_information                     |Lowest                                                               |0        |
ROW   |209              |47         |severity_not_classified                  |Lowest                                                               |0        |
ROW   |210              |47         |severity_warning                         |Low                                                                  |0        |
ROW   |211              |47         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |212              |47         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |213              |48         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |214              |48         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |215              |48         |bot_token                                |<PLACE BOT TOKEN>                                                    |0        |
ROW   |216              |48         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |217              |48         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |218              |48         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |219              |48         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |220              |48         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |221              |48         |send_to                                  |{ALERT.SENDTO}                                                       |0        |
ROW   |222              |48         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |223              |48         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |224              |48         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |225              |49         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |226              |49         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |227              |49         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |228              |49         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |229              |49         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |230              |49         |field_ref:requester                      |<PLACE API USER NAME>                                                |0        |
ROW   |231              |49         |field_string:description                 |{ALERT.MESSAGE}                                                      |0        |
ROW   |232              |49         |field_string:subject                     |{ALERT.SUBJECT}                                                      |0        |
ROW   |233              |49         |priority_average                         |Normal                                                               |0        |
ROW   |234              |49         |priority_default                         |Normal                                                               |0        |
ROW   |235              |49         |priority_disaster                        |High                                                                 |0        |
ROW   |236              |49         |priority_high                            |High                                                                 |0        |
ROW   |237              |49         |priority_information                     |Low                                                                  |0        |
ROW   |238              |49         |priority_not_classified                  |Low                                                                  |0        |
ROW   |239              |49         |priority_warning                         |Medium                                                               |0        |
ROW   |240              |49         |sd_on_demand_client_id                   |<PLACE ON DEMAND CLIENT ID>                                          |0        |
ROW   |241              |49         |sd_on_demand_client_secret               |<PLACE ON DEMAND CLIENT SECRET>                                      |0        |
ROW   |242              |49         |sd_on_demand_refresh_token               |<PLACE ON DEMAND REFRESH TOKEN>                                      |0        |
ROW   |243              |49         |sd_on_demand_url_auth                    |<PLACE AUTHENTICATION URL FOR ON DEMAND>                             |0        |
ROW   |244              |49         |sd_on_premise                            |true                                                                 |0        |
ROW   |245              |49         |sd_on_premise_auth_token                 |<PLACE ON PREMISE TECHNICIAN_KEY>                                    |0        |
ROW   |246              |49         |sd_request_id                            |{EVENT.TAGS.__zbx_sd_request_id}                                     |0        |
ROW   |247              |49         |sd_url                                   |<PLACE INSTANCE URL>                                                 |0        |
ROW   |248              |49         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |249              |50         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |250              |50         |alert_sendto                             |{ALERT.SENDTO}                                                       |0        |
ROW   |251              |50         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |252              |50         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |253              |50         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |254              |50         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |255              |50         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |256              |50         |event_tagsjson                           |{EVENT.TAGSJSON}                                                     |0        |
ROW   |257              |50         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |258              |50         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |259              |50         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |260              |50         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |261              |50         |mantisbt_category                        |[All Projects] General                                               |0        |
ROW   |262              |50         |mantisbt_issue_number                    |{EVENT.TAGS.__zbx_mantisbt_issue_number}                             |0        |
ROW   |263              |50         |mantisbt_token                           |<PLACE MANTISBT TOKEN>                                               |0        |
ROW   |264              |50         |mantisbt_url                             |<PLACE MANTISBT URL>                                                 |0        |
ROW   |265              |50         |mantisbt_use_zabbix_tags                 |true                                                                 |0        |
ROW   |266              |50         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |267              |50         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |268              |51         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |269              |51         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |270              |51         |bot_token                                |<YOUR BOT TOKEN>                                                     |0        |
ROW   |271              |51         |discovery_host_dns                       |{DISCOVERY.DEVICE.DNS}                                               |0        |
ROW   |272              |51         |discovery_host_ip                        |{DISCOVERY.DEVICE.IPADDRESS}                                         |0        |
ROW   |273              |51         |event_date                               |{EVENT.DATE}                                                         |0        |
ROW   |274              |51         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |275              |51         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |276              |51         |event_opdata                             |{EVENT.OPDATA}                                                       |0        |
ROW   |277              |51         |event_recovery_date                      |{EVENT.RECOVERY.DATE}                                                |0        |
ROW   |278              |51         |event_recovery_time                      |{EVENT.RECOVERY.TIME}                                                |0        |
ROW   |279              |51         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |280              |51         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |281              |51         |event_tags                               |{EVENT.TAGS}                                                         |0        |
ROW   |282              |51         |event_time                               |{EVENT.TIME}                                                         |0        |
ROW   |283              |51         |event_update_date                        |{EVENT.UPDATE.DATE}                                                  |0        |
ROW   |284              |51         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |285              |51         |event_update_time                        |{EVENT.UPDATE.TIME}                                                  |0        |
ROW   |286              |51         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |287              |51         |host_ip                                  |{HOST.IP}                                                            |0        |
ROW   |288              |51         |host_name                                |{HOST.HOST}                                                          |0        |
ROW   |289              |51         |mattermost_url                           |<YOUR MATTERMOST URL>                                                |0        |
ROW   |290              |51         |send_mode                                |alarm                                                                |0        |
ROW   |291              |51         |send_to                                  |{ALERT.SENDTO}                                                       |0        |
ROW   |292              |51         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |293              |51         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |294              |51         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |295              |52         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |296              |52         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |297              |52         |event_date                               |{EVENT.DATE}                                                         |0        |
ROW   |298              |52         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |299              |52         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |300              |52         |event_opdata                             |{EVENT.OPDATA}                                                       |0        |
ROW   |301              |52         |event_recovery_date                      |{EVENT.RECOVERY.DATE}                                                |0        |
ROW   |302              |52         |event_recovery_time                      |{EVENT.RECOVERY.TIME}                                                |0        |
ROW   |303              |52         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |304              |52         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |305              |52         |event_status                             |{EVENT.STATUS}                                                       |0        |
ROW   |306              |52         |event_tags                               |{EVENT.TAGS}                                                         |0        |
ROW   |307              |52         |event_time                               |{EVENT.TIME}                                                         |0        |
ROW   |308              |52         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |309              |52         |event_update_date                        |{EVENT.UPDATE.DATE}                                                  |0        |
ROW   |310              |52         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |311              |52         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |312              |52         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |313              |52         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |314              |52         |event_update_time                        |{EVENT.UPDATE.TIME}                                                  |0        |
ROW   |315              |52         |event_update_user                        |{USER.FULLNAME}                                                      |0        |
ROW   |316              |52         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |317              |52         |host_ip                                  |{HOST.IP}                                                            |0        |
ROW   |318              |52         |host_name                                |{HOST.NAME}                                                          |0        |
ROW   |319              |52         |teams_endpoint                           |<PLACE WEBHOOK URL HERE>                                             |0        |
ROW   |320              |52         |trigger_description                      |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |321              |52         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |322              |52         |use_default_message                      |false                                                                |0        |
ROW   |323              |52         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |324              |53         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |325              |53         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |326              |53         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |327              |53         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |328              |53         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |329              |53         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |330              |53         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |331              |53         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |332              |53         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |333              |53         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |334              |53         |teams_endpoint                           |<PLACE WEBHOOK URL HERE>                                             |0        |
ROW   |335              |53         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |336              |53         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |337              |54         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |338              |54         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |339              |54         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |340              |54         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |341              |54         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |342              |54         |event_tags_json                          |{EVENT.TAGSJSON}                                                     |0        |
ROW   |343              |54         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |344              |54         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |345              |54         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |346              |54         |opsgenie_api                             |<put your opsgenie api>                                              |0        |
ROW   |347              |54         |opsgenie_tags                            |                                                                     |0        |
ROW   |348              |54         |opsgenie_teams                           |                                                                     |0        |
ROW   |349              |54         |opsgenie_token                           |<put your token>                                                     |0        |
ROW   |350              |54         |opsgenie_web                             |<put your opsgenie web>                                              |0        |
ROW   |351              |54         |severity_average                         |P3                                                                   |0        |
ROW   |352              |54         |severity_default                         |P5                                                                   |0        |
ROW   |353              |54         |severity_disaster                        |P1                                                                   |0        |
ROW   |354              |54         |severity_high                            |P2                                                                   |0        |
ROW   |355              |54         |severity_information                     |P5                                                                   |0        |
ROW   |356              |54         |severity_not_classified                  |P5                                                                   |0        |
ROW   |357              |54         |severity_warning                         |P4                                                                   |0        |
ROW   |358              |54         |status_counter                           |25                                                                   |0        |
ROW   |359              |54         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |360              |54         |zbxurl                                   |{$ZABBIX.URL}                                                        |0        |
ROW   |361              |54         |zbxuser                                  |{USER.FULLNAME}                                                      |0        |
ROW   |362              |55         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |363              |55         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |364              |55         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |365              |55         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |366              |55         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |367              |55         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |368              |55         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |369              |55         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |370              |55         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |371              |55         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |372              |55         |otrs_auth_password                       |<PUT YOUR USER PASSWORD>                                             |0        |
ROW   |373              |55         |otrs_auth_user                           |<PUT YOUR USER NAME>                                                 |0        |
ROW   |374              |55         |otrs_closed_state_id                     |0                                                                    |0        |
ROW   |375              |55         |otrs_customer                            |<PUT YOUR CUSTOMER EMAIL>                                            |0        |
ROW   |376              |55         |otrs_default_priority_id                 |3                                                                    |0        |
ROW   |377              |55         |otrs_queue                               |<PUT YOUR QUEUE NAME>                                                |0        |
ROW   |378              |55         |otrs_ticket_id                           |{EVENT.TAGS.__zbx_otrs_ticket_id}                                    |0        |
ROW   |379              |55         |otrs_ticket_state                        |new                                                                  |0        |
ROW   |380              |55         |otrs_time_unit                           |0                                                                    |0        |
ROW   |381              |55         |otrs_url                                 |<PUT YOUR ((OTRS)) CE URL>                                           |0        |
ROW   |382              |55         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |383              |55         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |384              |56         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |385              |56         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |386              |56         |api_token                                |{ALERT.SENDTO}                                                       |0        |
ROW   |387              |56         |event_ack                                |{EVENT.ACK.STATUS}                                                   |0        |
ROW   |388              |56         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |389              |56         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |390              |56         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |391              |56         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |392              |56         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |393              |56         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |394              |56         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |395              |56         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |396              |56         |host_ip                                  |{HOST.IP}                                                            |0        |
ROW   |397              |56         |host_name                                |{HOST.NAME}                                                          |0        |
ROW   |398              |56         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |399              |56         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |400              |57         |endpoint                                 |https://api.pushover.net/1/messages.json                             |0        |
ROW   |401              |57         |eventid                                  |{EVENT.ID}                                                           |0        |
ROW   |402              |57         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |403              |57         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |404              |57         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |405              |57         |expire                                   |1200                                                                 |0        |
ROW   |406              |57         |message                                  |{ALERT.MESSAGE}                                                      |0        |
ROW   |407              |57         |priority_average                         |0                                                                    |0        |
ROW   |408              |57         |priority_default                         |0                                                                    |0        |
ROW   |409              |57         |priority_disaster                        |0                                                                    |0        |
ROW   |410              |57         |priority_high                            |0                                                                    |0        |
ROW   |411              |57         |priority_information                     |0                                                                    |0        |
ROW   |412              |57         |priority_not_classified                  |0                                                                    |0        |
ROW   |413              |57         |priority_warning                         |0                                                                    |0        |
ROW   |414              |57         |retry                                    |60                                                                   |0        |
ROW   |415              |57         |title                                    |{ALERT.SUBJECT}                                                      |0        |
ROW   |416              |57         |token                                    |<PUSHOVER TOKEN HERE>                                                |0        |
ROW   |417              |57         |triggerid                                |{TRIGGER.ID}                                                         |0        |
ROW   |418              |57         |url                                      |{$ZABBIX.URL}                                                        |0        |
ROW   |419              |57         |url_title                                |Zabbix                                                               |0        |
ROW   |420              |57         |user                                     |{ALERT.SENDTO}                                                       |0        |
ROW   |421              |58         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |422              |58         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |423              |58         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |424              |58         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |425              |58         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |426              |58         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |427              |58         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |428              |58         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |429              |58         |redmine_access_key                       |<PUT YOUR ACCESS KEY>                                                |0        |
ROW   |430              |58         |redmine_issue_key                        |{EVENT.TAGS.__zbx_redmine_issue_id}                                  |0        |
ROW   |431              |58         |redmine_project                          |<PUT YOUR PROJECT ID OR NAME>                                        |0        |
ROW   |432              |58         |redmine_tracker_id                       |<PUT YOUR TRACKER ID>                                                |0        |
ROW   |433              |58         |redmine_url                              |<PUT YOUR REDMINE URL>                                               |0        |
ROW   |434              |58         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |435              |58         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |436              |59         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |437              |59         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |438              |59         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |439              |59         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |440              |59         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |441              |59         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |442              |59         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |443              |59         |event_update_user                        |{USER.FULLNAME}                                                      |0        |
ROW   |444              |59         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |445              |59         |field_1_full:Host                        |{HOST.NAME} [{HOST.IP}]                                              |0        |
ROW   |446              |59         |field_2_short:Severity                   |{EVENT.SEVERITY}                                                     |0        |
ROW   |447              |59         |field_3_short:Event time                 |{EVENT.DATE} {EVENT.TIME}                                            |0        |
ROW   |448              |59         |field_3_short_r:Recovery time            |{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}                          |0        |
ROW   |449              |59         |field_4_short_r:Event duration           |{EVENT.DURATION}                                                     |0        |
ROW   |450              |59         |field_5_short:Operational data           |{EVENT.OPDATA}                                                       |0        |
ROW   |451              |59         |field_999_full_p:Trigger description     |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |452              |59         |rc_api_url                               |api/v1/                                                              |0        |
ROW   |453              |59         |rc_msg_id                                |{EVENT.TAGS.__zbx_rc_id}                                             |0        |
ROW   |454              |59         |rc_room_id                               |{EVENT.TAGS.__zbx_rc_rid}                                            |0        |
ROW   |455              |59         |rc_send_to                               |{ALERT.SENDTO}                                                       |0        |
ROW   |456              |59         |rc_title_link                            |{$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}|0        |
ROW   |457              |59         |rc_url                                   |<PLACE YOUR INSTANCE URL HERE>                                       |0        |
ROW   |458              |59         |rc_user_id                               |<PLACE USER ID HERE>                                                 |0        |
ROW   |459              |59         |rc_user_token                            |<PLACE TOKEN HERE>                                                   |0        |
ROW   |460              |59         |use_default_message                      |false                                                                |0        |
ROW   |461              |60         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |462              |60         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |463              |60         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |464              |60         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |465              |60         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |466              |60         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |467              |60         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |468              |60         |servicenow_password                      |<PLACE PASSWORD HERE>                                                |0        |
ROW   |469              |60         |servicenow_sys_id                        |{EVENT.TAGS.__zbx_servicenow_sys_id}                                 |0        |
ROW   |470              |60         |servicenow_url                           |{ALERT.SENDTO}                                                       |0        |
ROW   |471              |60         |servicenow_user                          |<PLACE USERNAME HERE>                                                |0        |
ROW   |472              |60         |urgency_for_average                      |2                                                                    |0        |
ROW   |473              |60         |urgency_for_disaster                     |1                                                                    |0        |
ROW   |474              |60         |urgency_for_high                         |2                                                                    |0        |
ROW   |475              |60         |urgency_for_information                  |3                                                                    |0        |
ROW   |476              |60         |urgency_for_not_classified               |3                                                                    |0        |
ROW   |477              |60         |urgency_for_warning                      |3                                                                    |0        |
ROW   |478              |61         |Event_Ack_Status                         |{EVENT.ACK.STATUS}                                                   |0        |
ROW   |479              |61         |Event_Date_Time                          |{EVENT.DATE} {EVENT.TIME}                                            |0        |
ROW   |480              |61         |Event_ID                                 |{EVENT.ID}                                                           |0        |
ROW   |481              |61         |Event_Update_Action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |482              |61         |Event_Update_Status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |483              |61         |Hostname                                 |{HOST.NAME}                                                          |0        |
ROW   |484              |61         |Host_IP                                  |{HOST.IP}                                                            |0        |
ROW   |485              |61         |Message                                  |{ALERT.MESSAGE}                                                      |0        |
ROW   |486              |61         |Severity                                 |{EVENT.SEVERITY}                                                     |0        |
ROW   |487              |61         |Subject                                  |{ALERT.SUBJECT}                                                      |0        |
ROW   |488              |61         |teamsecret                               |{ALERT.SENDTO}                                                       |0        |
ROW   |489              |61         |Trigger_ID                               |{TRIGGER.ID}                                                         |0        |
ROW   |490              |61         |Trigger_Status                           |{TRIGGER.STATUS}                                                     |0        |
ROW   |491              |61         |User                                     |{USER.FULLNAME}                                                      |0        |
ROW   |492              |61         |Zabbix_URL                               |{$ZABBIX.URL}                                                        |0        |
ROW   |493              |62         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |494              |62         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |495              |62         |bot_token                                |<PLACE YOUR TOKEN>                                                   |0        |
ROW   |496              |62         |channel                                  |{ALERT.SENDTO}                                                       |0        |
ROW   |497              |62         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |498              |62         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |499              |62         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |500              |62         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |501              |62         |event_tags                               |{EVENT.TAGSJSON}                                                     |0        |
ROW   |502              |62         |event_update_action                      |{EVENT.UPDATE.ACTION}                                                |0        |
ROW   |503              |62         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |504              |62         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |505              |62         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |506              |62         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |507              |62         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |508              |62         |slack_mode                               |alarm                                                                |0        |
ROW   |509              |62         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |510              |62         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |511              |63         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |512              |63         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |513              |63         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |514              |63         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |515              |63         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |516              |63         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |517              |63         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |518              |63         |priority_average                         |Medium                                                               |0        |
ROW   |519              |63         |priority_default                         |Low                                                                  |0        |
ROW   |520              |63         |priority_disaster                        |Critical                                                             |0        |
ROW   |521              |63         |priority_high                            |High                                                                 |0        |
ROW   |522              |63         |samanage_incident_id                     |{EVENT.TAGS.__zbx_solarwinds_inc_id}                                 |0        |
ROW   |523              |63         |samanage_token                           |<PUT YOUR TOKEN HERE>                                                |0        |
ROW   |524              |63         |samanage_url                             |<PUT YOUR INSTANCE URL HERE>                                         |0        |
ROW   |525              |64         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |526              |64         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |527              |64         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |528              |64         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |529              |64         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |530              |64         |event_update_message                     |{EVENT.UPDATE.MESSAGE}                                               |0        |
ROW   |531              |64         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |532              |64         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |533              |64         |sysaid_auth_password                     |<PUT YOUR USER PASSWORD>                                             |0        |
ROW   |534              |64         |sysaid_auth_user                         |<PUT YOUR USER NAME>                                                 |0        |
ROW   |535              |64         |sysaid_category_level_1                  |<PUT YOUR CATEGORY>                                                  |0        |
ROW   |536              |64         |sysaid_category_level_2                  |<PUT YOUR SUB-CATEGORY>                                              |0        |
ROW   |537              |64         |sysaid_category_level_3                  |<PUT YOUR THIRD LEVEL CATEGORY>                                      |0        |
ROW   |538              |64         |sysaid_default_priority_id               |1                                                                    |0        |
ROW   |539              |64         |sysaid_incident_id                       |{EVENT.TAGS.__zbx_sysaid_incident_id}                                |0        |
ROW   |540              |64         |sysaid_incident_state                    |1                                                                    |0        |
ROW   |541              |64         |sysaid_template_id                       |<PUT YOUR TEMPLATE ID>                                               |0        |
ROW   |542              |64         |sysaid_urgency_id                        |<PUT YOUR URGENCY ID>                                                |0        |
ROW   |543              |64         |sysaid_url                               |<PUT YOUR SYSAID URL>                                                |0        |
ROW   |544              |64         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |545              |64         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |546              |65         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |547              |65         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |548              |65         |api_chat_id                              |{ALERT.SENDTO}                                                       |0        |
ROW   |549              |65         |api_parse_mode                           |<PLACE PARSE MODE>                                                   |0        |
ROW   |550              |65         |api_token                                |<PLACE YOUR TOKEN>                                                   |0        |
ROW   |551              |65         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |552              |65         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |553              |65         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |554              |65         |event_tags                               |{EVENT.TAGSJSON}                                                     |0        |
ROW   |555              |65         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |556              |65         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |557              |65         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |558              |65         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |559              |66         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |560              |66         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |561              |66         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |562              |66         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |563              |66         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |564              |66         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |565              |66         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |566              |66         |severity_average                         |P3                                                                   |0        |
ROW   |567              |66         |severity_default                         |P5                                                                   |0        |
ROW   |568              |66         |severity_disaster                        |P1                                                                   |0        |
ROW   |569              |66         |severity_high                            |P2                                                                   |0        |
ROW   |570              |66         |severity_information                     |P5                                                                   |0        |
ROW   |571              |66         |severity_not_classified                  |P5                                                                   |0        |
ROW   |572              |66         |severity_warning                         |P4                                                                   |0        |
ROW   |573              |66         |topdesk_api                              |<put your TOPdesk API URL>                                           |0        |
ROW   |574              |66         |topdesk_issue_key                        |{EVENT.TAGS.__zbx_tpd_issuekey}                                      |0        |
ROW   |575              |66         |topdesk_password                         |<put your TOPdesk application password>                              |0        |
ROW   |576              |66         |topdesk_status                           |<put default status for new tickets>                                 |0        |
ROW   |577              |66         |topdesk_user                             |<put your TOPdesk username>                                          |0        |
ROW   |578              |66         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |579              |66         |zbxurl                                   |{$ZABBIX.URL}                                                        |0        |
ROW   |580              |67         |event_info                               |{$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}|0        |
ROW   |581              |67         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |582              |67         |event_recovery_value                     |{EVENT.RECOVERY.VALUE}                                               |0        |
ROW   |583              |67         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |584              |67         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |585              |67         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |586              |67         |field:entity_display_name                |{ALERT.SUBJECT}                                                      |0        |
ROW   |587              |67         |field:entity_id                          |{EVENT.ID}                                                           |0        |
ROW   |588              |67         |field:hostname                           |{HOST.NAME}                                                          |0        |
ROW   |589              |67         |field:monitoring_tool                    |Zabbix                                                               |0        |
ROW   |590              |67         |field:operational_data                   |{EVENT.OPDATA}                                                       |0        |
ROW   |591              |67         |field:severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |592              |67         |field:state_message                      |{ALERT.MESSAGE}                                                      |0        |
ROW   |593              |67         |field_p:trigger_description              |{TRIGGER.DESCRIPTION}                                                |0        |
ROW   |594              |67         |field_r:event_duration                   |{EVENT.DURATION}                                                     |0        |
ROW   |595              |67         |field_r:recovery time                    |{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}                          |0        |
ROW   |596              |67         |priority_average                         |WARNING                                                              |0        |
ROW   |597              |67         |priority_default                         |INFO                                                                 |0        |
ROW   |598              |67         |priority_disaster                        |CRITICAL                                                             |0        |
ROW   |599              |67         |priority_high                            |WARNING                                                              |0        |
ROW   |600              |67         |priority_information                     |INFO                                                                 |0        |
ROW   |601              |67         |priority_not_classified                  |INFO                                                                 |0        |
ROW   |602              |67         |priority_resolved                        |OK                                                                   |0        |
ROW   |603              |67         |priority_update                          |INFO                                                                 |0        |
ROW   |604              |67         |priority_warning                         |INFO                                                                 |0        |
ROW   |605              |67         |vops_endpoint                            |<PLACE ENDPOINT URL HERE>                                            |0        |
ROW   |606              |67         |vops_routing_key                         |{ALERT.SENDTO}                                                       |0        |
ROW   |607              |68         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |608              |68         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |609              |68         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |610              |68         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |611              |68         |event_severity                           |{EVENT.SEVERITY}                                                     |0        |
ROW   |612              |68         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |613              |68         |event_tags                               |{EVENT.TAGSJSON}                                                     |0        |
ROW   |614              |68         |event_update_nseverity                   |{EVENT.UPDATE.NSEVERITY}                                             |0        |
ROW   |615              |68         |event_update_severity                    |{EVENT.UPDATE.SEVERITY}                                              |0        |
ROW   |616              |68         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |617              |68         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |618              |68         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |619              |68         |zabbix_url                               |{$ZABBIX.URL}                                                        |0        |
ROW   |620              |68         |zammad_access_token                      |<PUT YOUR ACCESS TOKEN>                                              |0        |
ROW   |621              |68         |zammad_customer                          |<PUT YOUR CUSTOMER EMAIL>                                            |0        |
ROW   |622              |68         |zammad_enable_tags                       |false                                                                |0        |
ROW   |623              |68         |zammad_group                             |Users                                                                |0        |
ROW   |624              |68         |zammad_url                               |<PUT YOUR ZAMMAD URL>                                                |0        |
ROW   |625              |69         |alert_message                            |{ALERT.MESSAGE}                                                      |0        |
ROW   |626              |69         |alert_subject                            |{ALERT.SUBJECT}                                                      |0        |
ROW   |627              |69         |event_id                                 |{EVENT.ID}                                                           |0        |
ROW   |628              |69         |event_nseverity                          |{EVENT.NSEVERITY}                                                    |0        |
ROW   |629              |69         |event_source                             |{EVENT.SOURCE}                                                       |0        |
ROW   |630              |69         |event_tags                               |{EVENT.TAGS}                                                         |0        |
ROW   |631              |69         |event_update_status                      |{EVENT.UPDATE.STATUS}                                                |0        |
ROW   |632              |69         |event_value                              |{EVENT.VALUE}                                                        |0        |
ROW   |633              |69         |severity_average                         |normal                                                               |0        |
ROW   |634              |69         |severity_default                         |-                                                                    |0        |
ROW   |635              |69         |severity_disaster                        |urgent                                                               |0        |
ROW   |636              |69         |severity_high                            |high                                                                 |0        |
ROW   |637              |69         |severity_information                     |low                                                                  |0        |
ROW   |638              |69         |severity_not_classified                  |low                                                                  |0        |
ROW   |639              |69         |severity_warning                         |normal                                                               |0        |
ROW   |640              |69         |trigger_id                               |{TRIGGER.ID}                                                         |0        |
ROW   |641              |69         |zbxurl                                   |{$ZABBIX.URL}                                                        |0        |
ROW   |642              |69         |zendesk_issue_key                        |{EVENT.TAGS.__zbx_zdk_issuekey}                                      |0        |
ROW   |643              |69         |zendesk_token                            |<put your {enduser_email_address}/token:{api_token}>                 |0        |
ROW   |644              |69         |zendesk_type                             |incident                                                             |0        |
ROW   |645              |69         |zendesk_url                              |<put your Zendesk URL>                                               |0        |
ROW   |646              |55         |otrs_ticket_type                         |Unclassified                                                         |0        |

TABLE |media_type_message
FIELDS|mediatype_messageid|mediatypeid|eventsource|recovery|subject                                                                          |message|
ROW   |1                  |1          |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |2                  |1          |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |3                  |1          |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |4                  |1          |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |5                  |1          |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |6                  |3          |0          |0       |                                                                                 |{EVENT.SEVERITY}: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;{EVENT.DATE} {EVENT.TIME}|
ROW   |7                  |3          |0          |1       |                                                                                 |Resolved in {EVENT.DURATION}: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;{EVENT.DATE} {EVENT.TIME}|
ROW   |8                  |3          |0          |2       |                                                                                 |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem in {EVENT.AGE} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}|
ROW   |9                  |3          |1          |0       |                                                                                 |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}|
ROW   |10                 |3          |2          |0       |                                                                                 |Autoregistration: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |11                 |4          |0          |0       |Problem: {EVENT.NAME}                                                            |<b>Problem started</b> at {{EVENT.TIME}.htmlencode()} on {{EVENT.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Operational data:</b> {{EVENT.OPDATA}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                                              |
ROW   |12                 |4          |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<b>Problem has been resolved</b> at {{EVENT.RECOVERY.TIME}.htmlencode()} on {{EVENT.RECOVERY.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Problem duration:</b> {{EVENT.DURATION}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                |
ROW   |13                 |4          |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |<b>{{USER.FULLNAME}.htmlencode()} {{EVENT.UPDATE.ACTION}.htmlencode()} problem</b> at {{EVENT.UPDATE.DATE}.htmlencode()} {{EVENT.UPDATE.TIME}.htmlencode()}.<br>{{EVENT.UPDATE.MESSAGE}.htmlencode()}<br><br><b>Current problem status:</b> {{EVENT.STATUS}.htmlencode()}<br><b>Age:</b> {{EVENT.AGE}.htmlencode()}<br><b>Acknowledged:</b> {{EVENT.ACK.STATUS}.htmlencode()}.                                                                                                                                                                                                                                                          |
ROW   |14                 |4          |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<b>Discovery rule:</b> {{DISCOVERY.RULE.NAME}.htmlencode()}<br><br><b>Device IP:</b> {{DISCOVERY.DEVICE.IPADDRESS}.htmlencode()}<br><b>Device DNS:</b> {{DISCOVERY.DEVICE.DNS}.htmlencode()}<br><b>Device status:</b> {{DISCOVERY.DEVICE.STATUS}.htmlencode()}<br><b>Device uptime:</b> {{DISCOVERY.DEVICE.UPTIME}.htmlencode()}<br><br><b>Device service name:</b> {{DISCOVERY.SERVICE.NAME}.htmlencode()}<br><b>Device service port:</b> {{DISCOVERY.SERVICE.PORT}.htmlencode()}<br><b>Device service status:</b> {{DISCOVERY.SERVICE.STATUS}.htmlencode()}<br><b>Device service uptime:</b> {{DISCOVERY.SERVICE.UPTIME}.htmlencode()}|
ROW   |15                 |4          |2          |0       |Autoregistration: {HOST.HOST}                                                    |<b>Host name:</b> {{HOST.HOST}.htmlencode()}<br><b>Host IP:</b> {{HOST.IP}.htmlencode()}<br><b>Agent port:</b> {{HOST.PORT}.htmlencode()}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |160                |34         |0          |0       |Problem: {EVENT.NAME}                                                            |<b>Problem started</b> at {{EVENT.TIME}.htmlencode()} on {{EVENT.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Operational data:</b> {{EVENT.OPDATA}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                                              |
ROW   |161                |34         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<b>Problem has been resolved</b> at {{EVENT.RECOVERY.TIME}.htmlencode()} on {{EVENT.RECOVERY.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Problem duration:</b> {{EVENT.DURATION}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                |
ROW   |162                |34         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |<b>{{USER.FULLNAME}.htmlencode()} {{EVENT.UPDATE.ACTION}.htmlencode()} problem</b> at {{EVENT.UPDATE.DATE}.htmlencode()} {{EVENT.UPDATE.TIME}.htmlencode()}.<br>{{EVENT.UPDATE.MESSAGE}.htmlencode()}<br><br><b>Current problem status:</b> {{EVENT.STATUS}.htmlencode()}<br><b>Age:</b> {{EVENT.AGE}.htmlencode()}<br><b>Acknowledged:</b> {{EVENT.ACK.STATUS}.htmlencode()}.                                                                                                                                                                                                                                                          |
ROW   |163                |34         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<b>Discovery rule:</b> {{DISCOVERY.RULE.NAME}.htmlencode()}<br><br><b>Device IP:</b> {{DISCOVERY.DEVICE.IPADDRESS}.htmlencode()}<br><b>Device DNS:</b> {{DISCOVERY.DEVICE.DNS}.htmlencode()}<br><b>Device status:</b> {{DISCOVERY.DEVICE.STATUS}.htmlencode()}<br><b>Device uptime:</b> {{DISCOVERY.DEVICE.UPTIME}.htmlencode()}<br><br><b>Device service name:</b> {{DISCOVERY.SERVICE.NAME}.htmlencode()}<br><b>Device service port:</b> {{DISCOVERY.SERVICE.PORT}.htmlencode()}<br><b>Device service status:</b> {{DISCOVERY.SERVICE.STATUS}.htmlencode()}<br><b>Device service uptime:</b> {{DISCOVERY.SERVICE.UPTIME}.htmlencode()}|
ROW   |164                |34         |2          |0       |Autoregistration: {HOST.HOST}                                                    |<b>Host name:</b> {{HOST.HOST}.htmlencode()}<br><b>Host IP:</b> {{HOST.IP}.htmlencode()}<br><b>Agent port:</b> {{HOST.PORT}.htmlencode()}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |165                |35         |0          |0       |Problem: {EVENT.NAME}                                                            |<b>Problem started</b> at {{EVENT.TIME}.htmlencode()} on {{EVENT.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Operational data:</b> {{EVENT.OPDATA}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                                              |
ROW   |166                |35         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<b>Problem has been resolved</b> at {{EVENT.RECOVERY.TIME}.htmlencode()} on {{EVENT.RECOVERY.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Problem duration:</b> {{EVENT.DURATION}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                |
ROW   |167                |35         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |<b>{{USER.FULLNAME}.htmlencode()} {{EVENT.UPDATE.ACTION}.htmlencode()} problem</b> at {{EVENT.UPDATE.DATE}.htmlencode()} {{EVENT.UPDATE.TIME}.htmlencode()}.<br>{{EVENT.UPDATE.MESSAGE}.htmlencode()}<br><br><b>Current problem status:</b> {{EVENT.STATUS}.htmlencode()}<br><b>Age:</b> {{EVENT.AGE}.htmlencode()}<br><b>Acknowledged:</b> {{EVENT.ACK.STATUS}.htmlencode()}.                                                                                                                                                                                                                                                          |
ROW   |168                |35         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<b>Discovery rule:</b> {{DISCOVERY.RULE.NAME}.htmlencode()}<br><br><b>Device IP:</b> {{DISCOVERY.DEVICE.IPADDRESS}.htmlencode()}<br><b>Device DNS:</b> {{DISCOVERY.DEVICE.DNS}.htmlencode()}<br><b>Device status:</b> {{DISCOVERY.DEVICE.STATUS}.htmlencode()}<br><b>Device uptime:</b> {{DISCOVERY.DEVICE.UPTIME}.htmlencode()}<br><br><b>Device service name:</b> {{DISCOVERY.SERVICE.NAME}.htmlencode()}<br><b>Device service port:</b> {{DISCOVERY.SERVICE.PORT}.htmlencode()}<br><b>Device service status:</b> {{DISCOVERY.SERVICE.STATUS}.htmlencode()}<br><b>Device service uptime:</b> {{DISCOVERY.SERVICE.UPTIME}.htmlencode()}|
ROW   |169                |35         |2          |0       |Autoregistration: {HOST.HOST}                                                    |<b>Host name:</b> {{HOST.HOST}.htmlencode()}<br><b>Host IP:</b> {{HOST.IP}.htmlencode()}<br><b>Agent port:</b> {{HOST.PORT}.htmlencode()}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |170                |36         |0          |0       |Problem: {EVENT.NAME}                                                            |<b>Problem started</b> at {{EVENT.TIME}.htmlencode()} on {{EVENT.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Operational data:</b> {{EVENT.OPDATA}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                                              |
ROW   |171                |36         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<b>Problem has been resolved</b> at {{EVENT.RECOVERY.TIME}.htmlencode()} on {{EVENT.RECOVERY.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Problem duration:</b> {{EVENT.DURATION}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                |
ROW   |172                |36         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |<b>{{USER.FULLNAME}.htmlencode()} {{EVENT.UPDATE.ACTION}.htmlencode()} problem</b> at {{EVENT.UPDATE.DATE}.htmlencode()} {{EVENT.UPDATE.TIME}.htmlencode()}.<br>{{EVENT.UPDATE.MESSAGE}.htmlencode()}<br><br><b>Current problem status:</b> {{EVENT.STATUS}.htmlencode()}<br><b>Age:</b> {{EVENT.AGE}.htmlencode()}<br><b>Acknowledged:</b> {{EVENT.ACK.STATUS}.htmlencode()}.                                                                                                                                                                                                                                                          |
ROW   |173                |36         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<b>Discovery rule:</b> {{DISCOVERY.RULE.NAME}.htmlencode()}<br><br><b>Device IP:</b> {{DISCOVERY.DEVICE.IPADDRESS}.htmlencode()}<br><b>Device DNS:</b> {{DISCOVERY.DEVICE.DNS}.htmlencode()}<br><b>Device status:</b> {{DISCOVERY.DEVICE.STATUS}.htmlencode()}<br><b>Device uptime:</b> {{DISCOVERY.DEVICE.UPTIME}.htmlencode()}<br><br><b>Device service name:</b> {{DISCOVERY.SERVICE.NAME}.htmlencode()}<br><b>Device service port:</b> {{DISCOVERY.SERVICE.PORT}.htmlencode()}<br><b>Device service status:</b> {{DISCOVERY.SERVICE.STATUS}.htmlencode()}<br><b>Device service uptime:</b> {{DISCOVERY.SERVICE.UPTIME}.htmlencode()}|
ROW   |174                |36         |2          |0       |Autoregistration: {HOST.HOST}                                                    |<b>Host name:</b> {{HOST.HOST}.htmlencode()}<br><b>Host IP:</b> {{HOST.IP}.htmlencode()}<br><b>Agent port:</b> {{HOST.PORT}.htmlencode()}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |175                |37         |0          |0       |Problem: {EVENT.NAME}                                                            |<b>Problem started</b> at {{EVENT.TIME}.htmlencode()} on {{EVENT.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Operational data:</b> {{EVENT.OPDATA}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                                              |
ROW   |176                |37         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<b>Problem has been resolved</b> at {{EVENT.RECOVERY.TIME}.htmlencode()} on {{EVENT.RECOVERY.DATE}.htmlencode()}<br><b>Problem name:</b> {{EVENT.NAME}.htmlencode()}<br><b>Problem duration:</b> {{EVENT.DURATION}.htmlencode()}<br><b>Host:</b> {{HOST.NAME}.htmlencode()}<br><b>Severity:</b> {{EVENT.SEVERITY}.htmlencode()}<br><b>Original problem ID:</b> {{EVENT.ID}.htmlencode()}<br>{{TRIGGER.URL}.htmlencode()}                                                                                                                                                                                                                |
ROW   |177                |37         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |<b>{{USER.FULLNAME}.htmlencode()} {{EVENT.UPDATE.ACTION}.htmlencode()} problem</b> at {{EVENT.UPDATE.DATE}.htmlencode()} {{EVENT.UPDATE.TIME}.htmlencode()}.<br>{{EVENT.UPDATE.MESSAGE}.htmlencode()}<br><br><b>Current problem status:</b> {{EVENT.STATUS}.htmlencode()}<br><b>Age:</b> {{EVENT.AGE}.htmlencode()}<br><b>Acknowledged:</b> {{EVENT.ACK.STATUS}.htmlencode()}.                                                                                                                                                                                                                                                          |
ROW   |178                |37         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<b>Discovery rule:</b> {{DISCOVERY.RULE.NAME}.htmlencode()}<br><br><b>Device IP:</b> {{DISCOVERY.DEVICE.IPADDRESS}.htmlencode()}<br><b>Device DNS:</b> {{DISCOVERY.DEVICE.DNS}.htmlencode()}<br><b>Device status:</b> {{DISCOVERY.DEVICE.STATUS}.htmlencode()}<br><b>Device uptime:</b> {{DISCOVERY.DEVICE.UPTIME}.htmlencode()}<br><br><b>Device service name:</b> {{DISCOVERY.SERVICE.NAME}.htmlencode()}<br><b>Device service port:</b> {{DISCOVERY.SERVICE.PORT}.htmlencode()}<br><b>Device service status:</b> {{DISCOVERY.SERVICE.STATUS}.htmlencode()}<br><b>Device service uptime:</b> {{DISCOVERY.SERVICE.UPTIME}.htmlencode()}|
ROW   |179                |37         |2          |0       |Autoregistration: {HOST.HOST}                                                    |<b>Host name:</b> {{HOST.HOST}.htmlencode()}<br><b>Host IP:</b> {{HOST.IP}.htmlencode()}<br><b>Agent port:</b> {{HOST.PORT}.htmlencode()}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |180                |38         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |[{EVENT.STATUS}] {EVENT.NAME}&eol;Started at {EVENT.TIME} on {EVENT.DATE}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |181                |38         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |[{EVENT.STATUS}] {EVENT.NAME}&eol;Resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                             |
ROW   |182                |38         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |[{EVENT.STATUS}] {EVENT.NAME}&eol;&eol;{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
ROW   |183                |38         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}&eol;Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                      |
ROW   |184                |38         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Autoregistration: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |185                |39         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |186                |39         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |187                |39         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |188                |39         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |189                |39         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |190                |39         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |191                |39         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |192                |39         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |193                |39         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |194                |39         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |195                |40         |0          |0       |Event ID: {EVENT.ID}, Host: {HOST.HOST}, Problem: {EVENT.NAME}                   ||
ROW   |196                |41         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |[{EVENT.STATUS}] {EVENT.NAME}&eol;Started at {EVENT.TIME} on {EVENT.DATE}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |197                |41         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |[{EVENT.STATUS}] {EVENT.NAME}&eol;Resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Event info: {$ZABBIX.URL}/tr_events.php?triggerid={TRIGGER.ID}&eventid={EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                             |
ROW   |198                |41         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |[{EVENT.STATUS}] {EVENT.NAME}&eol;&eol;{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
ROW   |199                |41         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}&eol;Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                      |
ROW   |200                |41         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Autoregistration: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |201                |42         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |202                |42         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |203                |42         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |204                |42         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |205                |42         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |206                |42         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |207                |42         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |208                |42         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |209                |42         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |210                |42         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |211                |43         |0          |0       |Problem: {EVENT.NAME}                                                            |<dl><dd><b>Problem started at</b> {EVENT.TIME} <b>on</b> {EVENT.DATE}</b></dd><dd><b>Problem name:</b> {EVENT.NAME}</dd><dd><b>Host:</b> {HOST.NAME}</dd><dd><b>Severity:</b> {EVENT.SEVERITY}</dd><dd><b>Operational data:</b> {EVENT.OPDATA}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd></dl>{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                    |
ROW   |212                |43         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |<dl><dd><b>Problem has been resolved in</b> {EVENT.DURATION} <b>at</b> {EVENT.RECOVERY.TIME} <b>on</b> {EVENT.RECOVERY.DATE}</dd><dd><b>Problem name:</b> {EVENT.NAME}</dd><dd><b>Host:</b> {HOST.NAME}</dd><dd><b>Severity:</b> {EVENT.SEVERITY}</dd><dd><b>Operational data:</b> {EVENT.OPDATA}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd></dl>{TRIGGER.URL}                                                                                                                                                                                                                                                                 |
ROW   |213                |43         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.TIME} on {EVENT.UPDATE.DATE}. <br><br>{EVENT.UPDATE.MESSAGE}<br><br>Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.<br><br>                                                                                                                                                                                                                                                                                                                                                                                              |
ROW   |214                |43         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |<dl><dd><b>Discovery rule:</b> {DISCOVERY.RULE.NAME}</dd><br><dd><b>Device IP:</b> {DISCOVERY.DEVICE.IPADDRESS}</dd><dd><b>Device DNS:</b> {DISCOVERY.DEVICE.DNS}</dd><br><dd><b>Device status:</b> {DISCOVERY.DEVICE.STATUS}</dd><br><dd><b>Device uptime:</b> {DISCOVERY.DEVICE.UPTIME}</dd><br><dd><b>Device service name:</b> {DISCOVERY.SERVICE.NAME}</dd><dd><b>Device service port:</b> {DISCOVERY.SERVICE.PORT}</dd><dd><b>Device service status:</b> {DISCOVERY.SERVICE.STATUS}</dd><dd><b>Device service uptime:</b> {DISCOVERY.SERVICE.UPTIME}</dd></dl>                                                                     |
ROW   |215                |43         |2          |0       |Autoregistration: {HOST.HOST}                                                    |<dl><dd><b>Host name:</b> {HOST.HOST}</dd><dd><b>Host IP:</b> {HOST.IP}</dd><dd><b>Agent port:</b> {HOST.PORT}</dd></dl>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |216                |43         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |<dl><dd><b>Problem started at</b> {EVENT.TIME} <b>on</b> {EVENT.DATE}</b></dd><dd><b>Problem name:</b> {EVENT.NAME}</dd><dd><b>Host:</b> {HOST.NAME}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd></dl>                                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |217                |43         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |<dl><dd><b>Problem has been resolved in</b> {EVENT.DURATION} <b>at</b> {EVENT.RECOVERY.TIME} <b>on</b> {EVENT.RECOVERY.DATE}</dd><dd><b>Problem name:</b> {EVENT.NAME}</dd><dd><b>Host:</b> {HOST.NAME}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd></dl>                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |218                |43         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |<dl><dd><b>Service problem started at</b> {EVENT.TIME} <b>on</b> {EVENT.DATE}</dd><dd><b>Service problem name:</b> {EVENT.NAME}</dd><dd><b>Service:</b> {SERVICE.NAME}</dd><dd><b>Severity:</b> {EVENT.SEVERITY}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd><dd><b>Service description:</b> {SERVICE.DESCRIPTION}</dd><dd><b><br>{SERVICE.ROOTCAUSE}</dd></dl>                                                                                                                                                                                                                                                                  |
ROW   |219                |43         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |<dl><dd><b>Service {SERVICE.NAME} <b>has been resolved at</b> {EVENT.RECOVERY.TIME} <b>on</b> {EVENT.RECOVERY.DATE}</dd><dd><b>Problem name:</b> {EVENT.NAME}</dd><dd><b>Problem duration:</b> {EVENT.DURATION}</dd><dd><b>Severity:</b> {EVENT.SEVERITY}</dd><dd><b>Original problem ID:</b> {EVENT.ID}</dd><dd><b>Service description:</b {SERVICE.DESCRIPTION}</dd></dl>                                                                                                                                                                                                                                                             |
ROW   |220                |43         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|<dl><dd><b>Changed {SERVICE.NAME} <b>service status to</b> {EVENT.UPDATE.SEVERITY} <b>at</b> {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.</dd><dd><b>Current problem age is</b> {EVENT.AGE}.</dd><dd><b>Service description:</b> {SERVICE.DESCRIPTION}</dd><br>{SERVICE.ROOTCAUSE}</dd></dl>                                                                                                                                                                                                                                                                                                                                                |
ROW   |221                |44         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |222                |44         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |223                |44         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |224                |45         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |225                |45         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |226                |45         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |227                |45         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |228                |45         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |229                |46         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |230                |46         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |231                |46         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |232                |46         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |233                |46         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |234                |46         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |235                |46         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |236                |46         |4          |0       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |237                |46         |4          |1       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |238                |46         |4          |2       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |239                |47         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |240                |47         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |241                |47         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |242                |47         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |243                |47         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |244                |47         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |245                |47         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |246                |47         |4          |0       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |247                |47         |4          |1       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |248                |47         |4          |2       |[{EVENT.STATUS}] Service "{SERVICE.NAME}" problem: {EVENT.NAME}                  |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |249                |48         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |250                |48         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                              |
ROW   |251                |48         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |252                |48         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |253                |48         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |254                |49         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |255                |49         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |256                |49         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |257                |49         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |258                |49         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |259                |50         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |260                |50         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |261                |50         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |262                |50         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |263                |50         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |264                |50         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |265                |50         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
ROW   |266                |51         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |267                |51         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |268                |51         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |269                |51         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |270                |51         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |271                |52         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |272                |52         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |273                |52         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |274                |52         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |275                |52         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |276                |52         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |277                |52         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |278                |52         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |279                |52         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |280                |52         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |281                |53         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |282                |53         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |283                |53         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |284                |53         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |285                |53         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |286                |53         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |287                |53         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |288                |53         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |289                |53         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |290                |53         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |291                |54         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |292                |54         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |293                |54         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |294                |54         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |295                |54         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |296                |55         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |297                |55         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |298                |55         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |299                |55         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |300                |55         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |301                |55         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |302                |55         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |303                |55         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |304                |55         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |305                |55         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |306                |56         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |307                |56         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |308                |56         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |309                |56         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |310                |56         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |311                |56         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |312                |56         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |313                |56         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |314                |56         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |315                |56         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |316                |57         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |317                |57         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |318                |57         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |319                |57         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |320                |57         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |321                |58         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |322                |58         |0          |1       |Resolved: {EVENT.NAME}                                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |323                |58         |0          |2       |Updated problem: {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |324                |58         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |325                |58         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |326                |59         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |327                |59         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |328                |59         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |329                |59         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |330                |59         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |331                |60         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |332                |60         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |333                |60         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |334                |60         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |335                |60         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |336                |61         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |337                |61         |0          |1       |Resolved: {EVENT.NAME}                                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |338                |61         |0          |2       |Updated problem: {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |339                |61         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |340                |61         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |341                |62         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |342                |62         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |343                |62         |0          |2       |Updated: {EVENT.NAME}                                                            |Problem updated at {EVENT.TIME} on {EVENT.DATE}&eol;{USER.FULLNAME} {EVENT.UPDATE.ACTION}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |344                |62         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |345                |62         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |346                |62         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |347                |62         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |348                |62         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |349                |62         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |350                |62         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |351                |63         |0          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;&eol;Trigger description: {TRIGGER.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                                        |
ROW   |352                |63         |0          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |353                |63         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |354                |63         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |355                |63         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |356                |64         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |357                |64         |0          |1       |Resolved: {EVENT.NAME}                                                           |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |358                |64         |0          |2       |Updated problem: {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |359                |64         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |360                |64         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |361                |65         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |362                |65         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |363                |65         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |364                |65         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |365                |65         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |366                |65         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |367                |65         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |368                |65         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |369                |65         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |370                |65         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |371                |66         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |372                |66         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |373                |66         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |374                |66         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |375                |66         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |376                |67         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |377                |67         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                            |
ROW   |378                |67         |0          |2       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |379                |67         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |380                |67         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |381                |68         |0          |0       |Problem: {EVENT.NAME}                                                            |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |382                |68         |0          |1       |Resolved in {EVENT.DURATION}: {EVENT.NAME}                                       |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |383                |68         |0          |2       |Updated problem in {EVENT.AGE}: {EVENT.NAME}                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                           |
ROW   |384                |68         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |385                |68         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |386                |68         |3          |0       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |387                |68         |3          |1       |[{EVENT.STATUS}] {EVENT.NAME}                                                    |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                |
ROW   |388                |68         |4          |0       |Service "{SERVICE.NAME}" problem: {EVENT.NAME}                                   |Service problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Service problem name: {EVENT.NAME}&eol;Service: {SERVICE.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                               |
ROW   |389                |68         |4          |1       |Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}              |Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Problem duration: {EVENT.DURATION}&eol;Severity: {EVENT.SEVERITY}&eol;Original problem ID: {EVENT.ID}&eol;Service description: {SERVICE.DESCRIPTION}                                                                                                                                                                                                                                                                                                                                                    |
ROW   |390                |68         |4          |2       |Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}|Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;Current problem age is {EVENT.AGE}.&eol;Service description: {SERVICE.DESCRIPTION}&eol;&eol;{SERVICE.ROOTCAUSE}                                                                                                                                                                                                                                                                                                                                                                                                      |
ROW   |391                |69         |0          |0       |{EVENT.NAME}                                                                     |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                                                                          |
ROW   |392                |69         |0          |1       |{EVENT.NAME}                                                                     |Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                                                                                                                                                                                                                                                                                                                                                          |
ROW   |393                |69         |0          |2       |{EVENT.NAME}                                                                     |{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.                                                                                                                                                                                                                                                                                                                                                                                                                               |
ROW   |394                |69         |1          |0       |Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}                |Discovery rule: {DISCOVERY.RULE.NAME}&eol;&eol;Device IP: {DISCOVERY.DEVICE.IPADDRESS}&eol;Device DNS: {DISCOVERY.DEVICE.DNS}&eol;Device status: {DISCOVERY.DEVICE.STATUS}&eol;Device uptime: {DISCOVERY.DEVICE.UPTIME}&eol;&eol;Device service name: {DISCOVERY.SERVICE.NAME}&eol;Device service port: {DISCOVERY.SERVICE.PORT}&eol;Device service status: {DISCOVERY.SERVICE.STATUS}&eol;Device service uptime: {DISCOVERY.SERVICE.UPTIME}                                                                                                                                                                                            |
ROW   |395                |69         |2          |0       |Autoregistration: {HOST.HOST}                                                    |Host name: {HOST.HOST}&eol;Host IP: {HOST.IP}&eol;Agent port: {HOST.PORT}|
ROW   |396                |69         |3          |0       |Internal problem: {EVENT.NAME}                                                   |Internal problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Operational data: {EVENT.OPDATA}&eol;Original problem ID: {EVENT.ID}                                                                                                                                                                                                                                                                                                                                                                                                                                                  |

TABLE |usrgrp
FIELDS|usrgrpid|name                     |gui_access|users_status|debug_mode|userdirectoryid|mfa_status|mfaid|
ROW   |7       |Zabbix administrators    |0         |0           |0         |NULL           |0         |NULL |
ROW   |8       |Guests                   |0         |0           |0         |NULL           |0         |NULL |
ROW   |9       |Disabled                 |0         |1           |0         |NULL           |0         |NULL |
ROW   |11      |Enabled debug mode       |0         |0           |1         |NULL           |0         |NULL |
ROW   |12      |No access to the frontend|3         |0           |0         |NULL           |0         |NULL |
ROW   |13      |Internal                 |1         |0           |0         |NULL           |0         |NULL |

TABLE |users_groups
FIELDS|id  |usrgrpid|userid|
ROW   |2   |8       |2     |
ROW   |3   |9       |2     |
ROW   |4   |7       |1     |
ROW   |5   |13      |1     |
ROW   |6   |13      |2     |

TABLE |ugset_group
FIELDS|ugsetid|usrgrpid|
ROW   |1      |13      |
ROW   |1      |8       |
ROW   |1      |9       |

TABLE |user_ugset
FIELDS|userid|ugsetid|
ROW   |2     |1      |

TABLE |scripts
FIELDS|scriptid|name                   |command                                                       |host_access|usrgrpid|groupid|description|confirmation|type|execute_on|timeout|scope|port|authtype|username|password|publickey|privatekey|menu_path|url |new_window|manualinput|manualinput_prompt|manualinput_validator|manualinput_validator_type|manualinput_default_value|
ROW   |1       |Ping                   |ping -c 3 {HOST.CONN}; case $? in [01]) true;; *) false;; esac|2          |NULL    |NULL   |           |            |0   |2         |30s    |2    |    |0       |        |        |         |          |         |    |1         |0          |                  |                     |0                         |                         |
ROW   |2       |Traceroute             |/usr/bin/traceroute {HOST.CONN}                               |2          |NULL    |NULL   |           |            |0   |2         |30s    |2    |    |0       |        |        |         |          |         |    |1         |0          |                  |                     |0                         |                         |
ROW   |3       |Detect operating system|sudo /usr/bin/nmap -O {HOST.CONN}                             |2          |7       |NULL   |           |            |0   |2         |30s    |2    |    |0       |        |        |         |          |         |    |1         |0          |                  |                     |0                         |                         |

TABLE |actions
FIELDS|actionid|name                                          |eventsource|evaltype|status|esc_period|formula|pause_suppressed|notify_if_canceled|pause_symptoms|
ROW   |2       |Auto discovery. Linux servers.                |1          |0       |1     |0         |       |1               |1                 |1             |
ROW   |3       |Report problems to Zabbix administrators      |0          |0       |1     |1h        |       |1               |1                 |1             |
ROW   |4       |Report not supported items                    |3          |0       |1     |1h        |       |1               |1                 |1             |
ROW   |5       |Report not supported low level discovery rules|3          |0       |1     |1h        |       |1               |1                 |1             |
ROW   |6       |Report unknown triggers                       |3          |0       |1     |1h        |       |1               |1                 |1             |

TABLE |operations
FIELDS|operationid|actionid|operationtype|esc_period|esc_step_from|esc_step_to|evaltype|recovery|
ROW   |1          |2       |6            |0         |1            |1          |0       |0       |
ROW   |2          |2       |4            |0         |1            |1          |0       |0       |
ROW   |3          |3       |0            |0         |1            |1          |0       |0       |
ROW   |4          |4       |0            |0         |1            |1          |0       |0       |
ROW   |5          |5       |0            |0         |1            |1          |0       |0       |
ROW   |6          |6       |0            |0         |1            |1          |0       |0       |
ROW   |7          |3       |11           |0         |1            |1          |0       |1       |
ROW   |8          |4       |11           |0         |1            |1          |0       |1       |
ROW   |9          |5       |11           |0         |1            |1          |0       |1       |
ROW   |10         |6       |11           |0         |1            |1          |0       |1       |

TABLE |opmessage
FIELDS|operationid|default_msg|subject|message|mediatypeid|
ROW   |3          |1          |       |       |NULL       |
ROW   |4          |1          |       |       |NULL       |
ROW   |5          |1          |       |       |NULL       |
ROW   |6          |1          |       |       |NULL       |
ROW   |7          |1          |       |       |NULL       |
ROW   |8          |1          |       |       |NULL       |
ROW   |9          |1          |       |       |NULL       |
ROW   |10         |1          |       |       |NULL       |

TABLE |opmessage_grp
FIELDS|opmessage_grpid|operationid|usrgrpid|
ROW   |1              |3          |7       |
ROW   |2              |4          |7       |
ROW   |3              |5          |7       |
ROW   |4              |6          |7       |

TABLE |opgroup
FIELDS|opgroupid|operationid|groupid|
ROW   |1        |2          |2      |

TABLE |conditions
FIELDS|conditionid|actionid|conditiontype|operator|value|value2|
ROW   |2          |2       |10           |0       |0    |      |
ROW   |3          |2       |8            |0       |9    |      |
ROW   |4          |2       |12           |2       |Linux|      |
ROW   |6          |4       |23           |0       |0    |      |
ROW   |7          |5       |23           |0       |2    |      |
ROW   |8          |6       |23           |0       |4    |      |

TABLE |config
FIELDS|configid|work_period    |alert_usrgrpid|discovery_groupid|dbversion_status|geomaps_tile_provider|ldap_userdirectoryid|server_status|mfaid|software_update_check_data|
ROW   |1       |1-5,09:00-18:00|7             |5                |                |OpenStreetMap.Mapnik |NULL                |             |NULL |                          |

TABLE |graph_theme
FIELDS|graphthemeid|theme     |backgroundcolor|graphcolor|gridcolor|maingridcolor|gridbordercolor|textcolor|highlightcolor|leftpercentilecolor|rightpercentilecolor|nonworktimecolor|colorpalette                                                                                                                                      |
ROW   |1           |blue-theme|FFFFFF         |FFFFFF    |CCD5D9   |ACBBC2       |ACBBC2         |1F2C33   |E33734        |429E47             |E33734              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |2           |dark-theme|2B2B2B         |2B2B2B    |454545   |4F4F4F       |4F4F4F         |F2F2F2   |E45959        |59DB8F             |E45959              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|
ROW   |3           |hc-light  |FFFFFF         |FFFFFF    |555555   |000000       |333333         |000000   |333333        |000000             |000000              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |4           |hc-dark   |000000         |000000    |666666   |888888       |4F4F4F         |FFFFFF   |FFFFFF        |FFFFFF             |FFFFFF              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|

TABLE |globalmacro
FIELDS|globalmacroid|macro            |value |description|type|
ROW   |2            |{$SNMP_COMMUNITY}|public|           |0   |

TABLE |regexps
FIELDS|regexpid|name                                        |test_string|
ROW   |1       |File systems for discovery                  |ext3       |
ROW   |2       |Network interfaces for discovery            |eth0       |
ROW   |3       |Storage devices for SNMP discovery          |/boot      |
ROW   |4       |Windows service names for discovery         |SysmonLog  |
ROW   |5       |Windows service startup states for discovery|automatic  |

TABLE |expressions
FIELDS|expressionid|regexpid|expression                                                                                                                                                            |expression_type|exp_delimiter|case_sensitive|
ROW   |1           |1       |^(btrfs&pipe;ext2&pipe;ext3&pipe;ext4&pipe;reiser&pipe;xfs&pipe;ffs&pipe;ufs&pipe;jfs&pipe;jfs2&pipe;vxfs&pipe;hfs&pipe;apfs&pipe;refs&pipe;ntfs&pipe;fat32&pipe;zfs)$|3              |,            |0             |
ROW   |3           |3       |^(Physical memory&pipe;Virtual memory&pipe;Memory buffers&pipe;Cached memory&pipe;Swap space)$                                                                        |4              |,            |1             |
ROW   |5           |4       |^(MMCSS&pipe;gupdate&pipe;SysmonLog&pipe;clr_optimization_v2.0.50727_32&pipe;clr_optimization_v4.0.30319_32)$                                                         |4              |,            |1             |
ROW   |6           |5       |^(automatic&pipe;automatic delayed)$                                                                                                                                  |3              |,            |1             |
ROW   |7           |2       |^Software Loopback Interface                                                                                                                                          |4              |,            |1             |
ROW   |8           |2       |^(In)?[Ll]oop[Bb]ack[0-9._]*$                                                                                                                                         |4              |,            |1             |
ROW   |9           |2       |^NULL[0-9.]*$                                                                                                                                                         |4              |,            |1             |
ROW   |10          |2       |^[Ll]o[0-9.]*$                                                                                                                                                        |4              |,            |1             |
ROW   |11          |2       |^[Ss]ystem$                                                                                                                                                           |4              |,            |1             |
ROW   |12          |2       |^Nu[0-9.]*$                                                                                                                                                           |4              |,            |1             |

TABLE |config_autoreg_tls
FIELDS|autoreg_tlsid|tls_psk_identity|tls_psk|
ROW   |1            |                |       |

TABLE |module
FIELDS|moduleid|id            |relative_path         |status|config|
ROW   |1       |actionlog     |widgets/actionlog     |1     |[]    |
ROW   |2       |clock         |widgets/clock         |1     |[]    |
ROW   |3       |dataover      |widgets/dataover      |1     |[]    |
ROW   |4       |discovery     |widgets/discovery     |1     |[]    |
ROW   |5       |favgraphs     |widgets/favgraphs     |1     |[]    |
ROW   |6       |favmaps       |widgets/favmaps       |1     |[]    |
ROW   |7       |geomap        |widgets/geomap        |1     |[]    |
ROW   |8       |graph         |widgets/graph         |1     |[]    |
ROW   |9       |graphprototype|widgets/graphprototype|1     |[]    |
ROW   |10      |hostavail     |widgets/hostavail     |1     |[]    |
ROW   |11      |item          |widgets/item          |1     |[]    |
ROW   |12      |map           |widgets/map           |1     |[]    |
ROW   |13      |navtree       |widgets/navtree       |1     |[]    |
ROW   |14      |itemhistory   |widgets/itemhistory   |1     |[]    |
ROW   |15      |problemhosts  |widgets/problemhosts  |1     |[]    |
ROW   |16      |problems      |widgets/problems      |1     |[]    |
ROW   |17      |problemsbysv  |widgets/problemsbysv  |1     |[]    |
ROW   |18      |slareport     |widgets/slareport     |1     |[]    |
ROW   |19      |svggraph      |widgets/svggraph      |1     |[]    |
ROW   |20      |systeminfo    |widgets/systeminfo    |1     |[]    |
ROW   |21      |tophosts      |widgets/tophosts      |1     |[]    |
ROW   |22      |trigover      |widgets/trigover      |1     |[]    |
ROW   |23      |url           |widgets/url           |1     |[]    |
ROW   |24      |web           |widgets/web           |1     |[]    |
ROW   |25      |gauge         |widgets/gauge         |1     |[]    |
ROW   |26      |toptriggers   |widgets/toptriggers   |1     |[]    |
ROW   |27      |piechart      |widgets/piechart      |1     |[]    |
ROW   |28      |honeycomb     |widgets/honeycomb     |1     |[]    |
ROW   |29      |hostnavigator |widgets/hostnavigator |1     |[]    |
ROW   |30      |itemnavigator |widgets/itemnavigator |1     |[]    |

TABLE |role_rule
FIELDS|role_ruleid|roleid|type|name                  |value_int|value_str|value_moduleid|value_serviceid|
ROW   |1          |1     |0   |ui.default_access     |1        |         |NULL          |NULL           |
ROW   |2          |1     |0   |services.read         |1        |         |NULL          |NULL           |
ROW   |3          |1     |0   |services.write        |0        |         |NULL          |NULL           |
ROW   |4          |1     |0   |modules.default_access|1        |         |NULL          |NULL           |
ROW   |5          |1     |0   |api.access            |1        |         |NULL          |NULL           |
ROW   |6          |1     |0   |api.mode              |0        |         |NULL          |NULL           |
ROW   |7          |1     |0   |actions.default_access|1        |         |NULL          |NULL           |
ROW   |8          |2     |0   |ui.default_access     |1        |         |NULL          |NULL           |
ROW   |9          |2     |0   |services.read         |1        |         |NULL          |NULL           |
ROW   |10         |2     |0   |services.write        |1        |         |NULL          |NULL           |
ROW   |11         |2     |0   |modules.default_access|1        |         |NULL          |NULL           |
ROW   |12         |2     |0   |api.access            |1        |         |NULL          |NULL           |
ROW   |13         |2     |0   |api.mode              |0        |         |NULL          |NULL           |
ROW   |14         |2     |0   |actions.default_access|1        |         |NULL          |NULL           |
ROW   |15         |3     |0   |ui.default_access     |1        |         |NULL          |NULL           |
ROW   |16         |3     |0   |services.read         |1        |         |NULL          |NULL           |
ROW   |17         |3     |0   |services.write        |1        |         |NULL          |NULL           |
ROW   |18         |3     |0   |modules.default_access|1        |         |NULL          |NULL           |
ROW   |19         |3     |0   |api.access            |1        |         |NULL          |NULL           |
ROW   |20         |3     |0   |api.mode              |0        |         |NULL          |NULL           |
ROW   |21         |3     |0   |actions.default_access|1        |         |NULL          |NULL           |
ROW   |22         |4     |0   |ui.default_access     |1        |         |NULL          |NULL           |
ROW   |23         |4     |0   |services.read         |1        |         |NULL          |NULL           |
ROW   |24         |4     |0   |services.write        |0        |         |NULL          |NULL           |
ROW   |25         |4     |0   |modules.default_access|1        |         |NULL          |NULL           |
ROW   |26         |4     |0   |api.access            |0        |         |NULL          |NULL           |
ROW   |27         |4     |0   |actions.default_access|0        |         |NULL          |NULL           |

