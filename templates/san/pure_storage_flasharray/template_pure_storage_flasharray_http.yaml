zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: 7c2cb727f85b492d88cd56e17127c64d
      name: Templates/SAN
  templates:
    - uuid: ae3ce7156aae4ae79a72742365c884ea
      template: 'Pure Storage FlashArray v1 by HTTP'
      name: 'Pure Storage FlashArray v1 by HTTP'
      description: |
        Setup:
        1. Create a host for the Pure Storage FlashArray device and assign to it the "Pure Storage FlashArray v1 by HTTP" template.
        2. Enter your API token from the Purity//FA web interface into the {$PURE.FLASHARRAY.API.TOKEN} macro.
        3. Set your Purity//FA web interface URL as the {$PURE.FLASHARRAY.API.URL} macro value.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback.
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-1
      groups:
        - name: Templates/SAN
      items:
        - uuid: c51f66a1d1c749e0b48a9bebf21c7426
          name: 'Array capacity'
          type: DEPENDENT
          key: purestorage.flasharray.array.capacity
          units: B
          description: 'Total capacity of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.capacity
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: fa0fbc8453ab4c2da3a0416e8f1244fa
          name: 'Array data reduction'
          type: DEPENDENT
          key: purestorage.flasharray.array.drr
          value_type: FLOAT
          description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the array volume.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.data_reduction
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: f769c0656f934f5c8d515c76ebf2f5ae
          name: 'Storage array item errors'
          type: DEPENDENT
          key: purestorage.flasharray.array.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from array data retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 99e1a8dbf600466d99d898806a0d020a
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.array.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get storage array data'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get array data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 559fb36d7bb34145a2afcdc790951041
          name: 'Get array data'
          type: DEPENDENT
          key: purestorage.flasharray.array.get
          history: '0'
          value_type: TEXT
          description: 'Collects array data from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	storage_array = {},
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	request.addHeader('Accept: application/json');
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  			if (Array.isArray(response) & response.length > 0) {
                  				response = response[0]
                  			}
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	storage_array = getHttpData(
                  		url + 'api/' + version + '/array',
                  		creds.cookie
                  	);
                  
                  	storage_array['space'] = getHttpData(
                  		url + 'api/' + version + '/array?space=true',
                  		creds.cookie
                  	);
                  
                  	storage_array['monitor'] = getHttpData(
                  		url + 'api/' + version + '/array?action=monitor',
                  		creds.cookie
                  	);
                  
                  	storage_array['remote_assist'] = getHttpData(
                  		url + 'api/' + version + '/array/remoteassist',
                  		creds.cookie, {}
                  	);
                  
                  	storage_array['phone_home'] = getHttpData(
                  		url + 'api/' + version + '/array/phonehome',
                  		creds.cookie, {}
                  	);
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'array': storage_array,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: f279b2482fb9422abe2d9f4e52937771
          name: 'Array hostname'
          type: DEPENDENT
          key: purestorage.flasharray.array.hostname
          value_type: CHAR
          description: 'Host name of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.hostname
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 7fec71312a2841f2b5f615e2e8e061f4
          name: 'Array parity'
          type: DEPENDENT
          key: purestorage.flasharray.array.parity
          value_type: FLOAT
          units: '%'
          description: 'The percentage of data that is protected.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.parity
            - type: MULTIPLIER
              parameters:
                - '100'
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: ce48a3aee4fc44a386f28ccb26fe4744
          name: 'Array bytes read per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.read_bytes.rate
          units: Bps
          description: 'Number of bytes read per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.output_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 01e22e1c6fa548c68bbc04058497997e
          name: 'Array read requests per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.read_requests.rate
          description: 'Number of read requests processed per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.reads_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: ed65950573dc4f5caab6da2a114ad662
          name: 'Array shared space'
          type: DEPENDENT
          key: purestorage.flasharray.array.shared_space
          units: B
          description: 'The physical space occupied by deduplicated data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.shared_space
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 6bd825261ce64fa5849d8d4a71e24734
          name: 'Array snapshots size'
          type: DEPENDENT
          key: purestorage.flasharray.array.snapshots_size
          units: B
          description: 'The physical space occupied by snapshots.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.snapshots
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 6033bf992db44f1fa74057288fd1c32c
          name: 'Array system size'
          type: DEPENDENT
          key: purestorage.flasharray.array.system_size
          units: B
          description: 'The physical space occupied by internal array metadata.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.system
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 10cb260c3ca84e3ab244122123cdc64f
          name: 'Array thin provisioning'
          type: DEPENDENT
          key: purestorage.flasharray.array.thin_provisioning
          value_type: FLOAT
          units: '%'
          description: 'The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.thin_provisioning
            - type: MULTIPLIER
              parameters:
                - '100'
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 0263b3ea58ce4488b7628fba3f0dac73
          name: 'Array total data reduction'
          type: DEPENDENT
          key: purestorage.flasharray.array.total_drr
          value_type: FLOAT
          description: 'The total reduction ratio of all data on the array volume that has been processed by the data deduplication and compression engines.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.total_reduction
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: d4b3cb4a9a7841f4bae08b75658d2309
          name: 'Array microseconds per operation'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_op
          units: µs
          description: 'Average local queue time in microseconds for both read and write operations.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.local_queue_usec_per_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: bf22bf3ce9874cb5a6dbf89493ed8e0e
          name: 'Array microseconds per read'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_read
          units: µs
          description: 'Average time in microseconds required to process an I/O read request from the array. The average time does not include SAN time, queue time, or QoS rate limit time.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.usec_per_read_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 83fde7a6cfdd4215b181866e1a003be9
          name: 'Array microseconds per write'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_write
          units: µs
          description: 'Average time in microseconds required to process an I/O write request to the array. The average time does not include SAN time, queue time, or QoS rate limit time.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.usec_per_write_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: bffa5098018742eaadaf5454df230280
          name: 'Array used space'
          type: DEPENDENT
          key: purestorage.flasharray.array.used_space
          units: B
          description: 'The total physical space occupied by system, shared space, volume, and snapshot data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.total
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 1fc46ce2f857421a9a4f7c2b4cdcee97
          name: 'Array version'
          type: DEPENDENT
          key: purestorage.flasharray.array.version
          value_type: CHAR
          description: 'Version of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.version
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 66e9074d811e4836a0d763b090a7c6ed
          name: 'Array volumes size'
          type: DEPENDENT
          key: purestorage.flasharray.array.volumes_size
          units: B
          description: 'The physical space occupied by volumes.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.volumes
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 812c713f9237473398328d7316827ec8
          name: 'Array write requests per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.write_requests.rate
          description: 'Number of write requests processed per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.writes_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 2ae599ecbf43447d9b7d3c5956c435bd
          name: 'Array bytes written per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.written_bytes.rate
          units: Bps
          description: 'Number of bytes written per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.monitor.input_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 37b7fc4e8af740639a009049acdaf229
          name: Authentication
          type: SCRIPT
          key: purestorage.flasharray.auth
          history: '0'
          value_type: TEXT
          params: |
            var params = JSON.parse(value),
            	request = new HttpRequest(),
            	cookies = [],
            	error_msg = '';
            
            function getToken(url, data) {
            	var token = null;
            	var response = request.post(url, JSON.stringify(data));
            	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            	if (request.getStatus() !== 200) {
            		throw 'Failed to receive data: invalid response status code.';
            	}
            
            	if (response !== null) {
            		try {
            			token = JSON.parse(response).api_token;
            		}
            		catch (error) {
            			throw 'Failed to get the API token from Pure Storage API. Check debug log for more information.';
            		}
            	}
            
            	if (token === null || typeof token !== 'string') {
            		throw 'Something went wrong while getting the API token. Check debug log for more information.';
            	}
            
            	return token;
            };
            
            function createSession(url, data) {
            	var cookies = [];
            	response = request.post(url, JSON.stringify(data));
            	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            	if (request.getStatus() !== 200) {
            		throw 'Failed to receive data: invalid response status code.';
            	}
            
            	if (response !== null) {
            		try {
            			username = JSON.parse(response).username;
            		}
            		catch (error) {
            			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
            		}
            	} else {
            		throw 'Authentication failed.';
            	}
            
            	var headers = request.getHeaders();
            	for (key in headers) {
            		if (key.toLowerCase() == 'set-cookie') {
            			var entries = headers[key].split(',');
            			for (idx in entries) {
            				var value = entries[idx].split(';')[0];
            				cookies.push(value);
            			}
            		}
            	}
            
            	return cookies;
            };
            
            try {
            
            	['url', 'token', 'username', 'password', 'version'].forEach(function (field) {
            		var macro = '{$PURE.FLASHARRAY.API.' + field.toUpperCase() + '}';
            		if (typeof params[field] === 'undefined' || params[field] === macro) {
            			throw 'Please set \'' + field + '\' script input parameter to the proper ' + macro + ' macro value.';
            		}
            	});
            	['url', 'version'].forEach(function (field) {
            		if (typeof params[field] == '') {
            			throw 'Please set \'' + field + '\' script input parameter to the proper value.';
            		}
            	});
            
            	if (params.token == '' & params.username == '' & params.password == '') {
            		throw 'To perform authentication, either a token or a username and password must be specified.';
            	}
            
            	if (params.url.indexOf('http://') === -1 && params.url.indexOf('https://') === -1) {
            		params.url = 'https://' + params.url + (!params.url.endsWith('/') ? '/' : '');;
            	}
            
            	if (typeof params.http_proxy !== 'undefined' && params.http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && params.http_proxy !== '') {
            		request.setProxy(params.http_proxy);
            	}
            
            	request.addHeader('Accept: application/json');
            	request.addHeader('Content-Type: application/json');
            	if (params.token === '') {
            		if (params.username === '' || params.password === '') {
            			throw 'Username or password is not specified.';
            		}
            		params.token = getToken(
            			params.url + 'api/' + params.version + '/auth/apitoken',
            			{'username': params.username,'password': params.password}
            		);
            	}
            	cookies = createSession(
            		params.url + 'api/' + params.version + '/auth/session',
            		{'api_token': params.token}
            	);
            
            } catch (err) {
            	error_msg = err;
            };
            
            return JSON.stringify({
            	'cookie': cookies.join('; '),
            	'error': error_msg.toString()
            });
          description: |
            Pure Storage FlashArray authentication with username and password or API token usage.
            Returns a session ID that is required only once and is used for all dependent script items.
            A session will expire after 30 minutes. Check the template documentation for details.
          timeout: '{$PURE.FLASHARRAY.DATA.TIMEOUT}'
          parameters:
            - name: http_proxy
              value: '{$PURE.FLASHARRAY.HTTP_PROXY}'
            - name: password
              value: '{$PURE.FLASHARRAY.API.PASSWORD}'
            - name: token
              value: '{$PURE.FLASHARRAY.API.TOKEN}'
            - name: url
              value: '{$PURE.FLASHARRAY.API.URL}'
            - name: username
              value: '{$PURE.FLASHARRAY.API.USERNAME}'
            - name: version
              value: '{$PURE.FLASHARRAY.API.VERSION}'
          tags:
            - tag: component
              value: raw
        - uuid: 254ba4d842a64dc19cdd42ac9436b0d7
          name: 'Authentication item errors'
          type: DEPENDENT
          key: purestorage.flasharray.auth.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from the authentication item.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 748fc12e196f429e8fe04a1ca27779f9
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.auth.errors))>0'
              name: 'Pure Storage FlashArray: Authentication has failed'
              priority: AVERAGE
              description: 'An error occurred when trying to perform authentication in the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 0ac271e368184318838ed9f0dd7b77ba
          name: 'Certificates item errors'
          type: DEPENDENT
          key: purestorage.flasharray.certificates.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from certificate retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.certificates.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: dc6de5a835ac4e7e91c34f7b711957ce
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.certificates.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get certificates'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get certificate data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: e27cd9105cc74c2fa401bfe1a35f5261
          name: 'Get certificates'
          type: DEPENDENT
          key: purestorage.flasharray.certificates.get
          history: '0'
          value_type: TEXT
          description: 'Collects all certificates from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	certs = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	certs = getHttpData(
                  		url + 'api/' + version + '/cert',
                  		creds.cookie
                  	);
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'certs': certs,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 4694be0d85664bc3976c6ff15ce10262
          name: 'Storage hardware item errors'
          type: DEPENDENT
          key: purestorage.flasharray.hardware.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from hardware retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.hardware.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 0ee01011e18b4304b3baff456fa62787
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.hardware.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get hardware data'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get hardware data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 02d04959c00b4d8e861e205b863c0ece
          name: 'Get hardware data'
          type: DEPENDENT
          key: purestorage.flasharray.hardware.get
          history: '0'
          value_type: TEXT
          description: 'Collects hardware from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	drives = [],
                  	hardware = [],
                  	controllers = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	drives = getHttpData(
                  		url + 'api/' + version + '/drive',
                  		creds.cookie
                  	);
                  
                  	controllers = getHttpData(
                  		url + 'api/' + version + '/array?controllers=true',
                  		creds.cookie
                  	);
                  
                  	getHttpData(
                  		url + 'api/' + version + '/hardware',
                  		creds.cookie
                  	).forEach(function (item) {
                  		var applied = false;
                  		drives.forEach(function (drive, index) {
                  			if (drive['name'] && item['name'] && drive['name'] == item['name']) {
                  				drives[index]['hardware'] = item;
                  				applied = true;
                  			}
                  		});
                  		controllers.forEach(function (ctrl, index) {
                  			if (ctrl['name'] && item['name'] && ctrl['name'] == item['name']) {
                  				controllers[index]['hardware'] = item;
                  				applied = true;
                  			}
                  		});
                  		if (!applied) {
                  			var nameArray = item['name'].split('.');
                  			if (nameArray.length > 1) {
                  				item['parent'] = nameArray[0];
                  			}
                  			hardware.push(item);
                  		}
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'drives': drives,
                  	'hardware': hardware,
                  	'controllers': controllers,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: b867ded0bdca42e48b5d17cae7f00f17
          name: 'Storage hosts item errors'
          type: DEPENDENT
          key: purestorage.flasharray.hosts.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from host data retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.hosts.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: d72a25739d1d4a67947115fa1bad84a4
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.hosts.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get hosts'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get host data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 7e483238579b40118674edf0c0f21250
          name: 'Get hosts'
          type: DEPENDENT
          key: purestorage.flasharray.hosts.get
          history: '0'
          value_type: TEXT
          description: 'Collects all hosts from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	hosts = {},
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	request.addHeader('Accept: application/json');
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	hosts = getHttpData(
                  		url + 'api/' + version + '/host',
                  		creds.cookie
                  	);
                  
                  	getHttpData(
                  		url + 'api/' + version + '/host?space=true',
                  		creds.cookie
                  	).forEach(function (item) {
                  		hosts.forEach(function (host, index) {
                  			if (host['name'] && item['name'] && host['name'] == item['name']) {
                  				hosts[index]['space'] = item;
                  			}
                  		});
                  	});
                  
                  	getHttpData(
                  		url + 'api/' + version + '/host?action=monitor',
                  		creds.cookie
                  	).forEach(function (item) {
                  		hosts.forEach(function (host, index) {
                  			if (host['name'] && item['name'] && host['name'] == item['name']) {
                  				hosts[index]['monitor'] = item;
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'hosts': hosts,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 16b047e98a2f4aec87df0aa48d741843
          name: 'Storage network interfaces item errors'
          type: DEPENDENT
          key: purestorage.flasharray.net_ifs.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from network interface retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.net_ifs.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 577eaf4cb56345aca0a901da2fdaa7b1
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.net_ifs.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get network interfaces'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get network interface data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: bcfa1e2b0bb34baf82b28fad87ba7688
          name: 'Get network interfaces'
          type: DEPENDENT
          key: purestorage.flasharray.net_ifs.get
          history: '0'
          value_type: TEXT
          description: 'Collects all network interfaces from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	interfaces = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	request.addHeader('Accept: application/json');
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	interfaces = getHttpData(
                  		url + 'api/' + version + '/network',
                  		creds.cookie
                  	);
                  
                  	getHttpData(
                  		url + 'api/' + version + '/hardware',
                  		creds.cookie
                  	).forEach(function (item) {
                  		interfaces.forEach(function (netif, index) {
                  			if (netif['name'] && item['name'] && netif['name'].toLowerCase() == item['name'].toLowerCase()) {
                  				interfaces[index]['name'] = item['name'].toLowerCase();
                  				interfaces[index]['hardware'] = item;
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'interfaces': interfaces,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 1d5a1fa4d56e49fe9188f308babb12ad
          name: 'Phone home status'
          type: DEPENDENT
          key: purestorage.flasharray.phone_home.status
          trends: '0'
          description: 'Current status of a manually-initiated phonehome.'
          valuemap:
            name: 'Connection Status'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.phone_home.status
            - type: JAVASCRIPT
              parameters:
                - |
                  const idx = [
                  	'disabled',
                  	'enabled'
                  ].indexOf(value);
                  return idx !== -1 ? idx : 2;
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
          triggers:
            - uuid: 5a670b7f0c3e4dc9a5e2fff4cedf3810
              expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.phone_home.status)=0'
              name: 'Pure Storage FlashArray: Phone Home has been disabled'
              opdata: 'Current status: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Phone Home connects to the Pure1 service and uploads logs for continuous health monitoring.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 2a116c0e14c149949b5691ad42ccddb1
          name: 'Storage pods item errors'
          type: DEPENDENT
          key: purestorage.flasharray.pods.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from pod retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.pods.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 8eddd157ab93413cac5ba6a7cca2ce93
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.pods.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get pods'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get pod data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: e6a4b00380a64f02a0209c2168d0191f
          name: 'Get pods'
          type: DEPENDENT
          key: purestorage.flasharray.pods.get
          history: '0'
          value_type: TEXT
          description: 'Collects all pods from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	pods = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	pods = getHttpData(
                  		url + 'api/' + version + '/pod',
                  		creds.cookie
                  	);
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'pods': pods,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 0182ae2fcd5f484685d1a0700ef15f8b
          name: 'Remote assist status'
          type: DEPENDENT
          key: purestorage.flasharray.remote_assist.status
          trends: '0'
          description: 'Status of the remote assist connection.'
          valuemap:
            name: 'Connection Status'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.remote_assist.status
            - type: JAVASCRIPT
              parameters:
                - |
                  const idx = [
                  	'disconnected',
                  	'connected'
                  ].indexOf(value);
                  return idx !== -1 ? idx : 2;
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
          triggers:
            - uuid: eb043244987b4124b07018e94d99cd21
              expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.remote_assist.status)=1'
              name: 'Pure Storage FlashArray: RemoteAssist has been enabled'
              opdata: 'Current status: {ITEM.LASTVALUE1}'
              priority: HIGH
              description: 'Purity''s administrator-controlled RemoteAssist feature enables a Technical Support Engineer to communicate directly with the FlashArray via a secure link, effectively establishing an additional administrative session for the duration of the diagnosis and service.'
              tags:
                - tag: scope
                  value: security
        - uuid: f36a091e06a84158bda3ba468343bf96
          name: 'Storage volumes item errors'
          type: DEPENDENT
          key: purestorage.flasharray.volumes.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from volume retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.volumes.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 1ffc3c34fe294c6caf0936169b836627
              expression: 'length(last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.volumes.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get volumes'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get volume data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: ece41bfbe0ba4037baae8305f5ce6a61
          name: 'Get volumes'
          type: DEPENDENT
          key: purestorage.flasharray.volumes.get
          history: '0'
          value_type: TEXT
          description: 'Collects all volumes from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	volumes = {},
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url, cookie) {
                  	request.addHeader('Cookie: ' + cookie);
                  	request.addHeader('Accept: application/json');
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response);
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['cookie'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected cookie value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	volumes = getHttpData(
                  		url + 'api/' + version + '/volume',
                  		creds.cookie, {}
                  	);
                  
                  	getHttpData(
                  		url + 'api/' + version + '/volume?space=true',
                  		creds.cookie
                  	).forEach(function (item) {
                  		volumes.forEach(function (volume, index) {
                  			if (volume['name'] && item['name'] && volume['name'] == item['name']) {
                  				volumes[index]['space'] = item;
                  			}
                  		});
                  	});
                  
                  	getHttpData(
                  		url + 'api/' + version + '/volume?action=monitor',
                  		creds.cookie
                  	).forEach(function (item) {
                  		volumes.forEach(function (volume, index) {
                  			if (volume['name'] && item['name'] && volume['name'] == item['name']) {
                  				volumes[index]['monitor'] = item;
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'volumes': volumes,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: 55f1042201c2411e854aea9e0c436c36
          name: 'Certificate discovery'
          type: DEPENDENT
          key: purestorage.flasharray.cert.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of certificates from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 6485116679eb47fbad1bb587da76314c
              name: 'Certificate [{#NAME}]: Common name'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.cn[{#NAME}]'
              value_type: CHAR
              description: 'The common name field listed in the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.common_name
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: 23e5bc6dd2824c92bf4a2cb4c8c56449
              name: 'Certificate [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.certs[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.certificates.get
              tags:
                - tag: component
                  value: raw
                - tag: type
                  value: '{#TYPE}'
            - uuid: 47d355c8da7f46a69da89cb125a9097c
              name: 'Certificate [{#NAME}]: Issued by'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.issued_by[{#NAME}]'
              value_type: CHAR
              description: 'Indicates the authority or organization that issued the {#NAME} certificate, typically including information such as the name of the Certificate Authority (CA) and its digital signature.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.issued_by
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: 1d3825ea91324e36847187cb2c415120
              name: 'Certificate [{#NAME}]: Issued to'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.issued_to[{#NAME}]'
              value_type: CHAR
              description: 'Indicates the entity which holds the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.issued_to
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: 9f90d24085614389a0e4d9c14139bf3b
              name: 'Certificate [{#NAME}]: Valid from'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.valid_from[{#NAME}]'
              units: unixtime
              description: 'Indicates the date and time when the {#NAME} certificate takes effect.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.valid_from
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: 9d898b8feff04af388deed0465745f50
              name: 'Certificate [{#NAME}]: Valid to'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.valid_to[{#NAME}]'
              units: unixtime
              description: 'Indicates the expiration date and time of the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.valid_to
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: 1d5940586b7245908c4aa60f56458941
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.cert.valid_to[{#NAME}]) > 0 and (last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.cert.valid_to[{#NAME}]) - now()) / 86400 < {$PURE.FLASHARRAY.CERT.EXPIRY.WARN}'
                  name: 'Pure Storage FlashArray: Certificate [{#NAME}]: SSL certificate expires soon'
                  event_name: 'Pure Storage FlashArray: Certificate [{#NAME}]: SSL certificate expires soon (less than {$PURE.FLASHARRAY.CERT.EXPIRY.WARN} days)'
                  opdata: 'Expiration date: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Consider reissuing and replacing the {#NAME} certificate.'
                  tags:
                    - tag: scope
                      value: notice
          master_item:
            key: purestorage.flasharray.certificates.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.status
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.certs
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 3406d565b5274d4885d83a2185f25dfd
          name: 'Controller discovery'
          type: DEPENDENT
          key: purestorage.flasharray.ctrl.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#NAME}'
                value: '^CT[0-9]+$'
          description: 'Discovery of controllers from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: e2113791d4e4432a9a81f045a5411661
              name: 'Controller [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.controllers[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: 441c03ccdad4446aabd0785431f20ce3
              name: 'Controller [{#NAME}]: Model'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.model[{#NAME}]'
              value_type: CHAR
              description: 'Model of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.model
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: 2b0b25979941487092faa88bc072b0a6
              name: 'Controller [{#NAME}]: Mode'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.mode[{#NAME}]'
              trends: '0'
              description: 'The current mode of the {#NAME} controller.'
              valuemap:
                name: 'Controller Mode'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.mode
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'not present',
                      	'offline',
                      	'primary',
                      	'secondary',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 4;
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: a31d230425d448bbb5f4963f9478893b
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.ctrl.mode[{#NAME}],#1)<>last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.ctrl.mode[{#NAME}],#2)'
                  name: 'Pure Storage FlashArray: Controller [{#NAME}]: Mode has been changed'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'The mode of the {#NAME} controller has changed.'
                  tags:
                    - tag: scope
                      value: health
            - uuid: ebee4ac2d44648ab999f18a1b7ee8b85
              name: 'Controller [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.hardware.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: e51fe80fdd604e47a0a7d0fd818f15f1
              name: 'Controller [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} controller.'
              valuemap:
                name: 'Controller Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'not ready',
                      	'ready',
                      	'updating',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 3;
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: 7dfab62da75440e0bed46d02133a0f8f
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.ctrl.status[{#NAME}])<>1 and last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.ctrl.status[{#NAME}])<>2'
                  name: 'Pure Storage FlashArray: Controller [{#NAME}]: Controller is not ready'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Controller {#NAME} status is not "ready" or "updating".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: dd63482ca18d48f8840b3db73b997999
              name: 'Controller [{#NAME}]: Version'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.version[{#NAME}]'
              value_type: CHAR
              description: 'Version of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.version
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.hardware.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.controllers
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: ad7ad0c1965f40c4aa64dbbdecd0bcbc
          name: 'Drive discovery'
          type: DEPENDENT
          key: purestorage.flasharray.drive.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#PROTOCOL}'
                value: ^null$
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^-$
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage drives from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 488202a55703418d91483c6ed575c427
              name: 'Drive [{#NAME}]: Capacity'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.capacity[{#NAME}]'
              units: B
              description: 'The capacity of the {#NAME} drive.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.capacity
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: e0d18f21c935472d9505dad16b3dac74
              name: 'Drive [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} drive.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.drives[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: 26ed406b5fac46bb98ecccd975ffe8e3
              name: 'Drive [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} drive device.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.hardware.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: 272ec36f403e409c80f248e7d37ea4a9
              name: 'Drive [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} drive.'
              valuemap:
                name: 'Drive Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'healthy',
                      	'empty',
                      	'updating',
                      	'unused',
                      	'evacuating',
                      	'identifying',
                      	'unhealthy',
                      	'recovering',
                      	'unrecognized',
                      	'failed'
                      ].indexOf(value);
                      return idx !== -1 ? idx : 10;
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
              trigger_prototypes:
                - uuid: f29ae0ee3d7444a98183590045d53aa1
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>0 and last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>2 and last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>3'
                  name: 'Pure Storage FlashArray: Drive [{#NAME}]: Problem on the drive'
                  event_name: 'Pure Storage FlashArray: Drive [{#NAME}]: Drive is not healthy or is not ready for use'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Drive {#NAME} status is not "healthy", "updating", or "unused".'
                  tags:
                    - tag: scope
                      value: health
          graph_prototypes:
            - uuid: 1ef6267285804c4c8994ec197ad7eb54
              name: 'Drive [{#NAME}]: Capacity'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.drive.capacity[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.hardware.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#PROTOCOL}'
              path: $.protocol
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.drives
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 3de3fa3b233d486690f58ebb6b40cf18
          name: 'Fan discovery'
          type: DEPENDENT
          key: purestorage.flasharray.fan.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#NAME}'
                value: '.*\.FAN[0-9]+$'
          description: 'Discovery of fans from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 7ad007338fdc40a2aaf589d5e492a97e
              name: 'Fan [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.fan.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} fan.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: controller
                  value: '{#CTRL}'
            - uuid: 8e0821c8b7154bf596d54ba6917d45bc
              name: 'Fan [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.fan.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} fan.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.fan.get[{#NAME}]'
              tags:
                - tag: component
                  value: fan
                - tag: controller
                  value: '{#CTRL}'
              trigger_prototypes:
                - uuid: c2ec7d246be44c60bc86338ddee9e377
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.fan.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Fan [{#NAME}]: Fan is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Fan {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#CTRL}'
              path: $.parent
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: dbcf02647ac84d67a8bc89cb6e61cb28
          name: 'Host discovery'
          type: DEPENDENT
          key: purestorage.flasharray.host.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#GROUP}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.MATCHES}'
              - macro: '{#GROUP}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage hosts from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: cbc03265dea84c6886835ecdbba45559
              name: 'Host [{#NAME}]: Data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.drr[{#NAME}]'
              value_type: FLOAT
              description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.data_reduction
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: c96be731c08446b79bca3283a1547974
              name: 'Host [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} host.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hosts[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hosts.get
              tags:
                - tag: component
                  value: raw
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: a8c6bc9697424bd2a9908cdd9d86adc9
              name: 'Host [{#NAME}]: Bytes read per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.read_bytes.rate[{#NAME}]'
              units: Bps
              description: 'Number of bytes read from the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.output_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 7433871757cc476e9deb0fac5325e173
              name: 'Host [{#NAME}]: Read requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.read_requests.rate[{#NAME}]'
              description: 'Number of read requests processed on the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.reads_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 9b0c741b62704bb4926f2d0a9695655f
              name: 'Host [{#NAME}]: Size'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.size[{#NAME}]'
              units: B
              description: 'The physical space occupied on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.size
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: d7ddc5432f7440eeaaf8ea629b8ed366
              name: 'Host [{#NAME}]: Snapshots size'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.snapshots_size[{#NAME}]'
              units: B
              description: 'The physical space occupied by snapshots on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.snapshots
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 7744894a795c4a1d9aca45c7c02ba069
              name: 'Host [{#NAME}]: Thin provisioning'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.thin_provisioning[{#NAME}]'
              value_type: FLOAT
              units: '%'
              description: 'The percentage of sectors in the {#NAME} host volume that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.thin_provisioning
                - type: MULTIPLIER
                  parameters:
                    - '100'
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 5b53c068d79a4eb29b6e00b2501e6eae
              name: 'Host [{#NAME}]: Total data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.total_drr[{#NAME}]'
              value_type: FLOAT
              description: 'The total reduction ratio of all data on the {#NAME} host volume that has been processed by the data deduplication and compression engines.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_reduction
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 4de2e3ef869a4c859da7bbed84844d2e
              name: 'Host [{#NAME}]: Microseconds per read'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.usec_per_read[{#NAME}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O read request from the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.usec_per_read_op
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: da26e20fbd06499783569970242d5965
              name: 'Host [{#NAME}]: Microseconds per write'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.usec_per_write[{#NAME}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O write request to the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.usec_per_write_op
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: d562ce2c6b814a52bb759ff13a115f55
              name: 'Host [{#NAME}]: Used space'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.used_space[{#NAME}]'
              units: B
              description: 'The total physical space occupied by all data on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 754e824850d04560ab96ee9227823a2a
              name: 'Host [{#NAME}]: Write requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.write_requests.rate[{#NAME}]'
              description: 'Number of write requests processed on the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.writes_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 25859db2b7a046c7b8993918aedf09d0
              name: 'Host [{#NAME}]: Bytes written per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.written_bytes.rate[{#NAME}]'
              units: Bps
              description: 'Number of bytes written to the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.input_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
          graph_prototypes:
            - uuid: 077a05cbbbcf4b86a200235ef843b144
              name: 'Host [{#NAME}]: Operation latency'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.usec_per_read[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.usec_per_write[{#NAME}]'
            - uuid: 72253c19ec1441fd8474fcb2f8d59623
              name: 'Host [{#NAME}]: Read/write throughput'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.written_bytes.rate[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.read_bytes.rate[{#NAME}]'
            - uuid: 75b44e10db2c4652a3a4affeb9153c23
              name: 'Host [{#NAME}]: Requests per second'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.read_requests.rate[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.write_requests.rate[{#NAME}]'
            - uuid: 2b1554f56cae4cb0a71ac25af2443045
              name: 'Host [{#NAME}]: Space'
              graph_items:
                - drawtype: BOLD_LINE
                  color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.size[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.used_space[{#NAME}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.host.snapshots_size[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hosts.get
          lld_macro_paths:
            - lld_macro: '{#GROUP}'
              path: $.hgroup
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hosts
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 478e7c91f114410a818d94b82fd3088e
          name: 'Network interface discovery'
          type: DEPENDENT
          key: purestorage.flasharray.net_if.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IFNAME}'
                value: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#IFNAME}'
                value: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage hosts from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 02c0c2d8c86b4346949e88496d451321
              name: 'Interface [{#IFNAME}]: Gateway'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.gateway[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the IP address of the gateway for the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.gateway
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 3f1f5d598ff74ec8a99200f07a6ecefb
              name: 'Interface [{#IFNAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#IFNAME} network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.interfaces[?(@.name == "{#IFNAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.net_ifs.get
              tags:
                - tag: component
                  value: raw
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: fd384edb08c140eaa3beddd95271339a
              name: 'Interface [{#IFNAME}]: IP address'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.ip[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the IP address of the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.address
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 4de3a135121740d1aabc6505cca13a38
              name: 'Interface [{#IFNAME}]: MAC address'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.mac[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the MAC address of the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.hwaddr
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
            - uuid: 414795590ee74d75bbbdab30e1d353d6
              name: 'Interface [{#IFNAME}]: Speed'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.speed[{#IFNAME}]'
              units: Bps
              description: 'Current bandwidth of the interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.speed
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
              trigger_prototypes:
                - uuid: d2655e4b69fb4c7194efe5020247cdc8
                  expression: 'change(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])<0 and last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])>0'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '(change(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])>0 and last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}],#2)>0)'
                  name: 'Pure Storage FlashArray: Interface [{#IFNAME}]: Ethernet has changed to lower speed than it was before'
                  opdata: 'Current reported speed: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Acknowledge to close the problem manually.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: capacity
          graph_prototypes:
            - uuid: 8e3eb09b1c03460286381b8491be48c8
              name: 'Interface [{#IFNAME}]: Speed'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.net_if.speed[{#IFNAME}]'
          master_item:
            key: purestorage.flasharray.net_ifs.get
          lld_macro_paths:
            - lld_macro: '{#IFINDEX}'
              path: $.hardware.index
            - lld_macro: '{#IFNAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.interfaces
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 0abb8ee6fa884a389a20e105f6fa8709
          name: 'Pod discovery'
          type: DEPENDENT
          key: purestorage.flasharray.pod.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage pods from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 6149e63e598344e5a6d43e9ec8298e65
              name: 'Pod [{#NAME}]: Number of arrays'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.arrays[{#NAME}]'
              description: 'Number of arrays connected to the {#NAME} pod.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.arrays.length()
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.pod.get[{#NAME}]'
              tags:
                - tag: component
                  value: pod
                - tag: pod
                  value: '{#NAME}'
            - uuid: 9612332d9b2d4d0faddabe1c6bc423f8
              name: 'Pod [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} pod.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.pods[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.pods.get
              tags:
                - tag: component
                  value: raw
                - tag: pod
                  value: '{#NAME}'
            - uuid: 59e1cdbd663b41c28544ad07d0bb6671
              name: 'Pod [{#NAME}]: Promotion status'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.status[{#NAME}]'
              trends: '0'
              description: 'The current promotion status of the {#NAME} pod.'
              valuemap:
                name: 'Pod Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.promotion_status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'demoted',
                      	'promoted'
                      ].indexOf(value);
                      return idx !== -1 ? idx : 2;
              master_item:
                key: 'purestorage.flasharray.pod.get[{#NAME}]'
              tags:
                - tag: component
                  value: pod
                - tag: pod
                  value: '{#NAME}'
          master_item:
            key: purestorage.flasharray.pods.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pods
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 4750d6030dfc469996553ebe7133ca96
          name: 'Power supply discovery'
          type: DEPENDENT
          key: purestorage.flasharray.power.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#VOLT.VALUE}'
                value: ^null$
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of power supply components from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 4fc1747f0af84d6a88043ef3397a0599
              name: 'Power supply [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
            - uuid: 392364b853c84209acf4fbbc4de2fa11
              name: 'Power supply [{#NAME}]: Model'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.model[{#NAME}]'
              value_type: CHAR
              description: 'Model of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.model
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
            - uuid: 749a7f169b814078b60414c5573fb4ef
              name: 'Power supply [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
            - uuid: 22c677efa3cc446fb679cb0299ed628b
              name: 'Power supply [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} power supply component.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
              trigger_prototypes:
                - uuid: 2b4700d8728f43f09f457bffc1f0f2f6
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.power.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Power supply [{#NAME}]: Power supply is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Power supply component {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: 5c6d37614d154bf2aaf0802063affe62
              name: 'Power supply [{#NAME}]: Voltage'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.value[{#NAME}]'
              units: V
              description: 'The current voltage value of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.voltage
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
          graph_prototypes:
            - uuid: 1cf1118b11d84830804c6f97437877e5
              name: 'Power supply [{#NAME}]: Voltage'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.power.value[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#VOLT.VALUE}'
              path: $.voltage
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: a8c19abbceee47a0a1f419e4fa3e258e
          name: 'Temperature sensor discovery'
          type: DEPENDENT
          key: purestorage.flasharray.temp.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#TEMP.VALUE}'
                value: ^null$
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of temperature sensors from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 9870c41874014f4790febfa0a8c71ba6
              name: 'Sensor [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} temperature sensor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
            - uuid: cc4880c2a9ec456abc20ed20049f2c6c
              name: 'Sensor [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} temperature sensor.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.temp.get[{#NAME}]'
              tags:
                - tag: component
                  value: sensor
              trigger_prototypes:
                - uuid: bdf2eaa567dc4c758f531d5d1126bbcd
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.temp.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Sensor [{#NAME}]: Sensor is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Temperature sensor {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: e8fb42ab04fb497c8349934b3c55f11f
              name: 'Sensor [{#NAME}]: Temperature'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.value[{#NAME}]'
              units: °C
              description: 'The current temperature value of the {#NAME} sensor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.temperature
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.temp.get[{#NAME}]'
              tags:
                - tag: component
                  value: sensor
          graph_prototypes:
            - uuid: e386829dbc6a4d98920100e8011cc11f
              name: 'Sensor [{#NAME}]: Temperature'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.temp.value[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#CTRL}'
              path: $.parent
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TEMP.VALUE}'
              path: $.temperature
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          overrides:
            - name: 'Controller tag'
              step: '1'
              filter:
                conditions:
                  - macro: '{#CTRL}'
                    value: '^CT[0-9]+$'
              operations:
                - operator: REGEXP
                  value: '.*'
                  tags:
                    - tag: controller
                      value: '{#CTRL}'
            - name: 'Chassis tag'
              step: '2'
              filter:
                conditions:
                  - macro: '{#CTRL}'
                    value: '^CH[0-9]+$'
              operations:
                - operator: REGEXP
                  value: '.*'
                  tags:
                    - tag: chassis
                      value: '{#CTRL}'
        - uuid: 380cd5c61b1e4f8a97cc325b0409c98c
          name: 'Volume discovery'
          type: DEPENDENT
          key: purestorage.flasharray.volume.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage volumes from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 5b088eec81d2415687098ee9d32c0a16
              name: 'Volume [{#NAME}]: Data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.drr[{#SN}]'
              value_type: FLOAT
              description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.data_reduction
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 670ac91b3d124c17afc15f7bd8d58cd9
              name: 'Volume [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.get[{#SN}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.volumes[?(@.serial == "{#SN}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.volumes.get
              tags:
                - tag: component
                  value: raw
            - uuid: a1e03e0dcf544dfdbc9863d856c877de
              name: 'Volume [{#NAME}]: Bytes read per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.read_bytes.rate[{#SN}]'
              units: Bps
              description: 'Number of bytes read from the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.output_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 0d07b61e01bf483880c31592e242dfa3
              name: 'Volume [{#NAME}]: Read requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.read_requests.rate[{#SN}]'
              description: 'Number of read requests processed on the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.reads_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 9216a5ee2b1d4e1097a088da32b8a0fe
              name: 'Volume [{#NAME}]: Shared space'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.shared_space[{#SN}]'
              units: B
              description: 'The physical space occupied by deduplicated data on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.shared_space
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: cb34a64b417c4c439ea412419eac764a
              name: 'Volume [{#NAME}]: Size'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.size[{#SN}]'
              units: B
              description: 'The physical space occupied by the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.size
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
              trigger_prototypes:
                - uuid: ef1f2b670134476386c847a817ea1eb2
                  expression: 'last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.volume.size[{#SN}],#1)<>last(/Pure Storage FlashArray v1 by HTTP/purestorage.flasharray.volume.size[{#SN}],#2)'
                  name: 'Pure Storage FlashArray: Volume [{#NAME}]: Volume size has been changed'
                  opdata: 'Current size: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Physical space occupied by the {#NAME} volume has been changed.'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 61504507bf9a441e855d700cba0e30cc
              name: 'Volume [{#NAME}]: Snapshots size'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.snapshots_size[{#SN}]'
              units: B
              description: 'The physical space occupied by snapshots on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.snapshots
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: fa48bfa1a9a74d548f9d366242884f34
              name: 'Volume [{#NAME}]: Thin provisioning'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.thin_provisioning[{#SN}]'
              value_type: FLOAT
              units: '%'
              description: 'The percentage of sectors in the {#NAME} volume that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.thin_provisioning
                - type: MULTIPLIER
                  parameters:
                    - '100'
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 62a73c80f73d46e8b775bcf4aba136e3
              name: 'Volume [{#NAME}]: Total data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.total_drr[{#SN}]'
              value_type: FLOAT
              description: 'The total reduction ratio of all data on the {#NAME} volume that has been processed by the data deduplication and compression engines.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_reduction
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: ece36fe874a54139a91e03c8ddb4dace
              name: 'Volume [{#NAME}]: Microseconds per read'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.usec_per_read[{#SN}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O read request from the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.usec_per_read_op
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 8e2efef7df844077a6fa66234326af99
              name: 'Volume [{#NAME}]: Microseconds per write'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.usec_per_write[{#SN}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O write request to the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.usec_per_write_op
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: ada1854c77a1455d89e82c4c551fe29d
              name: 'Volume [{#NAME}]: Used space'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.used_space[{#SN}]'
              units: B
              description: 'The total physical space occupied by all data on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: df61b2bb9859455ab3eadee69249daf8
              name: 'Volume [{#NAME}]: Write requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.write_requests.rate[{#SN}]'
              description: 'Number of write requests processed on the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.writes_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 360462b1a04c4bd89296c2b5c1f951a9
              name: 'Volume [{#NAME}]: Bytes written per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.written_bytes.rate[{#SN}]'
              units: Bps
              description: 'Number of bytes written to the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.monitor.input_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
          graph_prototypes:
            - uuid: 47f783920c744bd7889e546b90082b4a
              name: 'Volume [{#NAME}]: Operation latency'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.usec_per_read[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.usec_per_write[{#SN}]'
            - uuid: 5584b1764e1c442687e920659995f71b
              name: 'Volume [{#NAME}]: Read/write throughput'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.written_bytes.rate[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.read_bytes.rate[{#SN}]'
            - uuid: 9fbcdb66f14f4111a987d1328d11f8a0
              name: 'Volume [{#NAME}]: Requests per second'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.read_requests.rate[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.write_requests.rate[{#SN}]'
            - uuid: 26e566a88462416c8f0829d47c15128d
              name: 'Volume [{#NAME}]: Space'
              graph_items:
                - drawtype: BOLD_LINE
                  color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.size[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.shared_space[{#SN}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.used_space[{#SN}]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'Pure Storage FlashArray v1 by HTTP'
                    key: 'purestorage.flasharray.volume.snapshots_size[{#SN}]'
          master_item:
            key: purestorage.flasharray.volumes.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#SN}'
              path: $.serial
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.volumes
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
      tags:
        - tag: class
          value: hardware
        - tag: class
          value: storage
        - tag: target
          value: flash-array
        - tag: target
          value: pure-storage
      macros:
        - macro: '{$PURE.FLASHARRAY.API.PASSWORD}'
          type: SECRET_TEXT
          description: 'Pure Storage FlashArray Web interface password.'
        - macro: '{$PURE.FLASHARRAY.API.TOKEN}'
          type: SECRET_TEXT
          description: 'Pure Storage FlashArray API token.'
        - macro: '{$PURE.FLASHARRAY.API.URL}'
          description: 'Pure Storage FlashArray Web interface URL.'
        - macro: '{$PURE.FLASHARRAY.API.USERNAME}'
          type: SECRET_TEXT
          description: 'Pure Storage FlashArray Web interface username.'
        - macro: '{$PURE.FLASHARRAY.API.VERSION}'
          value: '1.19'
          description: 'Pure Storage FlashArray API version.'
        - macro: '{$PURE.FLASHARRAY.CERT.EXPIRY.WARN}'
          value: '7'
          description: 'Number of days until the certificate expires.'
        - macro: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable certificates by name.'
        - macro: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable certificates by name.'
        - macro: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable controllers by index.'
        - macro: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable controllers by index.'
        - macro: '{$PURE.FLASHARRAY.DATA.TIMEOUT}'
          value: 15s
          description: 'Response timeout for the API.'
        - macro: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage drives by name.'
        - macro: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage drives by name.'
        - macro: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable fans by index.'
        - macro: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable fans by index.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable hosts by group.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable hosts by group.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable hosts by name.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable hosts by name.'
        - macro: '{$PURE.FLASHARRAY.HTTP_PROXY}'
          description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. For more details, see the documentation at https://www.zabbix.com/documentation/7.4/manual/config/items/itemtypes/http'
        - macro: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable network interfaces by name.'
        - macro: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable network interfaces by name.'
        - macro: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage pods by name.'
        - macro: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage pods by name.'
        - macro: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable power supply components by index.'
        - macro: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable power supply components by index.'
        - macro: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable temperature sensors by index.'
        - macro: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable temperature sensors by index.'
        - macro: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage volumes by name.'
        - macro: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage volumes by name.'
      dashboards:
        - uuid: b92fba854dba4f01a0aae16baadd25ec
          name: 'Pure Storage FlashArray: General'
          auto_start: 'NO'
          pages:
            - name: Array
              widgets:
                - type: item
                  name: Hostname
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        key: purestorage.flasharray.array.hostname
                    - type: INTEGER
                      name: show.0
                      value: '2'
                - type: svggraph
                  name: 'Array read/write throughput'
                  'y': '3'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array bytes read per second'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array bytes written per second'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: XGKYU
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: 'Array operation latency'
                  'y': '8'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array microseconds per read'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array microseconds per write'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: STRING
                      name: ds.2.color
                      value: F44336
                    - type: INTEGER
                      name: ds.2.fill
                      value: '0'
                    - type: STRING
                      name: ds.2.items.0
                      value: 'Array microseconds per operation'
                    - type: INTEGER
                      name: ds.2.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SSNAB
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: item
                  name: Version
                  x: '24'
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        key: purestorage.flasharray.array.version
                    - type: INTEGER
                      name: show.0
                      value: '2'
                - type: svggraph
                  name: 'Array requests per second'
                  x: '36'
                  'y': '3'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array read requests per second'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array write requests per second'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: NCUID
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: 'Array space'
                  x: '36'
                  'y': '8'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: ds.0.axisy
                      value: '1'
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array capacity'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array shared space'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: STRING
                      name: ds.2.color
                      value: F44336
                    - type: INTEGER
                      name: ds.2.fill
                      value: '0'
                    - type: STRING
                      name: ds.2.items.0
                      value: 'Array snapshots size'
                    - type: INTEGER
                      name: ds.2.width
                      value: '2'
                    - type: STRING
                      name: ds.3.color
                      value: 0080FF
                    - type: INTEGER
                      name: ds.3.fill
                      value: '0'
                    - type: STRING
                      name: ds.3.items.0
                      value: 'Array volumes size'
                    - type: INTEGER
                      name: ds.3.width
                      value: '2'
                    - type: STRING
                      name: ds.4.color
                      value: 7E57C2
                    - type: INTEGER
                      name: ds.4.fill
                      value: '0'
                    - type: STRING
                      name: ds.4.items.0
                      value: 'Array system size'
                    - type: INTEGER
                      name: ds.4.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '5'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SFPXY
                - type: item
                  name: Capacity
                  x: '48'
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        key: purestorage.flasharray.array.capacity
                    - type: INTEGER
                      name: show.0
                      value: '2'
            - name: 'Network interfaces'
              widgets:
                - type: honeycomb
                  name: 'Network interfaces'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Speed'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: interface
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: TZTHI
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Speed
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: TZTHI._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ABHBM
                    - type: INTEGER
                      name: righty
                      value: '0'
            - name: Drives
              widgets:
                - type: honeycomb
                  name: Drives
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Capacity'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: drive
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: YBMRB
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Capacity
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: YBMRB._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: IEDRA
                    - type: INTEGER
                      name: righty
                      value: '0'
            - name: Volumes
              widgets:
                - type: graphprototype
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Volume [{#NAME}]: Operation latency'
                    - type: STRING
                      name: reference
                      value: AAAAJ
                - type: graphprototype
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Volume [{#NAME}]: Requests per second'
                    - type: STRING
                      name: reference
                      value: AAAAL
                - type: graphprototype
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Volume [{#NAME}]: Read/write throughput'
                    - type: STRING
                      name: reference
                      value: AAAAK
                - type: graphprototype
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Volume [{#NAME}]: Space'
                    - type: STRING
                      name: reference
                      value: AAAAM
            - name: Hosts
              widgets:
                - type: graphprototype
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Host [{#NAME}]: Operation latency'
                    - type: STRING
                      name: reference
                      value: AAAAF
                - type: graphprototype
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Host [{#NAME}]: Requests per second'
                    - type: STRING
                      name: reference
                      value: AAAAH
                - type: graphprototype
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Host [{#NAME}]: Read/write throughput'
                    - type: STRING
                      name: reference
                      value: AAAAG
                - type: graphprototype
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v1 by HTTP'
                        name: 'Host [{#NAME}]: Space'
                    - type: STRING
                      name: reference
                      value: AAAAI
            - name: Sensors
              widgets:
                - type: honeycomb
                  name: Fans
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: items.0
                      value: '*Status'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: fan
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: YQLGC
                    - type: INTEGER
                      name: show.0
                      value: '1'
                    - type: STRING
                      name: thresholds.0.color
                      value: 26A69A
                    - type: STRING
                      name: thresholds.0.threshold
                      value: '0'
                    - type: STRING
                      name: thresholds.1.color
                      value: E65660
                    - type: STRING
                      name: thresholds.1.threshold
                      value: '1'
                    - type: STRING
                      name: thresholds.2.color
                      value: FCCB1D
                    - type: STRING
                      name: thresholds.2.threshold
                      value: '2'
                    - type: STRING
                      name: thresholds.3.color
                      value: 90A4AE
                    - type: STRING
                      name: thresholds.3.threshold
                      value: '3'
                    - type: STRING
                      name: thresholds.4.color
                      value: 29B6F6
                    - type: STRING
                      name: thresholds.4.threshold
                      value: '4'
                    - type: STRING
                      name: thresholds.5.color
                      value: 546E7A
                    - type: STRING
                      name: thresholds.5.threshold
                      value: '5'
                - type: honeycomb
                  name: 'Temperature sensors'
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: items.0
                      value: '*Temperature'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: sensor
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: EOKHA
                    - type: INTEGER
                      name: secondary_label_bold
                      value: '0'
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                    - type: STRING
                      name: thresholds.0.color
                      value: 26A69A
                    - type: STRING
                      name: thresholds.0.threshold
                      value: '0'
                    - type: STRING
                      name: thresholds.1.color
                      value: FFCA28
                    - type: STRING
                      name: thresholds.1.threshold
                      value: '50'
                    - type: STRING
                      name: thresholds.2.color
                      value: E65660
                    - type: STRING
                      name: thresholds.2.threshold
                      value: '70'
                - type: svggraph
                  name: 'Temperature value'
                  'y': '10'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: EOKHA._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: FDGJA
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: honeycomb
                  name: 'Power supply'
                  'y': '15'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Voltage'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: power
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: MZNPS
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Voltage
                  'y': '20'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: MZNPS._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: NGVAC
                    - type: INTEGER
                      name: righty
                      value: '0'
      valuemaps:
        - uuid: df8766d094be4b5aa569a20e9fc1e552
          name: 'Certificate Type'
          mappings:
            - value: '0'
              newvalue: self-signed
            - value: '1'
              newvalue: imported
            - value: '2'
              newvalue: other
        - uuid: 0e3d616a7682487997fcf4e756bd875a
          name: 'Connection Status'
          mappings:
            - value: '0'
              newvalue: disconnected
            - value: '1'
              newvalue: connected
            - value: '2'
              newvalue: unknown
        - uuid: 2f9f5ae3a2f14408b5fa8c0f82d3d5a6
          name: 'Controller Mode'
          mappings:
            - value: '0'
              newvalue: 'not present'
            - value: '1'
              newvalue: offline
            - value: '2'
              newvalue: primary
            - value: '3'
              newvalue: secondary
            - value: '4'
              newvalue: unknown
        - uuid: 05c72722f9f9460291f50d3663161716
          name: 'Controller Status'
          mappings:
            - value: '0'
              newvalue: 'not ready'
            - value: '1'
              newvalue: ready
            - value: '2'
              newvalue: updating
            - value: '3'
              newvalue: unknown
        - uuid: 00a977f4cb4d4962aeae7124e63f460e
          name: 'Drive Status'
          mappings:
            - value: '0'
              newvalue: healthy
            - value: '1'
              newvalue: empty
            - value: '2'
              newvalue: updating
            - value: '3'
              newvalue: unused
            - value: '4'
              newvalue: evacuating
            - value: '5'
              newvalue: identifying
            - value: '6'
              newvalue: unhealthy
            - value: '7'
              newvalue: recovering
            - value: '8'
              newvalue: unrecognized
            - value: '9'
              newvalue: failed
        - uuid: 788e2982fbd5478da2a4f94e46031439
          name: 'Hardware Status'
          mappings:
            - value: '0'
              newvalue: ok
            - value: '1'
              newvalue: critical
            - value: '2'
              newvalue: degraded
            - value: '3'
              newvalue: device_off
            - value: '4'
              newvalue: identifying
            - value: '5'
              newvalue: not_installed
            - value: '6'
              newvalue: unknown
        - uuid: 950c9c6b81e042938ca464a84a57b662
          name: 'Pod Status'
          mappings:
            - value: '0'
              newvalue: demoted
            - value: '1'
              newvalue: promoted
            - value: '2'
              newvalue: unknown
        - uuid: fe5ac2914b2f46fbbd0516e3ee0959bc
          name: 'Service Status'
          mappings:
            - value: '0'
              newvalue: disabled
            - value: '1'
              newvalue: enabled
            - value: '2'
              newvalue: unknown
    - uuid: 44990575121d4798b9e10520604c786c
      template: 'Pure Storage FlashArray v2 by HTTP'
      name: 'Pure Storage FlashArray v2 by HTTP'
      description: |
        Setup:
        1. Create a host for the Pure Storage FlashArray device and assign to it the "Pure Storage FlashArray v2 by HTTP" template.
        2. Enter your API token from the Purity//FA web interface into the {$PURE.FLASHARRAY.API.TOKEN} macro.
        3. Set your Purity//FA web interface URL as the {$PURE.FLASHARRAY.API.URL} macro value.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback.
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-1
      groups:
        - name: Templates/SAN
      items:
        - uuid: 84bba6c063984124925eaf8eea874ade
          name: 'Critical alerts'
          type: DEPENDENT
          key: purestorage.flasharray.alert.critical
          description: 'Number of active alerts in the web interface of Pure Storage FlashArray with a severity level of Critical.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(@.severity == "critical")].length()'
          master_item:
            key: purestorage.flasharray.alert.get
          tags:
            - tag: component
              value: alerts
          triggers:
            - uuid: a56746a2863b4615ab0ed53f9396533d
              expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.alert.critical)>0'
              name: 'Pure Storage FlashArray: Critical alerts have been detected'
              opdata: 'Alerts number: {ITEM.LASTVALUE1}'
              priority: HIGH
              description: 'Recommended to refer to the Pure Storage FlashArray web interface to check the alert details.'
              tags:
                - tag: scope
                  value: notice
        - uuid: 18eac68344f94746bccdce0a070f89fa
          name: 'Alerts data item errors'
          type: DEPENDENT
          key: purestorage.flasharray.alert.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from alert data retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.alert.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 35cfac4bfa9a41c9bf61129d212cee27
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.alert.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get alerts data'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get alert data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: e4487e51d7634eb49e8af75ed6536379
          name: 'Get alerts data'
          type: DEPENDENT
          key: purestorage.flasharray.alert.get
          history: '0'
          value_type: TEXT
          description: 'Collects alert data from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	alerts = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	alerts = getHttpData(
                  		url + 'api/' + version + '/alerts'
                  	).filter(function (item) {
                  		if (item['state'] == 'open') {
                  			return true;
                  		}
                  		return false;
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'alerts': alerts,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 8d64afad1936495283b3afe15d3f7071
          name: 'Warning alerts'
          type: DEPENDENT
          key: purestorage.flasharray.alert.warning
          description: 'Number of active alerts in the web interface of Pure Storage FlashArray with a severity level of Warning.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$..[?(@.severity == "warning")].length()'
          master_item:
            key: purestorage.flasharray.alert.get
          tags:
            - tag: component
              value: alerts
          triggers:
            - uuid: 0f53729b5ba1413b87b40a67c930db93
              expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.alert.warning)>0'
              name: 'Pure Storage FlashArray: Warning alerts have been detected'
              opdata: 'Alerts number: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Recommended to refer to the Pure Storage FlashArray web interface to check the alert details.'
              tags:
                - tag: scope
                  value: notice
        - uuid: c29f9b470c394c49abc347efb8eea82a
          name: 'Array capacity'
          type: DEPENDENT
          key: purestorage.flasharray.array.capacity
          units: B
          description: 'Total capacity of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.capacity
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 72ddad3de47d4fbfbce481395e1f5d26
          name: 'Array data reduction'
          type: DEPENDENT
          key: purestorage.flasharray.array.drr
          value_type: FLOAT
          description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the array volume.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.data_reduction
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 751e355686e74d3eb7abbba1b6671c67
          name: 'Storage array item errors'
          type: DEPENDENT
          key: purestorage.flasharray.array.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from array data retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 4ca738840e004d2cb4f7e5839fe87d86
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.array.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get storage array data'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get array data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 2e93f80f7cdb44f29c6e4365d66ad6ca
          name: 'Get array data'
          type: DEPENDENT
          key: purestorage.flasharray.array.get
          history: '0'
          value_type: TEXT
          description: 'Collects array data from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	storage_array = {},
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  			if (Array.isArray(response) & response.length > 0) {
                  				response = response[0]
                  			}
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	storage_array = getHttpData(url + 'api/' + version + '/arrays');
                  
                  	storage_array['performance'] = getHttpData(url + 'api/' + version + '/arrays/performance');
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'array': storage_array,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: fbba015500794db09c3c145adb583177
          name: 'Array hostname'
          type: DEPENDENT
          key: purestorage.flasharray.array.hostname
          value_type: CHAR
          description: 'Host name of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.name
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: ec77f6ae385b4048b24b2cb0bebd8478
          name: 'Array OS'
          type: DEPENDENT
          key: purestorage.flasharray.array.os
          value_type: CHAR
          description: 'Operating system of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.os
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: b09195afc5d944208ee3159dd66052ce
          name: 'Array parity'
          type: DEPENDENT
          key: purestorage.flasharray.array.parity
          value_type: FLOAT
          units: '%'
          description: 'The percentage of data that is protected.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.parity
            - type: MULTIPLIER
              parameters:
                - '100'
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 802501778aa743919a29ea4b02a154c4
          name: 'Array physical size'
          type: DEPENDENT
          key: purestorage.flasharray.array.physical_size
          units: B
          description: 'The total physical space occupied by system, shared space, volume, and snapshot data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.total_physical
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 4330d213f2734eb991e030fad372fc69
          name: 'Array bytes read per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.read_bytes.rate
          units: Bps
          description: 'Number of bytes read per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.read_bytes_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 2b4e83098096427398b780b57487731e
          name: 'Array read requests per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.read_requests.rate
          description: 'Number of read requests processed per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.reads_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: da5cbeda60c74159bf8eed97073e2d95
          name: 'Array shared space'
          type: DEPENDENT
          key: purestorage.flasharray.array.shared_space
          units: B
          description: 'The physical space occupied by deduplicated data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.shared
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 480438f65c4848f88c2c5ce049843c97
          name: 'Array snapshots size'
          type: DEPENDENT
          key: purestorage.flasharray.array.snapshots_size
          units: B
          description: 'The physical space occupied by snapshots.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.snapshots
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 59ba324b06694ac3980b4ece65f3b8c3
          name: 'Array system size'
          type: DEPENDENT
          key: purestorage.flasharray.array.system_size
          units: B
          description: 'The physical space occupied by internal array metadata.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.system
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 03f32ba70ddd4aaf804c4c8d3020cf3d
          name: 'Array thin provisioning'
          type: DEPENDENT
          key: purestorage.flasharray.array.thin_provisioning
          value_type: FLOAT
          units: '%'
          description: 'The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.thin_provisioning
            - type: MULTIPLIER
              parameters:
                - '100'
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 5c83ae6a3ff14f0fa2b470735afe7af0
          name: 'Array total data reduction'
          type: DEPENDENT
          key: purestorage.flasharray.array.total_drr
          value_type: FLOAT
          description: 'The total reduction ratio of all data on the array volume that has been processed by the data deduplication and compression engines.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.total_reduction
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 0131477d29fb48eebbcaf904d85025a9
          name: 'Array microseconds per operation'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_op
          units: µs
          description: 'Average local queue time in microseconds for both read and write operations.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.local_queue_usec_per_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: a7b37f7e2d104adaa1b9234559b170de
          name: 'Array microseconds per read'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_read
          units: µs
          description: 'Average time in microseconds required to process an I/O read request from the array. The average time does not include SAN time, queue time, or QoS rate limit time.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.usec_per_read_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: ed1b118a7262443fa7f4c9bc1f8ca41e
          name: 'Array microseconds per write'
          type: DEPENDENT
          key: purestorage.flasharray.array.usec_per_write
          units: µs
          description: 'Average time in microseconds required to process an I/O write request to the array. The average time does not include SAN time, queue time, or QoS rate limit time.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.usec_per_write_op
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 7a825d5aaec141f79be52dedacd025b5
          name: 'Array used space'
          type: DEPENDENT
          key: purestorage.flasharray.array.used_space
          units: B
          description: 'The total space occupied by system, shared space, volume, and snapshot data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.space.total_used
              error_handler: DISCARD_VALUE
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: a681549b875b4f56a6ecc985f1fe7752
          name: 'Array version'
          type: DEPENDENT
          key: purestorage.flasharray.array.version
          value_type: CHAR
          description: 'Version of the array.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.version
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: 9affcc3786c947fa9b7a2803740415d8
          name: 'Array write requests per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.write_requests.rate
          description: 'Number of write requests processed per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.writes_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: a1b6902f99ee40278f30646fa5a27111
          name: 'Array bytes written per second'
          type: DEPENDENT
          key: purestorage.flasharray.array.written_bytes.rate
          units: Bps
          description: 'Number of bytes written per second.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.array.performance.write_bytes_per_sec
          master_item:
            key: purestorage.flasharray.array.get
          tags:
            - tag: component
              value: array
        - uuid: bf9a63ef87674ff4a3ec07f7637435cb
          name: Authentication
          type: SCRIPT
          key: purestorage.flasharray.auth
          history: '0'
          value_type: TEXT
          params: |
            var params = JSON.parse(value),
            	request = new HttpRequest(),
            	token = '',
            	error_msg = '';
            
            function login(url) {
            	var token = '';
            	response = request.post(url);
            	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            	if (request.getStatus() !== 200) {
            		throw 'Failed to receive data: invalid response status code.';
            	}
            
            	if (response !== null) {
            		try {
            			username = JSON.parse(response).username;
            		}
            		catch (error) {
            			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
            		}
            	} else {
            		throw 'Authentication failed.';
            	}
            
            	var headers = request.getHeaders();
            	for (key in headers) {
            		if (key.toLowerCase() == 'x-auth-token') {
            			token = headers[key];
            		}
            	}
            
            	return token;
            };
            
            try {
            
            	['url', 'token', 'version'].forEach(function (field) {
            		var macro = '{$PURE.FLASHARRAY.API.' + field.toUpperCase() + '}';
            		if (typeof params[field] === 'undefined' || params[field] === macro) {
            			throw 'Please set \'' + field + '\' script input parameter to the proper ' + macro + ' macro value.';
            		}
            	});
            	['url', 'version'].forEach(function (field) {
            		if (typeof params[field] == '') {
            			throw 'Please set \'' + field + '\' script input parameter to the proper value.';
            		}
            	});
            
            	if (params.url.indexOf('http://') === -1 && params.url.indexOf('https://') === -1) {
            		params.url = 'https://' + params.url + (!params.url.endsWith('/') ? '/' : '');;
            	}
            
            	if (typeof params.http_proxy !== 'undefined' && params.http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && params.http_proxy !== '') {
            		request.setProxy(params.http_proxy);
            	}
            
            	request.addHeader('Accept: application/json');
            	request.addHeader('Content-Type: application/json');
            	request.addHeader('api-token: ' + params.token);
            	token = login(
            		params.url + 'api/' + params.version + '/login'
            	);
            
            } catch (err) {
            	error_msg = err;
            };
            
            return JSON.stringify({
            	'token': token,
            	'error': error_msg.toString()
            });
          description: |
            Pure Storage FlashArray authentication with API token usage.
            Returns a session token; it is required only once and is used for all dependent script items.
            A session will expire after 30 minutes. Check the template documentation for the details.
          timeout: '{$PURE.FLASHARRAY.DATA.TIMEOUT}'
          parameters:
            - name: http_proxy
              value: '{$PURE.FLASHARRAY.HTTP_PROXY}'
            - name: token
              value: '{$PURE.FLASHARRAY.API.TOKEN}'
            - name: url
              value: '{$PURE.FLASHARRAY.API.URL}'
            - name: version
              value: '{$PURE.FLASHARRAY.API.VERSION}'
          tags:
            - tag: component
              value: raw
        - uuid: 9c81b77d59c54158954b57b0637962f2
          name: 'Authentication item errors'
          type: DEPENDENT
          key: purestorage.flasharray.auth.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from the authentication item.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: bf2b0cb907c64c01bdaf4c26daaba937
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.auth.errors))>0'
              name: 'Pure Storage FlashArray: Authentication has failed'
              priority: AVERAGE
              description: 'An error occurred when trying to perform authentication in the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 496de11b01214b499de770299ff60364
          name: 'Certificates item errors'
          type: DEPENDENT
          key: purestorage.flasharray.certificates.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from certificate retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.certificates.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 8f8183d63de847e28abc795e6f5ae1d0
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.certificates.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get certificates'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get certificate data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 2be77186be6d416db147131c13671e50
          name: 'Get certificates'
          type: DEPENDENT
          key: purestorage.flasharray.certificates.get
          history: '0'
          value_type: TEXT
          description: 'Collects all certificates from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	certs = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	certs = getHttpData(url + 'api/' + version + '/certificates');
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'certs': certs,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: ea659408346a436c9f273f517d9edcc5
          name: 'Storage hardware item errors'
          type: DEPENDENT
          key: purestorage.flasharray.hardware.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from hardware retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.hardware.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: c5afee5d034d4f78abe061d5f1774745
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.hardware.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get hardware data'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get hardware data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: e7b56f166f234fbfae58b8dade895abd
          name: 'Get hardware data'
          type: DEPENDENT
          key: purestorage.flasharray.hardware.get
          history: '0'
          value_type: TEXT
          description: 'Collects hardware from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	drives = [],
                  	hardware = [],
                  	controllers = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	drives = getHttpData(url + 'api/' + version + '/drives');
                  
                  	controllers = getHttpData(url + 'api/' + version + '/controllers');
                  
                  	getHttpData(
                  		url + 'api/' + version + '/hardware'
                  	).forEach(function (item) {
                  		var applied = false;
                  		drives.forEach(function (drive, index) {
                  			if (drive['name'] && item['name'] && drive['name'] == item['name']) {
                  				drives[index]['hardware'] = item;
                  				applied = true;
                  			}
                  		});
                  		controllers.forEach(function (ctrl, index) {
                  			if (ctrl['name'] && item['name'] && ctrl['name'] == item['name']) {
                  				controllers[index]['hardware'] = item;
                  				applied = true;
                  			}
                  		});
                  		if (!applied) {
                  			var nameArray = item['name'].split('.');
                  			if (nameArray.length > 1) {
                  				item['parent'] = nameArray[0];
                  			}
                  			hardware.push(item);
                  		}
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'drives': drives,
                  	'hardware': hardware,
                  	'controllers': controllers,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 7b6cc9ef29bc46cd80d2cac92f1ebe0f
          name: 'Storage hosts item errors'
          type: DEPENDENT
          key: purestorage.flasharray.hosts.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from host data retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.hosts.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 6263e31c79bd4c348e5f5474e142f425
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.hosts.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get hosts'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get host data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 1ab5da19e46642fd95e38713d54b446e
          name: 'Get hosts'
          type: DEPENDENT
          key: purestorage.flasharray.hosts.get
          history: '0'
          value_type: TEXT
          description: 'Collects all hosts from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	hosts = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	hosts = getHttpData(url + 'api/' + version + '/hosts');
                  
                  	getHttpData(
                  		url + 'api/' + version + '/hosts/performance'
                  	).forEach(function (item) {
                  		hosts.forEach(function (host, index) {
                  			if (host['name'] && item['name'] && host['name'] == item['name']) {
                  				hosts[index]['performance'] = item;
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'hosts': hosts,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 48cbf0770c82449796bb648c0b1b9a72
          name: 'Storage network interfaces item errors'
          type: DEPENDENT
          key: purestorage.flasharray.net_ifs.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from network interface retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.net_ifs.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 25743805dce04ccfa21f4714cb96ec31
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.net_ifs.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get network interfaces'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get network interface data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: d4b5f78ac0a24fe3ae06a4d1e46cc613
          name: 'Get network interfaces'
          type: DEPENDENT
          key: purestorage.flasharray.net_ifs.get
          history: '0'
          value_type: TEXT
          description: 'Collects all network interfaces from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	interfaces = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	interfaces = getHttpData(url + 'api/' + version + '/network-interfaces');
                  
                  	getHttpData(
                  		url + 'api/' + version + '/network-interfaces/performance'
                  	).forEach(function (item) {
                  		interfaces.forEach(function (netif, index) {
                  			if (netif['name'] && item['name'] && netif['name'] == item['name']) {
                  				interfaces[index]['performance'] = item['eth'];
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'interfaces': interfaces,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 3dfa393c4e704ed68322366ea80f09fa
          name: 'Phone home status'
          type: DEPENDENT
          key: purestorage.flasharray.phone_home.status
          trends: '0'
          description: 'Current status of a manually-initiated phone home.'
          valuemap:
            name: Boolean
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.support.phonehome_enabled
            - type: BOOL_TO_DECIMAL
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          master_item:
            key: purestorage.flasharray.support.get
          tags:
            - tag: component
              value: support
          triggers:
            - uuid: 9f233a1e8a96439c8e82b93e44d24219
              expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.phone_home.status)=0'
              name: 'Pure Storage FlashArray: Phone Home has been disabled'
              opdata: 'Current status: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Phone Home connects to the Pure1 service and uploads logs for continuous health monitoring.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 0cb3c68298984cffb61595a8b8a949cb
          name: 'Storage pods item errors'
          type: DEPENDENT
          key: purestorage.flasharray.pods.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from pod retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.pods.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: d0c9b57785a84604893b92e0bed0c7ec
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.pods.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get pods'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get pod data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: c45d966070b840e69bf07b6946f3404c
          name: 'Get pods'
          type: DEPENDENT
          key: purestorage.flasharray.pods.get
          history: '0'
          value_type: TEXT
          description: 'Collects all pods from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	pods = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	pods = getHttpData(url + 'api/' + version + '/pods');
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'pods': pods,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: a424b8b37edd4deb8bf745f78e00e2a9
          name: 'Remote assist status'
          type: DEPENDENT
          key: purestorage.flasharray.remote_assist.status
          trends: '0'
          description: 'Status of the remote assist connection.'
          valuemap:
            name: Boolean
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.support.remote_assist_active
            - type: BOOL_TO_DECIMAL
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
          master_item:
            key: purestorage.flasharray.support.get
          tags:
            - tag: component
              value: support
          triggers:
            - uuid: 8991c7d3ca95466da03f4ac44fccb872
              expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.remote_assist.status)=1'
              name: 'Pure Storage FlashArray: RemoteAssist has been enabled'
              opdata: 'Current status: {ITEM.LASTVALUE1}'
              priority: HIGH
              description: 'Purity''s administrator-controlled RemoteAssist feature enables a Technical Support Engineer to communicate directly with the FlashArray via a secure link, effectively establishing an additional administrative session for the duration of the diagnosis and service.'
              tags:
                - tag: scope
                  value: security
        - uuid: ef6ac77724b54851b0a9316ab3ef8209
          name: 'Support information item errors'
          type: DEPENDENT
          key: purestorage.flasharray.support.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from support information retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.support.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 7bd0f901efc14b43b11809e82b6c2324
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.support.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get support information'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get support information from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 644edca046a14dd283713e37ef7d3431
          name: 'Get support information'
          type: DEPENDENT
          key: purestorage.flasharray.support.get
          history: '0'
          value_type: TEXT
          description: 'Collects support information from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	support_data = {},
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  			if (Array.isArray(response) & response.length > 0) {
                  				response = response[0]
                  			}
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	support_data = getHttpData(url + 'api/' + version + '/support');
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'support': support_data,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
        - uuid: 8a7e90cd071247f78cf017769138d811
          name: 'Storage volumes item errors'
          type: DEPENDENT
          key: purestorage.flasharray.volumes.errors
          history: 1h
          value_type: TEXT
          description: 'Collects errors from volume retrieval.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: purestorage.flasharray.volumes.get
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 86ba540265d04be4bd86103b2d67f65e
              expression: 'length(last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.volumes.errors))>0'
              name: 'Pure Storage FlashArray: There are errors in the ''Get volumes'' metric'
              priority: WARNING
              description: 'An error occurred when trying to get volume data from the Pure Storage FlashArray API.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 0e074762c4ad4cf3978b2bbc38a60d4a
          name: 'Get volumes'
          type: DEPENDENT
          key: purestorage.flasharray.volumes.get
          history: '0'
          value_type: TEXT
          description: 'Collects all volumes from the Pure Storage FlashArray API.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  try {
                  	var creds = JSON.parse(value);
                  }
                  catch (error) {
                  	throw 'Failed to parse authentication data from input value.';
                  }
                  
                  var request = new HttpRequest(),
                  	volumes = [],
                  	error_msg = '',
                  	url = '{$PURE.FLASHARRAY.API.URL}',
                  	version = '{$PURE.FLASHARRAY.API.VERSION}',
                  	http_proxy = '{$PURE.FLASHARRAY.HTTP_PROXY}';
                  
                  function getHttpData(url) {
                  	response = request.get(url);
                  	Zabbix.log(4, '[ Pure Storage API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
                  
                  	if (request.getStatus() !== 200) {
                  		throw 'Failed to receive data: invalid response status code.';
                  	}
                  
                  	if (response !== null) {
                  		try {
                  			response = JSON.parse(response)['items'];
                  		}
                  		catch (error) {
                  			throw 'Failed to parse response received from Pure Storage API. Check debug log for more information.';
                  		}
                  	}
                  
                  	if (typeof response !== 'object' || response === null) {
                  		throw 'Cannot process response data: received data is not an object.';
                  	}
                  
                  	return response;
                  };
                  
                  try {
                  
                  	['token'].forEach(function (field) {
                  		if (creds[field] === null || creds[field] == '' || typeof creds[field] === 'undefined') {
                  			throw 'Unexpected session token value has been received'
                  			+ ((typeof creds.error !== 'undefined' && creds.error != '') ? ': ' + creds.error : '');
                  		}
                  	});
                  
                  	if (url === '{' + '$PURE.FLASHARRAY.API.URL}') {
                  		throw 'Please change {' + '$PURE.FLASHARRAY.API.URL} macro to the proper value.';
                  	}
                  
                  	if (url.indexOf('http://') === -1 && url.indexOf('https://') === -1) {
                  		url = 'https://' + url + (!url.endsWith('/') ? '/' : '');
                  	}
                  
                  	if (http_proxy !== '{' + '$PURE.FLASHARRAY.HTTP_PROXY}' && http_proxy !== '') {
                  		request.setProxy(http_proxy);
                  	}
                  
                  	request.addHeader('x-auth-token: ' + creds.token);
                  	request.addHeader('Accept: application/json');
                  
                  	volumes = getHttpData(url + 'api/' + version + '/volumes');
                  
                  	getHttpData(
                  		url + 'api/' + version + '/volumes/performance'
                  	).forEach(function (item) {
                  		volumes.forEach(function (volume, index) {
                  			if (volume['name'] && item['name'] && volume['name'] == item['name']) {
                  				volumes[index]['performance'] = item;
                  			}
                  		});
                  	});
                  
                  } catch (err) {
                  	error_msg = err;
                  };
                  
                  return JSON.stringify({
                  	'volumes': volumes,
                  	'error': error_msg.toString()
                  });
          master_item:
            key: purestorage.flasharray.auth
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: a277352827a8409888e29dcc3681fcf1
          name: 'Certificate discovery'
          type: DEPENDENT
          key: purestorage.flasharray.cert.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of certificates from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 05f7ad146f2e49c986dac2e53f334dcc
              name: 'Certificate [{#NAME}]: Common name'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.cn[{#NAME}]'
              value_type: CHAR
              description: 'The common name field listed in the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.common_name
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: a0cc18565bd84d7ea0af61d655642d67
              name: 'Certificate [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.certs[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.certificates.get
              tags:
                - tag: component
                  value: raw
                - tag: type
                  value: '{#TYPE}'
            - uuid: 1094b7082f2a4a09911efe89f179ac72
              name: 'Certificate [{#NAME}]: Issued by'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.issued_by[{#NAME}]'
              value_type: CHAR
              description: 'Indicates the authority or organization that issued the {#NAME} certificate, typically including information such as the name of the Certificate Authority (CA) and its digital signature.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.issued_by
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: bed40f78214b4e33b285a863504a7685
              name: 'Certificate [{#NAME}]: Issued to'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.issued_to[{#NAME}]'
              value_type: CHAR
              description: 'Indicates the entity which holds the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.issued_to
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: b9ed0b415de84ca6876814c64cac3b01
              name: 'Certificate [{#NAME}]: Valid from'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.valid_from[{#NAME}]'
              units: unixtime
              description: 'Indicates the date and time when the {#NAME} certificate takes effect.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.valid_from
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
            - uuid: 628acb8886f24ef8b016ab0b86e780ed
              name: 'Certificate [{#NAME}]: Valid to'
              type: DEPENDENT
              key: 'purestorage.flasharray.cert.valid_to[{#NAME}]'
              units: unixtime
              description: 'Indicates the expiration date and time of the {#NAME} certificate.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.valid_to
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'purestorage.flasharray.cert.get[{#NAME}]'
              tags:
                - tag: component
                  value: certificate
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: 85724fcc67f84a9a9634ac052e58062e
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.cert.valid_to[{#NAME}]) > 0 and (last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.cert.valid_to[{#NAME}]) - now()) / 86400 < {$PURE.FLASHARRAY.CERT.EXPIRY.WARN}'
                  name: 'Pure Storage FlashArray: Certificate [{#NAME}]: SSL certificate expires soon'
                  event_name: 'Pure Storage FlashArray: Certificate [{#NAME}]: SSL certificate expires soon (less than {$PURE.FLASHARRAY.CERT.EXPIRY.WARN} days)'
                  opdata: 'Expiration date: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Consider reissuing and replacing the {#NAME} certificate.'
                  tags:
                    - tag: scope
                      value: notice
          master_item:
            key: purestorage.flasharray.certificates.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.status
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.certs
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 10b6db10a6aa491c805bf404bb50e890
          name: 'Controller discovery'
          type: DEPENDENT
          key: purestorage.flasharray.ctrl.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^array_controller$
          description: 'Discovery of controllers from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 4689b7a160c6440aa2b8dc8be57e2552
              name: 'Controller [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.controllers[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: e60eb4842e8642e2ba64604ae762ffdd
              name: 'Controller [{#NAME}]: Model'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.model[{#NAME}]'
              value_type: CHAR
              description: 'Model of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.model
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: fd1b9afb97854beca2505e47e7fe8eda
              name: 'Controller [{#NAME}]: Mode'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.mode[{#NAME}]'
              trends: '0'
              description: 'The current mode of the {#NAME} controller.'
              valuemap:
                name: 'Controller Mode'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.mode
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'not present',
                      	'offline',
                      	'primary',
                      	'secondary',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 4;
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: 2c47ef8f79394ffdb0927de83b46d35d
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.ctrl.mode[{#NAME}],#1)<>last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.ctrl.mode[{#NAME}],#2)'
                  name: 'Pure Storage FlashArray: Controller [{#NAME}]: Mode has been changed'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'The mode of the {#NAME} controller has changed.'
                  tags:
                    - tag: scope
                      value: health
            - uuid: c6f73ffb3b1d4cf1836d1428897b47d7
              name: 'Controller [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.hardware.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
            - uuid: 05db5a7c7bd5451caca3d039122d6464
              name: 'Controller [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} controller.'
              valuemap:
                name: 'Controller Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'not ready',
                      	'ready',
                      	'updating',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 3;
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
              trigger_prototypes:
                - uuid: 42a734f18ddb415d9417beeef8526d1d
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.ctrl.status[{#NAME}])<>1 and last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.ctrl.status[{#NAME}])<>2'
                  name: 'Pure Storage FlashArray: Controller [{#NAME}]: Controller is not ready'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Controller {#NAME} status is not "ready" or "updating".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: a61f7b45f4874f9e84287d88fadd1c64
              name: 'Controller [{#NAME}]: Version'
              type: DEPENDENT
              key: 'purestorage.flasharray.ctrl.version[{#NAME}]'
              value_type: CHAR
              description: 'Version of the {#NAME} controller.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.version
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.ctrl.get[{#NAME}]'
              tags:
                - tag: component
                  value: controller
                - tag: controller
                  value: '{#NAME}'
                - tag: type
                  value: '{#TYPE}'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.hardware.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.controllers
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 08358b801db24ef8ab89bc14fed65ee1
          name: 'Drive discovery'
          type: DEPENDENT
          key: purestorage.flasharray.drive.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#PROTOCOL}'
                value: ^null$
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^-$
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage drives from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 00c66aeeacba4d0599986597734d8142
              name: 'Drive [{#NAME}]: Capacity'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.capacity[{#NAME}]'
              units: B
              description: 'The capacity of the {#NAME} drive.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.capacity
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: 5857cfccc486417ab32f000f0bd68a65
              name: 'Drive [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} drive.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.drives[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: a374a674bf8143b5b55b518765325755
              name: 'Drive [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} drive device.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.hardware.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
            - uuid: 6681fcb1153d41bd9868b8191c3b8c27
              name: 'Drive [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.drive.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} drive.'
              valuemap:
                name: 'Drive Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'healthy',
                      	'empty',
                      	'updating',
                      	'unused',
                      	'evacuating',
                      	'identifying',
                      	'unhealthy',
                      	'recovering',
                      	'unrecognized',
                      	'failed'
                      ].indexOf(value);
                      return idx !== -1 ? idx : 10;
              master_item:
                key: 'purestorage.flasharray.drive.get[{#NAME}]'
              tags:
                - tag: component
                  value: drive
                - tag: drive
                  value: '{#TYPE}'
                - tag: protocol
                  value: '{#PROTOCOL}'
              trigger_prototypes:
                - uuid: f635d481852d4c5e8ba12e7091048f11
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>0 and last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>2 and last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.drive.status[{#NAME}])<>3'
                  name: 'Pure Storage FlashArray: Drive [{#NAME}]: Problem on the drive'
                  event_name: 'Pure Storage FlashArray: Drive [{#NAME}]: Drive is not healthy or is not ready for use'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Drive {#NAME} status is not "healthy", "updating", or "unused".'
                  tags:
                    - tag: scope
                      value: health
          graph_prototypes:
            - uuid: 9ebe1a25885a4cc2a09ce54e512bf9df
              name: 'Drive [{#NAME}]: Capacity'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.drive.capacity[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.hardware.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#PROTOCOL}'
              path: $.protocol
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.drives
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: f712c0d8bfa84a4291db06c04d8d4232
          name: 'Fan discovery'
          type: DEPENDENT
          key: purestorage.flasharray.fan.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^cooling$
          description: 'Discovery of fans from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 132c553838074d6680daa792453508b6
              name: 'Fan [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.fan.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} fan.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
                - tag: controller
                  value: '{#CTRL}'
            - uuid: a4cf2e954a7d481a8fca45ac6c9798c9
              name: 'Fan [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.fan.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} fan.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.fan.get[{#NAME}]'
              tags:
                - tag: component
                  value: fan
                - tag: controller
                  value: '{#CTRL}'
              trigger_prototypes:
                - uuid: 04a080d1563f4b50972fcb8f3bf92d66
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.fan.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Fan [{#NAME}]: Fan is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Fan {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#CTRL}'
              path: $.parent
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 350738d6dba64532a7b811efb1e14114
          name: 'Host discovery'
          type: DEPENDENT
          key: purestorage.flasharray.host.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#GROUP}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.MATCHES}'
              - macro: '{#GROUP}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage hosts from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: fb4db194933641339a733194b5e1f155
              name: 'Host [{#NAME}]: Data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.drr[{#NAME}]'
              value_type: FLOAT
              description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.data_reduction
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: f3411ac68df2450a9161ae19ed53fa74
              name: 'Host [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} host.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hosts[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hosts.get
              tags:
                - tag: component
                  value: raw
            - uuid: 392ba789536a49da97fa75a5773d2998
              name: 'Host [{#NAME}]: Bytes read per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.read_bytes.rate[{#NAME}]'
              units: Bps
              description: 'Number of bytes read from the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.read_bytes_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: a6fa85593cf3461787391586023bf25d
              name: 'Host [{#NAME}]: Read requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.read_requests.rate[{#NAME}]'
              description: 'Number of read requests processed on the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.reads_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 483e877a15e544cb934e3f9fa83a730e
              name: 'Host [{#NAME}]: Total space provisioned'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.size[{#NAME}]'
              units: B
              description: 'The total provisioned space on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_provisioned
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 81148bd701a2428b89ab01bd1cf2df5d
              name: 'Host [{#NAME}]: Snapshots size'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.snapshots_size[{#NAME}]'
              units: B
              description: 'The physical space occupied by snapshots on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.snapshots
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 6a02fe11f65a4e518213619a943862a2
              name: 'Host [{#NAME}]: Thin provisioning'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.thin_provisioning[{#NAME}]'
              value_type: FLOAT
              units: '%'
              description: 'The percentage of sectors in the {#NAME} host volume that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.thin_provisioning
                - type: MULTIPLIER
                  parameters:
                    - '100'
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: c93b4fae2b8944648cba49bddc19a90b
              name: 'Host [{#NAME}]: Total data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.total_drr[{#NAME}]'
              value_type: FLOAT
              description: 'The total reduction ratio of all data on the {#NAME} host volume that has been processed by the data deduplication and compression engines.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_reduction
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: a801a47f6c024b149f9a7ec6219f0bb7
              name: 'Host [{#NAME}]: Microseconds per read'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.usec_per_read[{#NAME}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O read request from the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.usec_per_read_op
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 087a2758e25349b38e2fb6bed5754ec1
              name: 'Host [{#NAME}]: Microseconds per write'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.usec_per_write[{#NAME}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O write request to the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.usec_per_write_op
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 4d7cfbf60b374265aa5434af2292faf3
              name: 'Host [{#NAME}]: Used space provisioned'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.used_provisioned[{#NAME}]'
              units: B
              description: 'The provisioned space occupied on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.used_provisioned
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: 1a03696ee45a42e8a47ae0dc93c5ef0c
              name: 'Host [{#NAME}]: Used space'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.used_space[{#NAME}]'
              units: B
              description: 'The total physical space occupied by all data on the {#NAME} host volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_used
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: f49de03d39eb48968476a49f50aafd98
              name: 'Host [{#NAME}]: Write requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.write_requests.rate[{#NAME}]'
              description: 'Number of write requests processed on the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.writes_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
            - uuid: a7d478d4eda84ed68a647f0dfe457133
              name: 'Host [{#NAME}]: Bytes written per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.host.written_bytes.rate[{#NAME}]'
              units: Bps
              description: 'Number of bytes written to the {#NAME} host volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.write_bytes_per_sec
              master_item:
                key: 'purestorage.flasharray.host.get[{#NAME}]'
              tags:
                - tag: component
                  value: host
                - tag: host
                  value: '{#NAME}'
                - tag: host_group
                  value: '{#GROUP}'
          graph_prototypes:
            - uuid: b6946844871941cfa2b29bb12ef27d7c
              name: 'Host [{#NAME}]: Operation latency'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.usec_per_read[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.usec_per_write[{#NAME}]'
            - uuid: 38aeb1f11b234829be5bc07572f52c9f
              name: 'Host [{#NAME}]: Read/write throughput'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.written_bytes.rate[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.read_bytes.rate[{#NAME}]'
            - uuid: 9ad04f712e1d4020bc217845142fef43
              name: 'Host [{#NAME}]: Requests per second'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.read_requests.rate[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.write_requests.rate[{#NAME}]'
            - uuid: f032b259f4e6471fa8381cdd8b7ba0d7
              name: 'Host [{#NAME}]: Space'
              graph_items:
                - drawtype: BOLD_LINE
                  color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.size[{#NAME}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.used_space[{#NAME}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.host.snapshots_size[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hosts.get
          lld_macro_paths:
            - lld_macro: '{#GROUP}'
              path: $.host_group.name
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hosts
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 3876122f047c4299a08cc7b259c20245
          name: 'Network interface discovery'
          type: DEPENDENT
          key: purestorage.flasharray.net_if.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IFNAME}'
                value: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#IFNAME}'
                value: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#IFSTATUS}'
                value: ^true$
          description: 'Discovery of storage hosts from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: ecda1262ed1d416a9a1b4f861aa2891b
              name: 'Interface [{#IFNAME}]: Gateway'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.gateway[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the IP address of the gateway for the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.eth.gateway
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
                - tag: type
                  value: '{#IFTYPE}'
            - uuid: 81113ca1f6f34e51b8e1565f0e791e80
              name: 'Interface [{#IFNAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#IFNAME} network interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.interfaces[?(@.name == "{#IFNAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.net_ifs.get
              tags:
                - tag: component
                  value: raw
                - tag: interface
                  value: '{#IFNAME}'
                - tag: type
                  value: '{#IFTYPE}'
            - uuid: af414daaa51f426d975e609b93980f23
              name: 'Interface [{#IFNAME}]: IP address'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.ip[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the IP address of the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.eth.address
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
                - tag: type
                  value: '{#IFTYPE}'
            - uuid: 952d14c340c64e518f663508195e26fd
              name: 'Interface [{#IFNAME}]: MAC address'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.mac[{#IFNAME}]'
              value_type: CHAR
              description: 'Represents the MAC address of the {#IFNAME} interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.eth.mac_address
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
                - tag: type
                  value: '{#IFTYPE}'
            - uuid: 6537197c7d384ea59515fb5c7b50ffca
              name: 'Interface [{#IFNAME}]: Speed'
              type: DEPENDENT
              key: 'purestorage.flasharray.net_if.speed[{#IFNAME}]'
              units: Bps
              description: 'Current bandwidth of the interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.speed
              master_item:
                key: 'purestorage.flasharray.net_if.get[{#IFNAME}]'
              tags:
                - tag: component
                  value: interface
                - tag: interface
                  value: '{#IFNAME}'
                - tag: type
                  value: '{#IFTYPE}'
              trigger_prototypes:
                - uuid: 88475f72064649679937d01421dabb1d
                  expression: 'change(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])<0 and last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])>0'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '(change(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}])>0 and last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.net_if.speed[{#IFNAME}],#2)>0)'
                  name: 'Pure Storage FlashArray: Interface [{#IFNAME}]: Ethernet has changed to lower speed than it was before'
                  opdata: 'Current reported speed: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Acknowledge to close the problem manually.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: capacity
          graph_prototypes:
            - uuid: 803097c68d004c5c8f66bb32688239aa
              name: 'Interface [{#IFNAME}]: Speed'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.net_if.speed[{#IFNAME}]'
          master_item:
            key: purestorage.flasharray.net_ifs.get
          lld_macro_paths:
            - lld_macro: '{#IFNAME}'
              path: $.name
            - lld_macro: '{#IFSTATUS}'
              path: $.enabled
            - lld_macro: '{#IFTYPE}'
              path: $.interface_type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.interfaces
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 5cde7579e8514748bddfeb1f662e0012
          name: 'Pod discovery'
          type: DEPENDENT
          key: purestorage.flasharray.pod.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage pods from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: c5ba49fc925144b18696a91b21b731eb
              name: 'Pod [{#NAME}]: Number of arrays'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.arrays[{#NAME}]'
              description: 'Number of arrays connected to the {#NAME} pod.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.array_count
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.pod.get[{#NAME}]'
              tags:
                - tag: component
                  value: pod
                - tag: pod
                  value: '{#NAME}'
            - uuid: f22437a516bb4598aa2524318213ed46
              name: 'Pod [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} pod.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.pods[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.pods.get
              tags:
                - tag: component
                  value: raw
                - tag: pod
                  value: '{#NAME}'
            - uuid: 3aa31165ce734f14b2e9c66eaf908262
              name: 'Pod [{#NAME}]: Quota'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.quota[{#NAME}]'
              units: B
              description: 'The quota limit of the {#NAME} pod.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.quota_limit
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.pod.get[{#NAME}]'
              tags:
                - tag: component
                  value: pod
                - tag: pod
                  value: '{#NAME}'
            - uuid: 2e8b1130f2814fda958e2793a25493b4
              name: 'Pod [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.pod.status[{#NAME}]'
              trends: '0'
              description: 'The current promotion status of the {#NAME} pod.'
              valuemap:
                name: 'Pod Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.promotion_status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'demoted',
                      	'promoted'
                      ].indexOf(value);
                      return idx !== -1 ? idx : 2;
              master_item:
                key: 'purestorage.flasharray.pod.get[{#NAME}]'
              tags:
                - tag: component
                  value: pod
                - tag: pod
                  value: '{#NAME}'
          graph_prototypes:
            - uuid: 10ce99eab47a425dbf4ffd7a11dec3a0
              name: 'Pod [{#NAME}]: Quota'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.pod.quota[{#NAME}]'
          master_item:
            key: purestorage.flasharray.pods.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.pods
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: 9ad76b9853f940c6890745f2a0091ad0
          name: 'Power supply discovery'
          type: DEPENDENT
          key: purestorage.flasharray.power.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^power_supply$
          description: 'Discovery of power supply components from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 6e10b14864134657985453c78d07751d
              name: 'Power supply [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
            - uuid: 0916fbffa25c4a3290bcf3f19eb1a42c
              name: 'Power supply [{#NAME}]: Model'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.model[{#NAME}]'
              value_type: CHAR
              description: 'Model of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.model
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
            - uuid: 6d720dd96a014705a7f34fb595ccdece
              name: 'Power supply [{#NAME}]: Serial number'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.serial[{#NAME}]'
              value_type: CHAR
              description: 'Serial number of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.serial
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
            - uuid: a6364f40204545c1aeb9591b032632b5
              name: 'Power supply [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} power supply component.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
              trigger_prototypes:
                - uuid: 9288ebad9d474acdb26897ff197a5776
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.power.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Power supply [{#NAME}]: Power supply is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Power supply component {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: 4fc0212332e44824b15627e436eaba15
              name: 'Power supply [{#NAME}]: Voltage'
              type: DEPENDENT
              key: 'purestorage.flasharray.power.value[{#NAME}]'
              units: V
              description: 'The current voltage value of the {#NAME} power supply component.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.voltage
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.power.get[{#NAME}]'
              tags:
                - tag: component
                  value: power
          graph_prototypes:
            - uuid: e1610483759a41cea3b9c4adf3474399
              name: 'Power supply [{#NAME}]: Voltage'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.power.value[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TYPE}'
              path: $.type
            - lld_macro: '{#VOLT.VALUE}'
              path: $.voltage
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
        - uuid: d5378b0c37c446cdba79238ce8703044
          name: 'Temperature sensor discovery'
          type: DEPENDENT
          key: purestorage.flasharray.temp.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.MATCHES}'
              - macro: '{#INDEX}'
                value: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#TYPE}'
                value: ^temp_sensor$
          description: 'Discovery of temperature sensors from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: 030868b143d94729bc3e696cd40c8009
              name: 'Sensor [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.get[{#NAME}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} temperature sensor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.hardware[?(@.name == "{#NAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.hardware.get
              tags:
                - tag: component
                  value: raw
            - uuid: 1b57e227c3c64306903c23b989b0f844
              name: 'Sensor [{#NAME}]: Status'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.status[{#NAME}]'
              trends: '0'
              description: 'The current status of the {#NAME} temperature sensor.'
              valuemap:
                name: 'Hardware Status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - |
                      const idx = [
                      	'ok',
                      	'critical',
                      	'degraded',
                      	'device_off',
                      	'identifying',
                      	'not_installed',
                      ].indexOf(value);
                      return idx !== -1 ? idx : 6;
              master_item:
                key: 'purestorage.flasharray.temp.get[{#NAME}]'
              tags:
                - tag: component
                  value: sensor
              trigger_prototypes:
                - uuid: 04b761e9af01443ca2541828bb558431
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.temp.status[{#NAME}])<>0'
                  name: 'Pure Storage FlashArray: Sensor [{#NAME}]: Sensor is not healthy'
                  opdata: 'Current status: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'Temperature sensor {#NAME} status is not "ok".'
                  tags:
                    - tag: scope
                      value: health
            - uuid: 38030ba18a094d1e9a88ac2d3b0797ce
              name: 'Sensor [{#NAME}]: Temperature'
              type: DEPENDENT
              key: 'purestorage.flasharray.temp.value[{#NAME}]'
              units: °C
              description: 'The current temperature value of the {#NAME} sensor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.temperature
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.temp.get[{#NAME}]'
              tags:
                - tag: component
                  value: sensor
          graph_prototypes:
            - uuid: 9503fc3b89674c7185f162fe150ed2a1
              name: 'Sensor [{#NAME}]: Temperature'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.temp.value[{#NAME}]'
          master_item:
            key: purestorage.flasharray.hardware.get
          lld_macro_paths:
            - lld_macro: '{#CTRL}'
              path: $.parent
            - lld_macro: '{#INDEX}'
              path: $.index
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#TEMP.VALUE}'
              path: $.temperature
            - lld_macro: '{#TYPE}'
              path: $.type
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.hardware
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          overrides:
            - name: 'Controller tag'
              step: '1'
              filter:
                conditions:
                  - macro: '{#CTRL}'
                    value: '^CT[0-9]+$'
              operations:
                - operator: REGEXP
                  value: '.*'
                  tags:
                    - tag: controller
                      value: '{#CTRL}'
            - name: 'Chassis tag'
              step: '2'
              filter:
                conditions:
                  - macro: '{#CTRL}'
                    value: '^CH[0-9]+$'
              operations:
                - operator: REGEXP
                  value: '.*'
                  tags:
                    - tag: chassis
                      value: '{#CTRL}'
        - uuid: ba4d4650536142e3a810c33362117dd2
          name: 'Volume discovery'
          type: DEPENDENT
          key: purestorage.flasharray.volume.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of storage volumes from the Pure Storage FlashArray API.'
          item_prototypes:
            - uuid: ba307ad50abc4edb8387a10bf10a216e
              name: 'Volume [{#NAME}]: Data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.drr[{#SN}]'
              value_type: FLOAT
              description: 'The data reduction ratio (DRR) represents the efficiency of data reduction techniques such as compression and deduplication for the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.data_reduction
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: d89e5ac32300482791f566ada1ba9640
              name: 'Volume [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.get[{#SN}]'
              history: '0'
              value_type: TEXT
              description: 'Collects data about the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.volumes[?(@.serial == "{#SN}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: purestorage.flasharray.volumes.get
              tags:
                - tag: component
                  value: raw
            - uuid: f19e37ab55b74659bf687de050a0d39e
              name: 'Volume [{#NAME}]: Provisioned space'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.provisioned[{#SN}]'
              units: B
              description: 'The total provisioned space on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_provisioned
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 950e7e53d9cc4edb88b64b5a2d2bb21c
              name: 'Volume [{#NAME}]: Bytes read per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.read_bytes.rate[{#SN}]'
              units: Bps
              description: 'Number of bytes read from the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.read_bytes_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: b17ffe15e5c64c8a974374fb3a92ded0
              name: 'Volume [{#NAME}]: Read requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.read_requests.rate[{#SN}]'
              description: 'Number of read requests processed on the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.reads_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: af4a7394ae2a4580863b5ebb21908a76
              name: 'Volume [{#NAME}]: Shared space'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.shared_space[{#SN}]'
              units: B
              description: 'The physical space occupied by deduplicated data on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.shared
                - type: NOT_MATCHES_REGEX
                  parameters:
                    - ^null$
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 06a10478a54b415198055ff1f07f3aaa
              name: 'Volume [{#NAME}]: Size'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.size[{#SN}]'
              units: B
              description: 'The physical space occupied by the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.provisioned
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
              trigger_prototypes:
                - uuid: df02c79ca98240408376ab80921e6a32
                  expression: 'last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.volume.size[{#SN}],#1)<>last(/Pure Storage FlashArray v2 by HTTP/purestorage.flasharray.volume.size[{#SN}],#2)'
                  name: 'Pure Storage FlashArray: Volume [{#NAME}]: Volume size has been changed'
                  opdata: 'Current size: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Physical space occupied by the {#NAME} volume has been changed.'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: f98e3831e39e47d489336d64d4c843c2
              name: 'Volume [{#NAME}]: Snapshots size'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.snapshots_size[{#SN}]'
              units: B
              description: 'The physical space occupied by snapshots on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.snapshots
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 01588d46fa944fe8b9d12f1673a3cc1d
              name: 'Volume [{#NAME}]: Thin provisioning'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.thin_provisioning[{#SN}]'
              value_type: FLOAT
              units: '%'
              description: 'The percentage of sectors in the {#NAME} volume that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.thin_provisioning
                - type: MULTIPLIER
                  parameters:
                    - '100'
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: f5c9e9b3d3ef46d0a3ed9f2a27cb6c4b
              name: 'Volume [{#NAME}]: Total data reduction'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.total_drr[{#SN}]'
              value_type: FLOAT
              description: 'The total reduction ratio of all data on the {#NAME} volume that has been processed by the data deduplication and compression engines.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_reduction
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: a94cf17619b147db8d4533dafe865eb0
              name: 'Volume [{#NAME}]: Microseconds per read'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.usec_per_read[{#SN}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O read request from the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.usec_per_read_op
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 108613219eb748c388c3d1a1f59c073e
              name: 'Volume [{#NAME}]: Microseconds per write'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.usec_per_write[{#SN}]'
              units: µs
              description: 'Average time in microseconds required to process an I/O write request to the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.usec_per_write_op
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 714127b92f3f49ac9c91e2c8b34e7db1
              name: 'Volume [{#NAME}]: Used provisioned'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.used_provisioned[{#SN}]'
              units: B
              description: 'The total provisioned space occupied by all data on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.used_provisioned
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: 68d0c19d00a147dd8f005e93c4d6deb0
              name: 'Volume [{#NAME}]: Used space'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.used_space[{#SN}]'
              units: B
              description: 'The total physical space occupied by all data on the {#NAME} volume.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.space.total_used
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: a1562e3e8fb7443cac236755ead8a811
              name: 'Volume [{#NAME}]: Write requests per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.write_requests.rate[{#SN}]'
              description: 'Number of write requests processed on the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.writes_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
            - uuid: d88ebbbf982c4d678bc4298c7bd445b1
              name: 'Volume [{#NAME}]: Bytes written per second'
              type: DEPENDENT
              key: 'purestorage.flasharray.volume.written_bytes.rate[{#SN}]'
              units: Bps
              description: 'Number of bytes written to the {#NAME} volume per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.performance.write_bytes_per_sec
              master_item:
                key: 'purestorage.flasharray.volume.get[{#SN}]'
              tags:
                - tag: component
                  value: volume
          graph_prototypes:
            - uuid: c1892f0a8bab42e58597788ea3c6571d
              name: 'Volume [{#NAME}]: Operation latency'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.usec_per_read[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.usec_per_write[{#SN}]'
            - uuid: ee5830d4ac6b484fbc9e6f87b7a5e9b0
              name: 'Volume [{#NAME}]: Read/write throughput'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.written_bytes.rate[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.read_bytes.rate[{#SN}]'
            - uuid: d15e0ade1de9422eaabe8356b67245d9
              name: 'Volume [{#NAME}]: Requests per second'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.read_requests.rate[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.write_requests.rate[{#SN}]'
            - uuid: 741b5ad72b354d83a3c60ac7e7b95a1d
              name: 'Volume [{#NAME}]: Space'
              graph_items:
                - drawtype: BOLD_LINE
                  color: 199C0D
                  yaxisside: RIGHT
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.size[{#SN}]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.shared_space[{#SN}]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.used_space[{#SN}]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'Pure Storage FlashArray v2 by HTTP'
                    key: 'purestorage.flasharray.volume.snapshots_size[{#SN}]'
          master_item:
            key: purestorage.flasharray.volumes.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#SN}'
              path: $.serial
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.volumes
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
      tags:
        - tag: class
          value: hardware
        - tag: class
          value: storage
        - tag: target
          value: flash-array
        - tag: target
          value: pure-storage
      macros:
        - macro: '{$PURE.FLASHARRAY.API.TOKEN}'
          type: SECRET_TEXT
          description: 'Pure Storage FlashArray API token.'
        - macro: '{$PURE.FLASHARRAY.API.URL}'
          description: 'Pure Storage FlashArray Web interface URL.'
        - macro: '{$PURE.FLASHARRAY.API.VERSION}'
          value: '2.36'
          description: 'Pure Storage FlashArray API version.'
        - macro: '{$PURE.FLASHARRAY.CERT.EXPIRY.WARN}'
          value: '7'
          description: 'Number of days until the certificate expires.'
        - macro: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable certificates by name.'
        - macro: '{$PURE.FLASHARRAY.CERT.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable certificates by name.'
        - macro: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable controllers by index.'
        - macro: '{$PURE.FLASHARRAY.CTRL.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable controllers by index.'
        - macro: '{$PURE.FLASHARRAY.DATA.TIMEOUT}'
          value: 15s
          description: 'Response timeout for the API.'
        - macro: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage drives by name.'
        - macro: '{$PURE.FLASHARRAY.DRIVE.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage drives by name.'
        - macro: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable fans by index.'
        - macro: '{$PURE.FLASHARRAY.FAN.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable fans by index.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable hosts by group.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.GROUP.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable hosts by group.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable hosts by name.'
        - macro: '{$PURE.FLASHARRAY.HOST.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable hosts by name.'
        - macro: '{$PURE.FLASHARRAY.HTTP_PROXY}'
          description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. For more details, see the documentation at https://www.zabbix.com/documentation/7.4/manual/config/items/itemtypes/http'
        - macro: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable network interfaces by name.'
        - macro: '{$PURE.FLASHARRAY.NETIF.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable network interfaces by name.'
        - macro: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage pods by name.'
        - macro: '{$PURE.FLASHARRAY.POD.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage pods by name.'
        - macro: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable power supply components by index.'
        - macro: '{$PURE.FLASHARRAY.POWER.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable power supply components by index.'
        - macro: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable temperature sensors by index.'
        - macro: '{$PURE.FLASHARRAY.TEMP.LLD.FILTER.INDEX.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable temperature sensors by index.'
        - macro: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.MATCHES}'
          value: '.*'
          description: 'Filter of discoverable storage volumes by name.'
        - macro: '{$PURE.FLASHARRAY.VOLUME.LLD.FILTER.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable storage volumes by name.'
      dashboards:
        - uuid: 186b571696774e6ab4ba5a8a38dc9c8d
          name: 'Pure Storage FlashArray: General'
          auto_start: 'NO'
          pages:
            - name: Array
              widgets:
                - type: item
                  name: Hostname
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        key: purestorage.flasharray.array.hostname
                    - type: INTEGER
                      name: show.0
                      value: '2'
                - type: svggraph
                  name: 'Array read/write throughput'
                  'y': '3'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array bytes read per second'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array bytes written per second'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: XGKYU
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: 'Array operation latency'
                  'y': '8'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array microseconds per read'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array microseconds per write'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: STRING
                      name: ds.2.color
                      value: F44336
                    - type: INTEGER
                      name: ds.2.fill
                      value: '0'
                    - type: STRING
                      name: ds.2.items.0
                      value: 'Array microseconds per operation'
                    - type: INTEGER
                      name: ds.2.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SSNAB
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: item
                  name: Version
                  x: '24'
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        key: purestorage.flasharray.array.version
                    - type: INTEGER
                      name: show.0
                      value: '2'
                - type: svggraph
                  name: 'Array requests per second'
                  x: '36'
                  'y': '3'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array read requests per second'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array write requests per second'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: NCUID
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: svggraph
                  name: 'Array space'
                  x: '36'
                  'y': '8'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: ds.0.axisy
                      value: '1'
                    - type: STRING
                      name: ds.0.color
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Array capacity'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: STRING
                      name: ds.1.color
                      value: FFD54F
                    - type: INTEGER
                      name: ds.1.fill
                      value: '0'
                    - type: STRING
                      name: ds.1.items.0
                      value: 'Array shared space'
                    - type: INTEGER
                      name: ds.1.width
                      value: '2'
                    - type: STRING
                      name: ds.2.color
                      value: F44336
                    - type: INTEGER
                      name: ds.2.fill
                      value: '0'
                    - type: STRING
                      name: ds.2.items.0
                      value: 'Array snapshots size'
                    - type: INTEGER
                      name: ds.2.width
                      value: '2'
                    - type: STRING
                      name: ds.3.color
                      value: 0080FF
                    - type: INTEGER
                      name: ds.3.fill
                      value: '0'
                    - type: STRING
                      name: ds.3.items.0
                      value: 'Array volumes size'
                    - type: INTEGER
                      name: ds.3.width
                      value: '2'
                    - type: STRING
                      name: ds.4.color
                      value: 7E57C2
                    - type: INTEGER
                      name: ds.4.fill
                      value: '0'
                    - type: STRING
                      name: ds.4.items.0
                      value: 'Array system size'
                    - type: INTEGER
                      name: ds.4.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '5'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: SFPXY
                - type: item
                  name: Capacity
                  x: '48'
                  width: '24'
                  height: '3'
                  fields:
                    - type: ITEM
                      name: itemid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        key: purestorage.flasharray.array.capacity
                    - type: INTEGER
                      name: show.0
                      value: '2'
            - name: 'Network interfaces'
              widgets:
                - type: honeycomb
                  name: 'Network interfaces'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Speed'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: interface
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: TZTHI
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Speed
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: TZTHI._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ABHBM
                    - type: INTEGER
                      name: righty
                      value: '0'
            - name: Drives
              widgets:
                - type: honeycomb
                  name: Drives
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Capacity'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: drive
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: YBMRB
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Capacity
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: YBMRB._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: IEDRA
                    - type: INTEGER
                      name: righty
                      value: '0'
            - name: Volumes
              widgets:
                - type: graphprototype
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Volume [{#NAME}]: Operation latency'
                    - type: STRING
                      name: reference
                      value: AAAAJ
                - type: graphprototype
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Volume [{#NAME}]: Requests per second'
                    - type: STRING
                      name: reference
                      value: AAAAL
                - type: graphprototype
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Volume [{#NAME}]: Read/write throughput'
                    - type: STRING
                      name: reference
                      value: AAAAK
                - type: graphprototype
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Volume [{#NAME}]: Space'
                    - type: STRING
                      name: reference
                      value: AAAAM
            - name: Hosts
              widgets:
                - type: graphprototype
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Host [{#NAME}]: Operation latency'
                    - type: STRING
                      name: reference
                      value: AAAAF
                - type: graphprototype
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Host [{#NAME}]: Requests per second'
                    - type: STRING
                      name: reference
                      value: AAAAH
                - type: graphprototype
                  x: '36'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Host [{#NAME}]: Read/write throughput'
                    - type: STRING
                      name: reference
                      value: AAAAG
                - type: graphprototype
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Pure Storage FlashArray v2 by HTTP'
                        name: 'Host [{#NAME}]: Space'
                    - type: STRING
                      name: reference
                      value: AAAAI
            - name: Sensors
              widgets:
                - type: honeycomb
                  name: Fans
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: items.0
                      value: '*Status'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: fan
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: YQLGC
                    - type: INTEGER
                      name: show.0
                      value: '1'
                    - type: STRING
                      name: thresholds.0.color
                      value: 26A69A
                    - type: STRING
                      name: thresholds.0.threshold
                      value: '0'
                    - type: STRING
                      name: thresholds.1.color
                      value: E65660
                    - type: STRING
                      name: thresholds.1.threshold
                      value: '1'
                    - type: STRING
                      name: thresholds.2.color
                      value: FCCB1D
                    - type: STRING
                      name: thresholds.2.threshold
                      value: '2'
                    - type: STRING
                      name: thresholds.3.color
                      value: 90A4AE
                    - type: STRING
                      name: thresholds.3.threshold
                      value: '3'
                    - type: STRING
                      name: thresholds.4.color
                      value: 29B6F6
                    - type: STRING
                      name: thresholds.4.threshold
                      value: '4'
                    - type: STRING
                      name: thresholds.5.color
                      value: 546E7A
                    - type: STRING
                      name: thresholds.5.threshold
                      value: '5'
                - type: honeycomb
                  name: 'Temperature sensors'
                  'y': '5'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: items.0
                      value: '*Temperature'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: sensor
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: EOKHA
                    - type: INTEGER
                      name: secondary_label_bold
                      value: '0'
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                    - type: STRING
                      name: thresholds.0.color
                      value: 26A69A
                    - type: STRING
                      name: thresholds.0.threshold
                      value: '0'
                    - type: STRING
                      name: thresholds.1.color
                      value: FFCA28
                    - type: STRING
                      name: thresholds.1.threshold
                      value: '50'
                    - type: STRING
                      name: thresholds.2.color
                      value: E65660
                    - type: STRING
                      name: thresholds.2.threshold
                      value: '70'
                - type: svggraph
                  name: 'Temperature value'
                  'y': '10'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: EOKHA._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: FDGJA
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: honeycomb
                  name: 'Power supply'
                  'y': '15'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 64B5F6
                    - type: STRING
                      name: items.0
                      value: '*Voltage'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '1'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: power
                    - type: STRING
                      name: primary_label
                      value: '{{ITEM.NAME}.regsub("^.+?\[(.*)\]", \1)}'
                    - type: STRING
                      name: reference
                      value: MZNPS
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: svggraph
                  name: Voltage
                  'y': '20'
                  width: '72'
                  height: '5'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: '009688'
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: MZNPS._itemid
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: NGVAC
                    - type: INTEGER
                      name: righty
                      value: '0'
      valuemaps:
        - uuid: d2c0016639b2413c85a000746ee56109
          name: Boolean
          mappings:
            - value: '0'
              newvalue: 'false'
            - value: '1'
              newvalue: 'true'
        - uuid: a6f5e4bef3114c4cb08eb4c9e449dfa8
          name: 'Certificate Type'
          mappings:
            - value: '0'
              newvalue: self-signed
            - value: '1'
              newvalue: imported
            - value: '2'
              newvalue: other
        - uuid: b6aed58a52b742c680173452935c2bca
          name: 'Controller Mode'
          mappings:
            - value: '0'
              newvalue: 'not present'
            - value: '1'
              newvalue: offline
            - value: '2'
              newvalue: primary
            - value: '3'
              newvalue: secondary
            - value: '4'
              newvalue: unknown
        - uuid: f315c5769cbd4eb4ac4721751070d247
          name: 'Controller Status'
          mappings:
            - value: '0'
              newvalue: 'not ready'
            - value: '1'
              newvalue: ready
            - value: '2'
              newvalue: updating
            - value: '3'
              newvalue: unknown
        - uuid: ed60650d00594c5c9778501ee06fb648
          name: 'Drive Status'
          mappings:
            - value: '0'
              newvalue: healthy
            - value: '1'
              newvalue: empty
            - value: '2'
              newvalue: updating
            - value: '3'
              newvalue: unused
            - value: '4'
              newvalue: evacuating
            - value: '5'
              newvalue: identifying
            - value: '6'
              newvalue: unhealthy
            - value: '7'
              newvalue: recovering
            - value: '8'
              newvalue: unrecognized
            - value: '9'
              newvalue: failed
        - uuid: 92c4cbd25c9f45408aa335aac5bec52a
          name: 'Hardware Status'
          mappings:
            - value: '0'
              newvalue: ok
            - value: '1'
              newvalue: critical
            - value: '2'
              newvalue: degraded
            - value: '3'
              newvalue: device_off
            - value: '4'
              newvalue: identifying
            - value: '5'
              newvalue: not_installed
            - value: '6'
              newvalue: unknown
        - uuid: 0142212de71f42bc9f7521447d89ff0c
          name: 'Pod Status'
          mappings:
            - value: '0'
              newvalue: demoted
            - value: '1'
              newvalue: promoted
            - value: '2'
              newvalue: unknown
        - uuid: 59047ec19a5c4229bce4450f134ac5cc
          name: 'Service Status'
          mappings:
            - value: '0'
              newvalue: disabled
            - value: '1'
              newvalue: enabled
            - value: '2'
              newvalue: unknown
  graphs:
    - uuid: 8beedac73b0d4f1d99d070e833387014
      name: 'Array operation latency'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.usec_per_read
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.usec_per_write
        - sortorder: '2'
          color: 00611C
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.usec_per_op
    - uuid: abcd6ce5245c48b689fdbc37dbe9c277
      name: 'Array operation latency'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.usec_per_read
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.usec_per_write
        - sortorder: '2'
          color: 00611C
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.usec_per_op
    - uuid: 00bd33322bd248708c836557a93fbefa
      name: 'Array read/write throughput'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.written_bytes.rate
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.read_bytes.rate
    - uuid: a15810fcd5dc4131a9263bd1c8dd66e3
      name: 'Array read/write throughput'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.written_bytes.rate
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.read_bytes.rate
    - uuid: e5777cd6a0e844a8a3203114a8761eef
      name: 'Array requests per second'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.read_requests.rate
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.write_requests.rate
    - uuid: 2af7200064f04041871c8883ebed3305
      name: 'Array requests per second'
      graph_items:
        - color: 199C0D
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.read_requests.rate
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.write_requests.rate
    - uuid: f7fd269311624609940f9b8c803291db
      name: 'Array space'
      graph_items:
        - drawtype: BOLD_LINE
          color: 199C0D
          yaxisside: RIGHT
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.capacity
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.shared_space
        - sortorder: '2'
          color: 00611C
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.snapshots_size
        - sortorder: '3'
          color: F7941D
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.volumes_size
        - sortorder: '4'
          color: FC6EA3
          item:
            host: 'Pure Storage FlashArray v1 by HTTP'
            key: purestorage.flasharray.array.system_size
    - uuid: 81354a0ede2a43ecbee5805128a1f856
      name: 'Array space'
      graph_items:
        - drawtype: BOLD_LINE
          color: 199C0D
          yaxisside: RIGHT
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.capacity
        - sortorder: '1'
          color: F63100
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.shared_space
        - sortorder: '2'
          color: 00611C
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.snapshots_size
        - sortorder: '3'
          color: F7941D
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.physical_size
        - sortorder: '4'
          color: FC6EA3
          item:
            host: 'Pure Storage FlashArray v2 by HTTP'
            key: purestorage.flasharray.array.system_size
