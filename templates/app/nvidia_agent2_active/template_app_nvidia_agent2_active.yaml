zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 7297d66e419543c6b83dd8cfe5eb4fb7
      template: 'Nvidia by Zabbix agent 2 active'
      name: 'Nvidia by Zabbix agent 2 active'
      description: |
        This template is designed for Nvidia GPU monitoring and doesn't require any external scripts.
        1. Setup and configure Zabbix agent 2 compiled with the Nvidia monitoring plugin.
        2. Create a host and attach the template to it.
        All Nvidia GPUs will be discovered. Set filters with macros if you want to override default filter parameters.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback.
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-1
      groups:
        - name: Templates/Applications
      items:
        - uuid: efdffab0b401430388a5cb21a789978d
          name: 'Number of devices'
          type: ZABBIX_ACTIVE
          key: nvml.device.count
          delay: 1h
          description: |
            Retrieves the number of compute devices in the system. A compute device is a single GPU.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: adf85e5ea2404ef4841208a41ca3bb45
              expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.count) <> 0'
              name: 'Nvidia: Number of devices has changed'
              event_name: 'Nvidia: Number of devices on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Number of devices has changed. Check if this was intentional.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 6ea9f80195af4c7b89c1f7220fc71df7
          name: 'Get devices'
          type: ZABBIX_ACTIVE
          key: nvml.device.get
          delay: 1h
          history: '0'
          value_type: TEXT
          description: 'Retrieves a list of Nvidia devices in the system.'
          tags:
            - tag: component
              value: nvidia
            - tag: component
              value: raw
        - uuid: 424bce7a262144d0a2bc33bc0b5ee98a
          name: 'Driver version'
          type: ZABBIX_ACTIVE
          key: nvml.system.driver.version
          delay: 1h
          value_type: CHAR
          description: |
            Retrieves the version of the system's graphics driver.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: bd2e26231d1a4ae29538c573e69fce34
              expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.system.driver.version) <> 0'
              name: 'Nvidia: Driver version has changed'
              event_name: 'Nvidia: Driver version on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: INFO
              description: |
                Driver version has changed.
                Check the Nvidia website for the specific driver version: https://www.nvidia.com/en-us/drivers/
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 1566ad71d26a474a858c12ff1cf438fb
          name: 'NVML library version'
          type: ZABBIX_ACTIVE
          key: nvml.version
          delay: 1h
          value_type: CHAR
          description: |
            Retrieves the version of the NVML library.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: 8db25f54f23f48c4ae2ead4ca3e52c34
              expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.version) <> 0'
              name: 'Nvidia: NVML library has changed'
              event_name: 'Nvidia: NVML library on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: INFO
              description: |
                NVML library version has changed.
                Check the changelog for details: https://docs.nvidia.com/deploy/nvml-api/change-log.html
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
      discovery_rules:
        - uuid: d3d6ca6d489b436f8aecef9e2f64bd33
          name: 'GPU Discovery'
          type: DEPENDENT
          key: nvml.device.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$NVIDIA.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$NVIDIA.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#UUID}'
                value: '{$NVIDIA.UUID.MATCHES}'
              - macro: '{#UUID}'
                value: '{$NVIDIA.UUID.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Nvidia GPU discovery in the system.'
          item_prototypes:
            - uuid: 0355d8799fb44e6b8ad144b389641d01
              name: '[{#UUID}]: Decoder utilization'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.decoder.utilization["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the current utilization for the Decoder.
                For Nvidia Kepler or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 2ca21d91b7e94f0fa2328dd35846769b
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Decoder utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.DECODER.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Decoder utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 13f4fd62bdac46118781e3090df30a6e
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Decoder utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.DECODER.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Decoder utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: a6804c8604cd46bcb5b38144171b9209
              name: '[{#UUID}]: Encoder average FPS'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.fps["{#UUID}"]'
              units: '!fps'
              description: |
                Retrieves the trailing average FPS of all active encoder sessions for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.average_fps
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 52c3a8fc63fc47e88c976d8d8436a3a5
              name: '[{#UUID}]: Encoder stats'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the current encoder statistics for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 141a77dc82124d0c99c79cbbf729e88d
              name: '[{#UUID}]: Encoder average latency'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.latency["{#UUID}"]'
              value_type: FLOAT
              units: s
              description: |
                Retrieves the current encode latency for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.average_latency_ms
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 8257801252a14f81af72b7dde279de6e
                  expression: 'last(/Nvidia by Zabbix agent 2 active/nvml.device.encoder.stats.latency["{#UUID}"]) > (2 * avg(/Nvidia by Zabbix agent 2 active/nvml.device.encoder.stats.latency["{#UUID}"],3m))'
                  name: 'Nvidia: [{#UUID}]: Encoder average latency is high'
                  event_name: 'Nvidia: [{#UUID}]: Encoder average latency is 2x higher than usual.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 0c441debd2e44b7a9efd4347483b660d
              name: '[{#UUID}]: Encoder sessions'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.sessions["{#UUID}"]'
              description: |
                Retrieves the current count of active encoder sessions for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.session_count
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: ae76d66eed7b42fb95b13cfcc1e633d1
              name: '[{#UUID}]: Encoder utilization'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.encoder.utilization["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the current utilization for the Encoder.
                For Nvidia Kepler or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 86419e03555c4bc38227bc04b1583fba
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Encoder utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.ENCODER.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Encoder utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 709342417f4746a6873f5e66601d97ff
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Encoder utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.ENCODER.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Encoder utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 79928bb18ccc4a4e9d1ed46aa20d5434
              name: '[{#UUID}]: Energy consumption'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.energy.consumption["{#UUID}"]'
              value_type: FLOAT
              units: J
              description: |
                Retrieves the total energy consumption of this GPU in joules since the last driver reload.
                For Nvidia Volta or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 25062054ea774f0caaee6aa342c5e2a2
              name: '[{#UUID}]: Memory ECC errors, corrected'
              type: DEPENDENT
              key: 'nvml.device.errors.memory.corrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU device memory errors that were corrected. For ECC errors, these are single-bit errors, for Texture memory, these are errors fixed by resend.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.corrected
              master_item:
                key: 'nvml.device.errors.memory["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: cbf602d3ed784ec3ae3072899fa91f56
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.errors.memory.corrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of corrected memory ECC errors has changed'
                  event_name: 'Nvidia: Number of corrected memory ECC errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of corrected ECC errors can indicate (but not necessary mean) aging or degrading of memory.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 8bc12acbbe7c41c882429ec09bc3d86d
              name: '[{#UUID}]: Memory ECC errors, uncorrected'
              type: DEPENDENT
              key: 'nvml.device.errors.memory.uncorrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU device memory errors that were not corrected. For ECC errors, these are double-bit errors, for Texture memory, these are errors where the resend fails.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uncorrected
              master_item:
                key: 'nvml.device.errors.memory["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 3a93f82adbed4330b54296beaed17848
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.errors.memory.uncorrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of uncorrected memory ECC errors has changed'
                  event_name: 'Nvidia: Number uncorrected of memory ECC errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of uncorrected ECC errors can indicate potential issues such as: data corruption, system instability, hardware issues'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: e79e45b1625742fea796f14d26c52e6f
              name: '[{#UUID}]: Memory ECC errors, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.errors.memory["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the GPU device memory error counters for the device.
                For Nvidia Fermi or newer fully supported devices.
                Requires NVML_INFOROM_ECC version 2.0 or higher to report aggregate location-based memory error counts. Requires NVML_INFOROM_ECC version 1.0 or higher to report all other memory error counts.
                Only applicable to devices with ECC.
                Requires ECC Mode to be enabled.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'No ECC on the device or ECC mode is turned off.'
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: b472e7b463244d30b79291cd411f160e
              name: '[{#UUID}]: Register file errors, corrected'
              type: DEPENDENT
              key: 'nvml.device.errors.register.corrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU register file errors that were corrected. For ECC errors, these are single-bit errors, for Texture memory, these are errors fixed by resend.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.corrected
              master_item:
                key: 'nvml.device.errors.register["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 4aa09321d7214173a0b1656d18455b78
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.errors.register.corrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of corrected register file errors has changed'
                  event_name: 'Nvidia: Number corrected of register file errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of corrected register file errors can indicate (but not necessary mean) wearing, aging or degrading of memory.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 5e66f8e5378d4b1fb4c9959333d0baf5
              name: '[{#UUID}]: Register file errors, uncorrected'
              type: DEPENDENT
              key: 'nvml.device.errors.register.uncorrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU register file errors that were not corrected. For ECC errors, these are double-bit errors, for Texture memory, these are errors where the resend fails.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uncorrected
              master_item:
                key: 'nvml.device.errors.register["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 951c54e2edcc43d29ac466a35802cfc9
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.errors.register.uncorrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of uncorrected register file errors has changed'
                  event_name: 'Nvidia: Number uncorrected of register file errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of uncorrected register file errors can indicate potential issues such as: data corruption, system instability, hardware degradation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 3b19ff5ab2ae48049aed8403ab18ebf3
              name: '[{#UUID}]: Register file errors, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.errors.register["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the GPU register file error counters for the device.
                For Nvidia Fermi or newer fully supported devices.
                Requires NVML_INFOROM_ECC version 2.0 or higher to report aggregate location-based memory error counts. Requires NVML_INFOROM_ECC version 1.0 or higher to report all other memory error counts.
                Only applicable to devices with ECC.
                Requires ECC Mode to be enabled.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'No ECC on the device or ECC mode is turned off.'
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: ece478c8ff5f40dcb3bcb7a4b6d65124
              name: '[{#UUID}]: Fan speed'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.fan.speed.avg["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the intended operating speed of the specified device fan.
                Note: The reported speed is the intended fan speed. If the fan is physically blocked and unable to spin, the output will not match the actual fan speed.
                For all Nvidia discrete products with dedicated fans.
                The fan speed is expressed as a percentage of the product's maximum noise tolerance fan speed. In certain cases, this value may exceed 100%.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: dbc03d55d87946f2a9c279b8c6cbfbbc
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Fan speed exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Fan speed ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.FAN.SPEED.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Fan speed is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 636e31ac7a2c48ecbd65b0c4ec4c8fb0
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.WARN}'
                  name: 'Nvidia: [{#UUID}]: Fan speed exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Fan speed ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.FAN.SPEED.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Fan speed is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Fan speed exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: c9609ab9041a4f7584bed04b436315c0
              name: '[{#UUID}]: Graphics frequency'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.graphics.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current graphics clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 7556176cdf1943e5aedb7fa3c5ded934
              name: '[{#UUID}]: BAR1 memory, free'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.free["{#UUID}"]'
              units: B
              description: |
                Unallocated BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.free_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 8836f8d00eb44a5180c8ced82494c1ba
              name: '[{#UUID}]: BAR1 memory, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Gets Total, Available, and Used size of BAR1 memory.
                BAR1 is used to map the FB (device memory) so that it can be directly accessed by the CPU or 3rd party devices (peer-to-peer on the PCIE bus).
                For Nvidia Kepler or newer fully supported devices
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: af9070de2bc9454283a32a847b163478
              name: '[{#UUID}]: BAR1 memory, total'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.total["{#UUID}"]'
              units: B
              description: |
                Total BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.total_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 794d204946f04b71b451129294b6065c
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.memory.bar1.total["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Total BAR1 memory has changed'
                  event_name: 'Nvidia: Total BAR1 memory on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Total BAR1 memory has changed. This could mean possible memory degradation, hardware configuration changes, or memory reservation by system or software.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 5d76f768d3c644a7a185bb07d109e221
              name: '[{#UUID}]: BAR1 memory, used'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.used["{#UUID}"]'
              units: B
              description: |
                Allocated used BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.used_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 20c11439c02d49969bbe13f41e23a31b
              name: '[{#UUID}]: FB memory, free'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.free["{#UUID}"]'
              units: B
              description: |
                Unallocated memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.free_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 1f48f586a4ec49ffbe8080bac5df66f8
              name: '[{#UUID}]: FB memory, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.memory.fb.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the amount of used, free, reserved, and total memory available on the device.
                For all Nvidia products.
                Enabling ECC reduces the amount of total available memory due to the extra required parity bits. Under WDDM, most of the device memory is allocated and managed on startup by Windows.
                Under Linux and Windows TCC, the reported amount of used memory is equal to the sum of memory allocated by all active channels on the device.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 806601ebae81441fbc90523d63470044
              name: '[{#UUID}]: FB memory, reserved'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.reserved["{#UUID}"]'
              units: B
              description: |
                Memory reserved for system use (driver or firmware) on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.reserved_memory_bytes
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'NVML library too old to support this metric.'
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 6a78780f41314641a3478efd0cb9882b
              name: '[{#UUID}]: FB memory, total'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.total["{#UUID}"]'
              units: B
              description: |
                Total physical memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.total_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 7f1308d09489457db3ce7d6e1afe469b
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.memory.fb.total["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Total FB memory has changed'
                  event_name: 'Nvidia: Total FB memory on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Total FB memory has changed. This could mean possible memory degradation, hardware configuration changes, or memory reservation by system or software.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 4267777a1117490db3c90097aae56d98
              name: '[{#UUID}]: FB memory, used'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.used["{#UUID}"]'
              units: B
              description: |
                Allocated memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.used_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: b3ec856b4b7f42d9ba76c2ff47752bd7
              name: '[{#UUID}]: Memory frequency'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.memory.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current memory clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 74a8c52b818540418046a1475c063da1
              name: '[{#UUID}]: PCIe utilization, Rx'
              type: DEPENDENT
              key: 'nvml.device.pci.utilization.rx.rate["{#UUID}"]'
              units: bps
              description: |
                The PCIe Rx (receive) throughput over a 20ms interval on the device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.rx_rate_kb_s
                - type: MULTIPLIER
                  parameters:
                    - '1024'
              master_item:
                key: 'nvml.device.pci.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 4cb72592564348c6af99f95e592c2591
              name: '[{#UUID}]: PCIe utilization, Tx'
              type: DEPENDENT
              key: 'nvml.device.pci.utilization.tx.rate["{#UUID}"]'
              units: bps
              description: |
                The PCIe Tx (transmit) throughput over a 20ms interval on the device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.tx_rate_kb_s
                - type: MULTIPLIER
                  parameters:
                    - '1024'
              master_item:
                key: 'nvml.device.pci.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 3270b9cf246b4b0abf60bb73f2c64c39
              name: '[{#UUID}]: PCIe utilization, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.pci.utilization["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves PCIe utilization information.
                For Nvidia Maxwell or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 1ac19949ec11456896562f63525dcb8c
              name: '[{#UUID}]: Performance state'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.performance.state["{#UUID}"]'
              description: |
                Retrieves the current performance state for the device.
                For Nvidia Fermi or newer fully supported devices.
              valuemap:
                name: 'Performance state'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 7f4e87102f8042a8802088f842356522
              name: '[{#UUID}]: Power limit'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.power.limit["{#UUID}"]'
              delay: 1h
              value_type: FLOAT
              units: watts
              description: |
                Retrieves the power management limit associated with this device.
                For Nvidia Fermi or newer fully supported devices.
                The power limit defines the upper boundary for the card's power draw. If the card's total power draw reaches this limit, the power management algorithm kicks in.
                This reading is only available if power management mode is supported.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: c7ba8c60f3de4c87a528db11d39ee2ec
                  expression: 'change(/Nvidia by Zabbix agent 2 active/nvml.device.power.limit["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Power limit has changed'
                  event_name: 'Nvidia: [{#UUID}]Power limit on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'Power limit for the device has changed. Check if this was intentional.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 601901906c634f64a94831a9b44ad59e
              name: '[{#UUID}]: Power usage'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.power.usage["{#UUID}"]'
              value_type: FLOAT
              units: watts
              description: |
                Retrieves power usage for this GPU (in watts) and its associated circuitry (e.g. memory).
                For Nvidia Fermi or newer fully supported devices.
                On Fermi and Kepler GPUs, the reading is accurate to within +/- 5% of current power draw. On Ampere (except GA100) or newer GPUs, the API returns power averaged over a 1 second interval. On GA100 and older architectures, instantaneous power is returned.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 707c859524164a348d142f193fb464d6
              name: '[{#UUID}]: Serial number'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.serial["{#UUID}"]'
              delay: 1h
              value_type: CHAR
              description: |
                Retrieves the globally unique board serial number associated with this device's board.
                For all products with an inforom.
                This number matches the serial number tag that is physically attached to the board.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'The device does not support operation to retrieve serial number.'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: c64fafdc18654ad8adb984673142b614
              name: '[{#UUID}]: SM frequency'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.sm.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current SM clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 513cab732c7648ccb71a7401ebcaebc5
              name: '[{#UUID}]: Temperature'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.temperature["{#UUID}"]'
              units: C
              description: |
                Retrieves the current temperature readings for the device, in degrees C.
                For Nvidia all products.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: d325cc30ed2c4b539ce26844360077d0
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Temperature exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Temperature ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.TEMPERATURE.CRIT} C)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Temperature is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: ac0086ae1f4f4dc4bef1dc84f56487f8
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.WARN}'
                  name: 'Nvidia: [{#UUID}]: Temperature exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Temperature ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.TEMPERATURE.WARN} C)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Temperature is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Temperature exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 300507f6bcf8468387df8f8c25b37b49
              name: '[{#UUID}]: GPU utilization'
              type: DEPENDENT
              key: 'nvml.device.utilization.gpu["{#UUID}"]'
              units: '%'
              description: |
                Percentage of time over the past sampling period during which one or more kernels were running on the GPU.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.device
              master_item:
                key: 'nvml.device.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 57b043a2966647bea3aa39fe54a7eabf
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: GPU utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: GPU utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.GPU.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: GPU utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 26b8dfb41d2b4f11bdff7addca9eb166
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: GPU utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: GPU utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.GPU.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: GPU utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: GPU utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 7a629aeab4dd4f96995aa92882128eaa
              name: '[{#UUID}]: Memory utilization'
              type: DEPENDENT
              key: 'nvml.device.utilization.memory["{#UUID}"]'
              units: '%'
              description: |
                Percentage of time over the past sampling period during which global (device) memory was being read or written.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.memory
              master_item:
                key: 'nvml.device.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: eae9828d46f94eb1afb70c924dbf160f
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Memory utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Memory utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.MEMORY.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Memory utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: d099782589ec42e99219cce11b424515
                  expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Memory utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Memory utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.MEMORY.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Memory utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Memory utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2 active/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: a573c6926e2b438ba124c824268bacc4
              name: '[{#UUID}]: Device utilization, get'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.utilization["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the current utilization rates for the device's major subsystems.
                For Nvidia Fermi or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 2cdebc61528440e58cd0df9a43851988
              name: '[{#UUID}]: Video frequency'
              type: ZABBIX_ACTIVE
              key: 'nvml.device.video.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current video encoder/decoder clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
          trigger_prototypes:
            - uuid: c7ab007be36f4766a1ee5973132e95c6
              expression: '(min(/Nvidia by Zabbix agent 2 active/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2 active/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.CRIT}'
              name: 'Nvidia: [{#UUID}]: Power usage exceeded critical threshold'
              event_name: 'Nvidia: [{#UUID}]: Power usage ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.POWER.UTIL.CRIT} %)'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: '[{#UUID}]: Power usage is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
              tags:
                - tag: scope
                  value: performance
            - uuid: fe4707cde95c4075af78ad456c3b794e
              expression: '(min(/Nvidia by Zabbix agent 2 active/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2 active/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.WARN}'
              name: 'Nvidia: [{#UUID}]: Power usage exceeded warning threshold'
              event_name: 'Nvidia: [{#UUID}]: Power usage ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.POWER.UTIL.WARN} %)'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: '[{#UUID}]: Power usage is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
              dependencies:
                - name: 'Nvidia: [{#UUID}]: Power usage exceeded critical threshold'
                  expression: '(min(/Nvidia by Zabbix agent 2 active/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2 active/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
          graph_prototypes:
            - uuid: a575db91d5e34a039b6b0550773d029c
              name: 'Nvidia: [{#UUID}]: BAR1 memory'
              type: STACKED
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2 active'
                key: 'nvml.device.memory.bar1.total["{#UUID}"]'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.memory.bar1.used["{#UUID}"]'
                - sortorder: '1'
                  color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.memory.bar1.free["{#UUID}"]'
            - uuid: 5d1a493fa02d47e8b69a254d032d984d
              name: 'Nvidia: [{#UUID}]: Fan speed'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.fan.speed.avg["{#UUID}"]'
            - uuid: 6e7b1aeee2cd4995a4c12eba47b7a489
              name: 'Nvidia: [{#UUID}]: FB memory'
              type: STACKED
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2 active'
                key: 'nvml.device.memory.fb.total["{#UUID}"]'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.memory.fb.used["{#UUID}"]'
                - sortorder: '1'
                  color: FF8000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.memory.fb.reserved["{#UUID}"]'
                - sortorder: '2'
                  color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.memory.fb.free["{#UUID}"]'
            - uuid: 360af5210fe14e408ed174bd50ef96b8
              name: 'Nvidia: [{#UUID}]: Memory ECC errors'
              graph_items:
                - color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.errors.memory.corrected["{#UUID}"]'
                - sortorder: '1'
                  color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.errors.memory.uncorrected["{#UUID}"]'
            - uuid: fbf7220f6e1a4cc2b4409dff7ba183b3
              name: 'Nvidia: [{#UUID}]: PCIe utilization'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.pci.utilization.rx.rate["{#UUID}"]'
                - sortorder: '1'
                  color: 0040FF
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.pci.utilization.tx.rate["{#UUID}"]'
            - uuid: 237635b29c6a4a9d919b15879c78e34c
              name: 'Nvidia: [{#UUID}]: Performance state'
              yaxismax: '15'
              ymin_type_1: FIXED
              ymax_type_1: FIXED
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.performance.state["{#UUID}"]'
            - uuid: 9511ce8b654748fea58c3494c2658121
              name: 'Nvidia: [{#UUID}]: Power usage'
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2 active'
                key: 'nvml.device.power.limit["{#UUID}"]'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.power.usage["{#UUID}"]'
            - uuid: f42dcd4d79e54db09055bf2e0d8995cf
              name: 'Nvidia: [{#UUID}]: Register file errors'
              graph_items:
                - color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.errors.register.corrected["{#UUID}"]'
                - sortorder: '1'
                  color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2 active'
                    key: 'nvml.device.errors.register.uncorrected["{#UUID}"]'
          master_item:
            key: nvml.device.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.device_name
            - lld_macro: '{#UUID}'
              path: $.device_uuid
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
      tags:
        - tag: class
          value: hardware
        - tag: target
          value: nvidia
      macros:
        - macro: '{$NVIDIA.DECODER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for decoder utilization, in %.'
        - macro: '{$NVIDIA.DECODER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for decoder utilization, in %.'
        - macro: '{$NVIDIA.ENCODER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for encoder utilization, in %.'
        - macro: '{$NVIDIA.ENCODER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for encoder utilization, in %.'
        - macro: '{$NVIDIA.FAN.SPEED.CRIT}'
          value: '90'
          description: 'Critical threshold for fan speed, in %.'
        - macro: '{$NVIDIA.FAN.SPEED.WARN}'
          value: '80'
          description: 'Warning threshold for fan speed, in %.'
        - macro: '{$NVIDIA.GPU.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for overall GPU utilization, in %.'
        - macro: '{$NVIDIA.GPU.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for overall GPU utilization, in %.'
        - macro: '{$NVIDIA.MEMORY.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for memory utilization, in %.'
        - macro: '{$NVIDIA.MEMORY.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for memory utilization, in %.'
        - macro: '{$NVIDIA.NAME.MATCHES}'
          value: '.*'
          description: 'Filter to include GPUs by name in discovery.'
        - macro: '{$NVIDIA.NAME.NOT_MATCHES}'
          value: 'CHANGE IF NEEDED'
          description: 'Filter to exclude GPUs by name in discovery.'
        - macro: '{$NVIDIA.POWER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for power usage, in %.'
        - macro: '{$NVIDIA.POWER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for power usage, in %.'
        - macro: '{$NVIDIA.TEMPERATURE.CRIT}'
          value: '90'
          description: 'Critical threshold for temperature, in %.'
        - macro: '{$NVIDIA.TEMPERATURE.WARN}'
          value: '80'
          description: 'Warning threshold for temperature, in %.'
        - macro: '{$NVIDIA.UUID.MATCHES}'
          value: '.*'
          description: 'Filter to include GPUs by UUID in discovery.'
        - macro: '{$NVIDIA.UUID.NOT_MATCHES}'
          value: 'CHANGE IF NEEDED'
          description: 'Filter to exclude GPUs by UUID in discovery.'
      dashboards:
        - uuid: 1ef8fd9fdd364f4bae8c57a1d309a4c8
          name: 'Nvidia: Overview'
          pages:
            - name: Summary
              widgets:
                - type: svggraph
                  name: 'GPU utilization'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*GPU utilization*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBEFB
                - type: svggraph
                  name: Temperature
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Temperature*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECEEB
                - type: svggraph
                  name: 'Memory utilization'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory utilization*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBEEB
                - type: svggraph
                  name: 'Power usage'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Power usage*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECEDB
            - name: Frequencies
              widgets:
                - type: svggraph
                  name: 'SM frequency'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*SM frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DCBFA
                - type: svggraph
                  name: 'Video frequency'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Video frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: FCACC
                - type: svggraph
                  name: 'Graphics frequency'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Graphics frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ADAEE
                - type: svggraph
                  name: 'Memory frequency'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DAEBE
            - name: 'Memory errors'
              widgets:
                - type: svggraph
                  name: 'Memory ECC errors, corrected'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory ECC errors, corrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFB
                - type: svggraph
                  name: 'Register file Errors, corrected'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Register file errors, corrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFF
                - type: svggraph
                  name: 'Memory ECC errors, uncorrected'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory ECC errors, uncorrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EABFF
                - type: svggraph
                  name: 'Register file Errors, uncorrected'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Register file errors, uncorrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFA
            - name: 'Memory, PCI, fan'
              widgets:
                - type: graphprototype
                  name: 'BAR1 memory'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2 active'
                        name: 'Nvidia: [{#UUID}]: BAR1 memory'
                    - type: STRING
                      name: reference
                      value: DCBFB
                - type: graphprototype
                  name: 'PCIe utilization'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2 active'
                        name: 'Nvidia: [{#UUID}]: PCIe utilization'
                    - type: STRING
                      name: reference
                      value: ACECA
                - type: graphprototype
                  name: 'FB memory'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2 active'
                        name: 'Nvidia: [{#UUID}]: FB memory'
                    - type: STRING
                      name: reference
                      value: ACDCA
                - type: graphprototype
                  name: 'Fan speed'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2 active'
                        name: 'Nvidia: [{#UUID}]: Fan speed'
                    - type: STRING
                      name: reference
                      value: ACFCA
            - name: Encoders
              widgets:
                - type: svggraph
                  name: 'Encoder utilization'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder utilization*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECAFB
                - type: svggraph
                  name: 'Encoder average FPS'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder average FPS*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECFFF
                - type: svggraph
                  name: 'Encoder sessions'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder sessions*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECAFF
                - type: svggraph
                  name: 'Encoder average latency'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder average latency*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECFFA
      valuemaps:
        - uuid: 6893a941192a4513ab24b20b0885b27e
          name: 'Performance state'
          mappings:
            - value: '0'
              newvalue: Maximum
            - type: IN_RANGE
              value: 1-4
              newvalue: High
            - type: IN_RANGE
              value: 5-10
              newvalue: Average
            - type: IN_RANGE
              value: 11-14
              newvalue: Low
            - value: '15'
              newvalue: Minimum
            - value: '32'
              newvalue: Unknown
