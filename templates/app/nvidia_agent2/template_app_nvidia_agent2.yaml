zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 32a39c8aca9445df862e9f3e1369c19a
      template: 'Nvidia by Zabbix agent 2'
      name: 'Nvidia by Zabbix agent 2'
      description: |
        This template is designed for Nvidia GPU monitoring and doesn't require any external scripts.
        1. Setup and configure Zabbix agent 2 compiled with the Nvidia monitoring plugin.
        2. Create a host with Zabbix agent interface and attach the template to it.
        All Nvidia GPUs will be discovered. Set filters with macros if you want to override default filter parameters.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback.
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-1
      groups:
        - name: Templates/Applications
      items:
        - uuid: ac18129f78a54a2e95d1d48630e0eab2
          name: 'Number of devices'
          key: nvml.device.count
          delay: 1h
          description: |
            Retrieves the number of compute devices in the system. A compute device is a single GPU.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: 92b64a9d2e87418a99cd2ca814a2deac
              expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.count) <> 0'
              name: 'Nvidia: Number of devices has changed'
              event_name: 'Nvidia: Number of devices on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Number of devices has changed. Check if this was intentional.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: afe2ea47c42f4992851f02b31efd8225
          name: 'Get devices'
          key: nvml.device.get
          delay: 1h
          history: '0'
          value_type: TEXT
          description: 'Retrieves a list of Nvidia devices in the system.'
          tags:
            - tag: component
              value: nvidia
            - tag: component
              value: raw
        - uuid: 824a7555809f4e23b2f7fa72aff28a0c
          name: 'Driver version'
          key: nvml.system.driver.version
          delay: 1h
          value_type: CHAR
          description: |
            Retrieves the version of the system's graphics driver.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: da8538e357a044ee8ebea1d6d4077ffd
              expression: 'change(/Nvidia by Zabbix agent 2/nvml.system.driver.version) <> 0'
              name: 'Nvidia: Driver version has changed'
              event_name: 'Nvidia: Driver version on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: INFO
              description: |
                Driver version has changed.
                Check the Nvidia website for the specific driver version: https://www.nvidia.com/en-us/drivers/
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: 8e54cc700a9147baa5f18aa286c47205
          name: 'NVML library version'
          key: nvml.version
          delay: 1h
          value_type: CHAR
          description: |
            Retrieves the version of the NVML library.
            For all Nvidia products.
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          tags:
            - tag: component
              value: nvidia
          triggers:
            - uuid: 1f04a31c99954172a69f2c8529b429ff
              expression: 'change(/Nvidia by Zabbix agent 2/nvml.version) <> 0'
              name: 'Nvidia: NVML library has changed'
              event_name: 'Nvidia: NVML library on {HOST.HOST} has changed.'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: INFO
              description: |
                NVML library version has changed.
                Check the changelog for details: https://docs.nvidia.com/deploy/nvml-api/change-log.html
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
      discovery_rules:
        - uuid: bb7ede7d50f0427aaa043c59ee706c09
          name: 'GPU Discovery'
          type: DEPENDENT
          key: nvml.device.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$NVIDIA.NAME.MATCHES}'
              - macro: '{#NAME}'
                value: '{$NVIDIA.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#UUID}'
                value: '{$NVIDIA.UUID.MATCHES}'
              - macro: '{#UUID}'
                value: '{$NVIDIA.UUID.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Nvidia GPU discovery in the system.'
          item_prototypes:
            - uuid: cf631ee2b8d9494e81eef3e9e0bddf80
              name: '[{#UUID}]: Decoder utilization'
              key: 'nvml.device.decoder.utilization["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the current utilization for the Decoder.
                For Nvidia Kepler or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 6b41ac763eab4e83b69e1e28ec01db3d
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Decoder utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.DECODER.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Decoder utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 4cc20329b01543f7b0ef9b3a00dbff07
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Decoder utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.DECODER.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Decoder utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Decoder utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.decoder.utilization["{#UUID}"],3m) > {$NVIDIA.DECODER.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 71cabb57ad9b43c39ff05d56f753b2c1
              name: '[{#UUID}]: Encoder average FPS'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.fps["{#UUID}"]'
              units: '!fps'
              description: |
                Retrieves the trailing average FPS of all active encoder sessions for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.average_fps
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: cc4ff50ff1ed4c6d92ccb24f205b65c5
              name: '[{#UUID}]: Encoder stats'
              key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the current encoder statistics for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 727e5f7da5394d4191814d5ccb5b6af0
              name: '[{#UUID}]: Encoder average latency'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.latency["{#UUID}"]'
              value_type: FLOAT
              units: s
              description: |
                Retrieves the current encode latency for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.average_latency_ms
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: c6b3813511454b1eafa69d834dfd8d0c
                  expression: 'last(/Nvidia by Zabbix agent 2/nvml.device.encoder.stats.latency["{#UUID}"]) > (2 * avg(/Nvidia by Zabbix agent 2/nvml.device.encoder.stats.latency["{#UUID}"],3m))'
                  name: 'Nvidia: [{#UUID}]: Encoder average latency is high'
                  event_name: 'Nvidia: [{#UUID}]: Encoder average latency is 2x higher than usual.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 4a39249deb40404386492631ce987b19
              name: '[{#UUID}]: Encoder sessions'
              type: DEPENDENT
              key: 'nvml.device.encoder.stats.sessions["{#UUID}"]'
              description: |
                Retrieves the current count of active encoder sessions for a given device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.session_count
              master_item:
                key: 'nvml.device.encoder.stats.get["{#UUID}"]'
              tags:
                - tag: component
                  value: encoder
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 6cf65da338f64f6c9087f8699c2d71dc
              name: '[{#UUID}]: Encoder utilization'
              key: 'nvml.device.encoder.utilization["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the current utilization for the Encoder.
                For Nvidia Kepler or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 0c7f39babddf49469d46aba48114c45e
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Encoder utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.ENCODER.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Encoder utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: e2cb63b538514aa49c163c74b4471a39
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Encoder utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.ENCODER.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Encoder utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Encoder utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.encoder.utilization["{#UUID}"],3m) > {$NVIDIA.ENCODER.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 8f992f3cffcc42d5a0f4cac878781457
              name: '[{#UUID}]: Energy consumption'
              key: 'nvml.device.energy.consumption["{#UUID}"]'
              value_type: FLOAT
              units: J
              description: |
                Retrieves the total energy consumption of this GPU in joules since the last driver reload.
                For Nvidia Volta or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: c558f53c06b346b8a77b941211797cb2
              name: '[{#UUID}]: Memory ECC errors, corrected'
              type: DEPENDENT
              key: 'nvml.device.errors.memory.corrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU device memory errors that were corrected. For ECC errors, these are single-bit errors, for Texture memory, these are errors fixed by resend.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.corrected
              master_item:
                key: 'nvml.device.errors.memory["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 4e42cbee73874ca0a8a054a922128cf7
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.errors.memory.corrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of corrected memory ECC errors has changed'
                  event_name: 'Nvidia: Number of corrected memory ECC errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of corrected ECC errors can indicate (but not necessary mean) aging or degrading of memory.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 4daf87d77c5c4950b0e2d51e24afd1a5
              name: '[{#UUID}]: Memory ECC errors, uncorrected'
              type: DEPENDENT
              key: 'nvml.device.errors.memory.uncorrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU device memory errors that were not corrected. For ECC errors, these are double-bit errors, for Texture memory, these are errors where the resend fails.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uncorrected
              master_item:
                key: 'nvml.device.errors.memory["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: c5b2ca940c824f0d98e9aff5a5561a2b
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.errors.memory.uncorrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of uncorrected memory ECC errors has changed'
                  event_name: 'Nvidia: Number uncorrected of memory ECC errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of uncorrected ECC errors can indicate potential issues such as: data corruption, system instability, hardware issues'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: e97eacb1bef64fdaa7b55883fc37a4a9
              name: '[{#UUID}]: Memory ECC errors, get'
              key: 'nvml.device.errors.memory["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the GPU device memory error counters for the device.
                For Nvidia Fermi or newer fully supported devices.
                Requires NVML_INFOROM_ECC version 2.0 or higher to report aggregate location-based memory error counts. Requires NVML_INFOROM_ECC version 1.0 or higher to report all other memory error counts.
                Only applicable to devices with ECC.
                Requires ECC Mode to be enabled.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'No ECC on the device or ECC mode is turned off.'
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 9a7c0d865ff9423b861913b276c2b3f5
              name: '[{#UUID}]: Register file errors, corrected'
              type: DEPENDENT
              key: 'nvml.device.errors.register.corrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU register file errors that were corrected. For ECC errors, these are single-bit errors, for Texture memory, these are errors fixed by resend.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.corrected
              master_item:
                key: 'nvml.device.errors.register["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 979bd4cc64294b9aa5d0c452f84cf74a
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.errors.register.corrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of corrected register file errors has changed'
                  event_name: 'Nvidia: Number corrected of register file errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of corrected register file errors can indicate (but not necessary mean) wearing, aging or degrading of memory.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: e7a077d0610e407fb49f1ca8d782c81f
              name: '[{#UUID}]: Register file errors, uncorrected'
              type: DEPENDENT
              key: 'nvml.device.errors.register.uncorrected["{#UUID}"]'
              description: |
                Retrieves the count of GPU register file errors that were not corrected. For ECC errors, these are double-bit errors, for Texture memory, these are errors where the resend fails.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uncorrected
              master_item:
                key: 'nvml.device.errors.register["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 7fc8da6cd0624880b9838c23386df758
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.errors.register.uncorrected["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Number of uncorrected register file errors has changed'
                  event_name: 'Nvidia: Number uncorrected of register file errors on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'An increasing number of uncorrected register file errors can indicate potential issues such as: data corruption, system instability, hardware degradation.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 07ea4aec260f4850b0c2a59610f703de
              name: '[{#UUID}]: Register file errors, get'
              key: 'nvml.device.errors.register["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the GPU register file error counters for the device.
                For Nvidia Fermi or newer fully supported devices.
                Requires NVML_INFOROM_ECC version 2.0 or higher to report aggregate location-based memory error counts. Requires NVML_INFOROM_ECC version 1.0 or higher to report all other memory error counts.
                Only applicable to devices with ECC.
                Requires ECC Mode to be enabled.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'No ECC on the device or ECC mode is turned off.'
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 49283334edaa4aeb9d63d8f2794c23d7
              name: '[{#UUID}]: Fan speed'
              key: 'nvml.device.fan.speed.avg["{#UUID}"]'
              units: '%'
              description: |
                Retrieves the intended operating speed of the specified device fan.
                Note: The reported speed is the intended fan speed. If the fan is physically blocked and unable to spin, the output will not match the actual fan speed.
                For all Nvidia discrete products with dedicated fans.
                The fan speed is expressed as a percentage of the product's maximum noise tolerance fan speed. In certain cases, this value may exceed 100%.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 3311b17ca4aa4b81a6dd10af744166df
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Fan speed exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Fan speed ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.FAN.SPEED.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Fan speed is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 9aed50cb1a4c4cd4b0d6dce570bb33da
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.WARN}'
                  name: 'Nvidia: [{#UUID}]: Fan speed exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Fan speed ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.FAN.SPEED.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Fan speed is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Fan speed exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.fan.speed.avg["{#UUID}"],3m) > {$NVIDIA.FAN.SPEED.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 77bce39e010f4d4ab5fc347aebd7e61b
              name: '[{#UUID}]: Graphics frequency'
              key: 'nvml.device.graphics.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current graphics clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 141fe268d32941f19b79472a7e041ff9
              name: '[{#UUID}]: BAR1 memory, free'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.free["{#UUID}"]'
              units: B
              description: |
                Unallocated BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.free_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: da9f4e0ce0af45af9cb414b34932df70
              name: '[{#UUID}]: BAR1 memory, get'
              key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Gets Total, Available, and Used size of BAR1 memory.
                BAR1 is used to map the FB (device memory) so that it can be directly accessed by the CPU or 3rd party devices (peer-to-peer on the PCIE bus).
                For Nvidia Kepler or newer fully supported devices
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 301e573a311d48de876efc3dfe718222
              name: '[{#UUID}]: BAR1 memory, total'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.total["{#UUID}"]'
              units: B
              description: |
                Total BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.total_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: da69286b1c4f428d8a9da0d77d5a9057
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.memory.bar1.total["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Total BAR1 memory has changed'
                  event_name: 'Nvidia: Total BAR1 memory on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Total BAR1 memory has changed. This could mean possible memory degradation, hardware configuration changes, or memory reservation by system or software.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: afd6bbb5c6584e328cf37a6584970c2d
              name: '[{#UUID}]: BAR1 memory, used'
              type: DEPENDENT
              key: 'nvml.device.memory.bar1.used["{#UUID}"]'
              units: B
              description: |
                Allocated used BAR1 memory on the device.
                For Nvidia Kepler or newer fully supported devices
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.used_memory_bytes
              master_item:
                key: 'nvml.device.memory.bar1.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: fbef18bb0f4d466bbdcd859e7198f144
              name: '[{#UUID}]: FB memory, free'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.free["{#UUID}"]'
              units: B
              description: |
                Unallocated memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.free_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: cad7ac51204847e2a00a8a594a7ffecc
              name: '[{#UUID}]: FB memory, get'
              key: 'nvml.device.memory.fb.get["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the amount of used, free, reserved, and total memory available on the device.
                For all Nvidia products.
                Enabling ECC reduces the amount of total available memory due to the extra required parity bits. Under WDDM, most of the device memory is allocated and managed on startup by Windows.
                Under Linux and Windows TCC, the reported amount of used memory is equal to the sum of memory allocated by all active channels on the device.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: d30fba06739c4353bf8b39014da65b21
              name: '[{#UUID}]: FB memory, reserved'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.reserved["{#UUID}"]'
              units: B
              description: |
                Memory reserved for system use (driver or firmware) on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.reserved_memory_bytes
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'NVML library too old to support this metric.'
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: c67a14cb463e40289500c88d7f9e0997
              name: '[{#UUID}]: FB memory, total'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.total["{#UUID}"]'
              units: B
              description: |
                Total physical memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.total_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 945579a20b8e4983a07719f1b7ace8e2
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.memory.fb.total["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Total FB memory has changed'
                  event_name: 'Nvidia: Total FB memory on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Total FB memory has changed. This could mean possible memory degradation, hardware configuration changes, or memory reservation by system or software.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: c4b9a7593e6d4433b9021c9e3656ed41
              name: '[{#UUID}]: FB memory, used'
              type: DEPENDENT
              key: 'nvml.device.memory.fb.used["{#UUID}"]'
              units: B
              description: |
                Allocated memory on the device.
                For all Nvidia products.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.used_memory_bytes
              master_item:
                key: 'nvml.device.memory.fb.get["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 78918ce1cbae45bdb3a0773f3bf9bd14
              name: '[{#UUID}]: Memory frequency'
              key: 'nvml.device.memory.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current memory clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 88f5cf58ce5043b8b3f71e57eff67340
              name: '[{#UUID}]: PCIe utilization, Rx'
              type: DEPENDENT
              key: 'nvml.device.pci.utilization.rx.rate["{#UUID}"]'
              units: bps
              description: |
                The PCIe Rx (receive) throughput over a 20ms interval on the device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.rx_rate_kb_s
                - type: MULTIPLIER
                  parameters:
                    - '1024'
              master_item:
                key: 'nvml.device.pci.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 256d8cd75fb14382ae79a32ab8cc0b13
              name: '[{#UUID}]: PCIe utilization, Tx'
              type: DEPENDENT
              key: 'nvml.device.pci.utilization.tx.rate["{#UUID}"]'
              units: bps
              description: |
                The PCIe Tx (transmit) throughput over a 20ms interval on the device.
                For Nvidia Maxwell or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.tx_rate_kb_s
                - type: MULTIPLIER
                  parameters:
                    - '1024'
              master_item:
                key: 'nvml.device.pci.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 35d9d7075294487f9bd2f47f4be66dea
              name: '[{#UUID}]: PCIe utilization, get'
              key: 'nvml.device.pci.utilization["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves PCIe utilization information.
                For Nvidia Maxwell or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 5a97162894064078ad8913d647dbf76e
              name: '[{#UUID}]: Performance state'
              key: 'nvml.device.performance.state["{#UUID}"]'
              description: |
                Retrieves the current performance state for the device.
                For Nvidia Fermi or newer fully supported devices.
              valuemap:
                name: 'Performance state'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 6b99a9e1c5b841059f0e62b04001c82d
              name: '[{#UUID}]: Power limit'
              key: 'nvml.device.power.limit["{#UUID}"]'
              delay: 1h
              value_type: FLOAT
              units: watts
              description: |
                Retrieves the power management limit associated with this device.
                For Nvidia Fermi or newer fully supported devices.
                The power limit defines the upper boundary for the card's power draw. If the card's total power draw reaches this limit, the power management algorithm kicks in.
                This reading is only available if power management mode is supported.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 4c821a8812c444eca5e03cc0d223b697
                  expression: 'change(/Nvidia by Zabbix agent 2/nvml.device.power.limit["{#UUID}"]) <> 0'
                  name: 'Nvidia: [{#UUID}]: Power limit has changed'
                  event_name: 'Nvidia: [{#UUID}]Power limit on {HOST.HOST} has changed.'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: INFO
                  description: 'Power limit for the device has changed. Check if this was intentional.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: bb1c7aee478f4ba4b108491532ccd737
              name: '[{#UUID}]: Power usage'
              key: 'nvml.device.power.usage["{#UUID}"]'
              value_type: FLOAT
              units: watts
              description: |
                Retrieves power usage for this GPU (in watts) and its associated circuitry (e.g. memory).
                For Nvidia Fermi or newer fully supported devices.
                On Fermi and Kepler GPUs, the reading is accurate to within +/- 5% of current power draw. On Ampere (except GA100) or newer GPUs, the API returns power averaged over a 1 second interval. On GA100 and older architectures, instantaneous power is returned.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 94c121b6588d424f9573f6e1352b5cd4
              name: '[{#UUID}]: Serial number'
              key: 'nvml.device.serial["{#UUID}"]'
              delay: 1h
              value_type: CHAR
              description: |
                Retrieves the globally unique board serial number associated with this device's board.
                For all products with an inforom.
                This number matches the serial number tag that is physically attached to the board.
              preprocessing:
                - type: CHECK_NOT_SUPPORTED
                  parameters:
                    - '0'
                    - 'The requested operation is not available on target device'
                  error_handler: CUSTOM_ERROR
                  error_handler_params: 'The device does not support operation to retrieve serial number.'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 6e149695990a46f294361c047f288b80
              name: '[{#UUID}]: SM frequency'
              key: 'nvml.device.sm.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current SM clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: f47e1eed64354c7cb010dea8570c067b
              name: '[{#UUID}]: Temperature'
              key: 'nvml.device.temperature["{#UUID}"]'
              units: C
              description: |
                Retrieves the current temperature readings for the device, in degrees C.
                For Nvidia all products.
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 563fdb237ef84d51b53d6ce70e9c67ad
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Temperature exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Temperature ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.TEMPERATURE.CRIT} C)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Temperature is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: a5d5a632695c415eab61d427f221db93
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.WARN}'
                  name: 'Nvidia: [{#UUID}]: Temperature exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Temperature ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.TEMPERATURE.WARN} C)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Temperature is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Temperature exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.temperature["{#UUID}"],3m) > {$NVIDIA.TEMPERATURE.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 0dce87608aeb4b77b0e0df8baf1b9027
              name: '[{#UUID}]: GPU utilization'
              type: DEPENDENT
              key: 'nvml.device.utilization.gpu["{#UUID}"]'
              units: '%'
              description: |
                Percentage of time over the past sampling period during which one or more kernels were running on the GPU.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.device
              master_item:
                key: 'nvml.device.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: fcc330882ac34f59b2277dd4533d66f8
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: GPU utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: GPU utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.GPU.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: GPU utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: ffa0dd66c71e4c8991244e80d8c4c53a
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: GPU utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: GPU utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.GPU.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: GPU utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: GPU utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.gpu["{#UUID}"],3m) > {$NVIDIA.GPU.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: c545a78d63644cefac8de7c1c2cbea9a
              name: '[{#UUID}]: Memory utilization'
              type: DEPENDENT
              key: 'nvml.device.utilization.memory["{#UUID}"]'
              units: '%'
              description: |
                Percentage of time over the past sampling period during which global (device) memory was being read or written.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.memory
              master_item:
                key: 'nvml.device.utilization["{#UUID}"]'
              tags:
                - tag: component
                  value: memory
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
              trigger_prototypes:
                - uuid: 6e296d7736a2484d8b971e51b306927d
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.CRIT}'
                  name: 'Nvidia: [{#UUID}]: Memory utilization exceeded critical threshold'
                  event_name: 'Nvidia: [{#UUID}]: Memory utilization ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.MEMORY.UTIL.CRIT} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: '[{#UUID}]: Memory utilization is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 722ff2b5a1d94d5f83f2946b04c989ad
                  expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.WARN}'
                  name: 'Nvidia: [{#UUID}]: Memory utilization exceeded warning threshold'
                  event_name: 'Nvidia: [{#UUID}]: Memory utilization ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.MEMORY.UTIL.WARN} %)'
                  opdata: 'current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: '[{#UUID}]: Memory utilization is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
                  dependencies:
                    - name: 'Nvidia: [{#UUID}]: Memory utilization exceeded critical threshold'
                      expression: 'min(/Nvidia by Zabbix agent 2/nvml.device.utilization.memory["{#UUID}"],3m) > {$NVIDIA.MEMORY.UTIL.CRIT}'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 9a3e4972de4d4149bf14512be108179f
              name: '[{#UUID}]: Device utilization, get'
              key: 'nvml.device.utilization["{#UUID}"]'
              history: '0'
              value_type: TEXT
              description: |
                Retrieves the current utilization rates for the device's major subsystems.
                For Nvidia Fermi or newer fully supported devices.
              tags:
                - tag: component
                  value: nvidia
                - tag: component
                  value: raw
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
            - uuid: 91fc19e1784846b7afb982f7ae87439e
              name: '[{#UUID}]: Video frequency'
              key: 'nvml.device.video.frequency["{#UUID}"]'
              units: Hz
              description: |
                Retrieves the current video encoder/decoder clock speed for the device.
                For Nvidia Fermi or newer fully supported devices.
              preprocessing:
                - type: MULTIPLIER
                  parameters:
                    - '1000000'
              tags:
                - tag: component
                  value: nvidia
                - tag: device
                  value: '{#NAME}'
                - tag: device
                  value: '{#UUID}'
          trigger_prototypes:
            - uuid: 655ad43bd4744909aea3f843db89fe36
              expression: '(min(/Nvidia by Zabbix agent 2/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.CRIT}'
              name: 'Nvidia: [{#UUID}]: Power usage exceeded critical threshold'
              event_name: 'Nvidia: [{#UUID}]: Power usage ({ITEM.VALUE1}) exceeded critical threshold ({$NVIDIA.POWER.UTIL.CRIT} %)'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: '[{#UUID}]: Power usage is very high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
              tags:
                - tag: scope
                  value: performance
            - uuid: 5ffa7d5f130b4e46936a6f17f7773efe
              expression: '(min(/Nvidia by Zabbix agent 2/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.WARN}'
              name: 'Nvidia: [{#UUID}]: Power usage exceeded warning threshold'
              event_name: 'Nvidia: [{#UUID}]: Power usage ({ITEM.VALUE1}) exceeded warning threshold ({$NVIDIA.POWER.UTIL.WARN} %)'
              opdata: 'current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: '[{#UUID}]: Power usage is high. It may indicate abnormal behavior/activity. Change corresponding macro in case of false-positive.'
              dependencies:
                - name: 'Nvidia: [{#UUID}]: Power usage exceeded critical threshold'
                  expression: '(min(/Nvidia by Zabbix agent 2/nvml.device.power.usage["{#UUID}"],3m) * 100 / last(/Nvidia by Zabbix agent 2/nvml.device.power.limit["{#UUID}"])) > {$NVIDIA.POWER.UTIL.CRIT}'
              tags:
                - tag: scope
                  value: performance
          graph_prototypes:
            - uuid: 5d68d70d11454cb5942b251e6d1c2eb3
              name: 'Nvidia: [{#UUID}]: BAR1 memory'
              type: STACKED
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2'
                key: 'nvml.device.memory.bar1.total["{#UUID}"]'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.memory.bar1.used["{#UUID}"]'
                - sortorder: '1'
                  color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.memory.bar1.free["{#UUID}"]'
            - uuid: 9e977f8c9d5c4568b2ec57a6aeb03361
              name: 'Nvidia: [{#UUID}]: Fan speed'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.fan.speed.avg["{#UUID}"]'
            - uuid: 62d7606507774eee96f0d56fd6d74a6f
              name: 'Nvidia: [{#UUID}]: FB memory'
              type: STACKED
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2'
                key: 'nvml.device.memory.fb.total["{#UUID}"]'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.memory.fb.used["{#UUID}"]'
                - sortorder: '1'
                  color: FF8000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.memory.fb.reserved["{#UUID}"]'
                - sortorder: '2'
                  color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.memory.fb.free["{#UUID}"]'
            - uuid: 93509c440ee446d7b96c407207bcd726
              name: 'Nvidia: [{#UUID}]: Memory ECC errors'
              graph_items:
                - color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.errors.memory.corrected["{#UUID}"]'
                - sortorder: '1'
                  color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.errors.memory.uncorrected["{#UUID}"]'
            - uuid: 9acad578a5ee4ce6aeef509d5d08f824
              name: 'Nvidia: [{#UUID}]: PCIe utilization'
              graph_items:
                - color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.pci.utilization.rx.rate["{#UUID}"]'
                - sortorder: '1'
                  color: 0040FF
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.pci.utilization.tx.rate["{#UUID}"]'
            - uuid: 7a36984b772d4c3292ca0a8eafbd2c3d
              name: 'Nvidia: [{#UUID}]: Performance state'
              yaxismax: '15'
              ymin_type_1: FIXED
              ymax_type_1: FIXED
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.performance.state["{#UUID}"]'
            - uuid: 08956a3887d14562b2c12a78c7519a23
              name: 'Nvidia: [{#UUID}]: Power usage'
              ymax_type_1: ITEM
              ymax_item_1:
                host: 'Nvidia by Zabbix agent 2'
                key: 'nvml.device.power.limit["{#UUID}"]'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.power.usage["{#UUID}"]'
            - uuid: 30a5a91d874847619938568ffa0a7341
              name: 'Nvidia: [{#UUID}]: Register file errors'
              graph_items:
                - color: 76B900
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.errors.register.corrected["{#UUID}"]'
                - sortorder: '1'
                  color: FF0000
                  item:
                    host: 'Nvidia by Zabbix agent 2'
                    key: 'nvml.device.errors.register.uncorrected["{#UUID}"]'
          master_item:
            key: nvml.device.get
          lld_macro_paths:
            - lld_macro: '{#NAME}'
              path: $.device_name
            - lld_macro: '{#UUID}'
              path: $.device_uuid
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
      tags:
        - tag: class
          value: hardware
        - tag: target
          value: nvidia
      macros:
        - macro: '{$NVIDIA.DECODER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for decoder utilization, in %.'
        - macro: '{$NVIDIA.DECODER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for decoder utilization, in %.'
        - macro: '{$NVIDIA.ENCODER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for encoder utilization, in %.'
        - macro: '{$NVIDIA.ENCODER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for encoder utilization, in %.'
        - macro: '{$NVIDIA.FAN.SPEED.CRIT}'
          value: '90'
          description: 'Critical threshold for fan speed, in %.'
        - macro: '{$NVIDIA.FAN.SPEED.WARN}'
          value: '80'
          description: 'Warning threshold for fan speed, in %.'
        - macro: '{$NVIDIA.GPU.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for overall GPU utilization, in %.'
        - macro: '{$NVIDIA.GPU.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for overall GPU utilization, in %.'
        - macro: '{$NVIDIA.MEMORY.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for memory utilization, in %.'
        - macro: '{$NVIDIA.MEMORY.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for memory utilization, in %.'
        - macro: '{$NVIDIA.NAME.MATCHES}'
          value: '.*'
          description: 'Filter to include GPUs by name in discovery.'
        - macro: '{$NVIDIA.NAME.NOT_MATCHES}'
          value: 'CHANGE IF NEEDED'
          description: 'Filter to exclude GPUs by name in discovery.'
        - macro: '{$NVIDIA.POWER.UTIL.CRIT}'
          value: '90'
          description: 'Critical threshold for power usage, in %.'
        - macro: '{$NVIDIA.POWER.UTIL.WARN}'
          value: '80'
          description: 'Warning threshold for power usage, in %.'
        - macro: '{$NVIDIA.TEMPERATURE.CRIT}'
          value: '90'
          description: 'Critical threshold for temperature, in %.'
        - macro: '{$NVIDIA.TEMPERATURE.WARN}'
          value: '80'
          description: 'Warning threshold for temperature, in %.'
        - macro: '{$NVIDIA.UUID.MATCHES}'
          value: '.*'
          description: 'Filter to include GPUs by UUID in discovery.'
        - macro: '{$NVIDIA.UUID.NOT_MATCHES}'
          value: 'CHANGE IF NEEDED'
          description: 'Filter to exclude GPUs by UUID in discovery.'
      dashboards:
        - uuid: bc2dc6cc58984a20829499823a3c84fa
          name: 'Nvidia: Overview'
          pages:
            - name: Summary
              widgets:
                - type: svggraph
                  name: 'GPU utilization'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*GPU utilization*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBEFB
                - type: svggraph
                  name: Temperature
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Temperature*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECEEB
                - type: svggraph
                  name: 'Memory utilization'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory utilization*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EBEEB
                - type: svggraph
                  name: 'Power usage'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Power usage*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECEDB
            - name: Frequencies
              widgets:
                - type: svggraph
                  name: 'SM frequency'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*SM frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DCBFA
                - type: svggraph
                  name: 'Video frequency'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Video frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: FCACC
                - type: svggraph
                  name: 'Graphics frequency'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Graphics frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ADAEE
                - type: svggraph
                  name: 'Memory frequency'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory frequency*'
                    - type: INTEGER
                      name: ds.0.missingdatafunc
                      value: '1'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DAEBE
            - name: 'Memory errors'
              widgets:
                - type: svggraph
                  name: 'Memory ECC errors, corrected'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory ECC errors, corrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFB
                - type: svggraph
                  name: 'Register file Errors, corrected'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Register file errors, corrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFF
                - type: svggraph
                  name: 'Memory ECC errors, uncorrected'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Memory ECC errors, uncorrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EABFF
                - type: svggraph
                  name: 'Register file Errors, uncorrected'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Register file errors, uncorrected*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECBFA
            - name: 'Memory, PCI, fan'
              widgets:
                - type: graphprototype
                  name: 'BAR1 memory'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2'
                        name: 'Nvidia: [{#UUID}]: BAR1 memory'
                    - type: STRING
                      name: reference
                      value: DCBFB
                - type: graphprototype
                  name: 'PCIe utilization'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2'
                        name: 'Nvidia: [{#UUID}]: PCIe utilization'
                    - type: STRING
                      name: reference
                      value: ACECA
                - type: graphprototype
                  name: 'FB memory'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2'
                        name: 'Nvidia: [{#UUID}]: FB memory'
                    - type: STRING
                      name: reference
                      value: ACDCA
                - type: graphprototype
                  name: 'Fan speed'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid.0
                      value:
                        host: 'Nvidia by Zabbix agent 2'
                        name: 'Nvidia: [{#UUID}]: Fan speed'
                    - type: STRING
                      name: reference
                      value: ACFCA
            - name: Encoders
              widgets:
                - type: svggraph
                  name: 'Encoder utilization'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder utilization*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECAFB
                - type: svggraph
                  name: 'Encoder average FPS'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder average FPS*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECFFF
                - type: svggraph
                  name: 'Encoder sessions'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder sessions*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECAFF
                - type: svggraph
                  name: 'Encoder average latency'
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: ds.0.fill
                      value: '0'
                    - type: STRING
                      name: ds.0.items.0
                      value: '*Encoder average latency*'
                    - type: INTEGER
                      name: ds.0.transparency
                      value: '1'
                    - type: INTEGER
                      name: ds.0.width
                      value: '3'
                    - type: INTEGER
                      name: legend_lines
                      value: '10'
                    - type: INTEGER
                      name: legend_lines_mode
                      value: '1'
                    - type: INTEGER
                      name: legend_statistic
                      value: '1'
                    - type: STRING
                      name: reference
                      value: ECFFA
      valuemaps:
        - uuid: 9c9e6145dc87474ba03f16ea73c355d4
          name: 'Performance state'
          mappings:
            - value: '0'
              newvalue: Maximum
            - type: IN_RANGE
              value: 1-4
              newvalue: High
            - type: IN_RANGE
              value: 5-10
              newvalue: Average
            - type: IN_RANGE
              value: 11-14
              newvalue: Low
            - value: '15'
              newvalue: Minimum
            - value: '32'
              newvalue: Unknown
