zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: 36bff6c29af64692839d077febfc7079
      name: 'Templates/Network devices'
  templates:
    - uuid: 12af2a9efcc84c3298bf1654aa96c0db
      template: 'Juniper MX by NETCONF'
      name: 'Juniper MX by NETCONF'
      description: |
        The template for monitoring Juniper MX Series by NETCONF.
        
        NOTE
        This template uses SSH checks with new `subsystem` in item key, available 7.2 and above.
        
        For this template to work, you must enable the NETCONF service. To acquire this information, see the following steps:
        
          1. Enable the NETCONF service on either the default NETCONF port (830) or a user-defined port
             To use the default NETCONF port (830), include the netconf ssh statement at the [edit system services] hierarchy level:
                set netconf ssh
          2. Create a local user account:
                set user zabbix class read-only
                set plain-text-password
          3. Commit the configuration:
                commit
        
        For more details read Enable NETCONF Service over SSH https://www.juniper.net/documentation/us/en/software/junos/netconf/topics/topic-map/netconf-ssh-connection.html.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback
        
        Generated by official Zabbix template tool "Templator"
      vendor:
        name: Zabbix
        version: 7.4-0
      groups:
        - name: 'Templates/Network devices'
      items:
        - uuid: 2ab162e8b47f48018c4e3fccb7f42647
          name: 'Alarm: Get data'
          type: DEPENDENT
          key: juniper.mx.alarm.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets the alarm raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["alarm-information"]'
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 1f163e34710d49bead6eea3348b39667
          name: 'BGP: Get data'
          type: DEPENDENT
          key: juniper.mx.bgp.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets BGP raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["bgp-information-logical-system-all"]["logical-system"].first()'
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value),
                  	bgp = [],
                  	bgp_peers = [],
                  	bgp_rib = [];
                  
                  function getField(data, path, default_value) {
                  	var steps = path.split('.');
                  	var step = steps.shift();
                  
                  	while (typeof step !== 'undefined') {
                  		if (typeof data === undefined || typeof data[step] === 'undefined') {
                  			return default_value;
                  		}
                  
                  		data = data[step];
                  		step = steps.shift();
                  	}
                  	return data;
                  };
                  
                  data.forEach(function (item) {
                  	var name = getField(item, 'name'),
                  		bgp_information = getField(item, 'bgp-information', {}),
                  		bgp_peer = getField(bgp_information, 'bgp-peer', {}),
                  		bgp_peer = Array.isArray(bgp_peer) ? bgp_peer : [bgp_peer],
                  		output = getField(item, 'output');
                  
                  	if (bgp_peer && output !== "BGP is not running") {
                  		bgp_peer.forEach(function (peer) {
                  			var peer_rib = getField(peer, 'bgp-rib', {});
                  			var peer_rib = Array.isArray(peer_rib) ? peer_rib : [peer_rib];
                  			bgp_peers.push({
                  				router_name: name,
                  				peer_address: getField(peer, 'peer-address'),
                  				peer_as: getField(peer, 'peer-as'),
                  				elapsed_time: getField(peer, 'elapsed-time.@seconds'),
                  				flap_count: getField(peer, 'flap-count'),
                  				bgp_thread_mode: getField(bgp_information, 'bgp-thread-mode'),
                  				peer_state: getField(peer, 'peer-state.#text')
                  			});
                  			peer_rib.forEach(function (rib) {
                  				bgp_rib.push({
                  					router_name: name,
                  					name: getField(rib, 'name'),
                  					peer_address: getField(peer, 'peer-address'),
                  					peer_as: getField(peer, 'peer-as'),
                  					suppressed: getField(rib, 'suppressed-prefix-count'),
                  					received: getField(rib, 'received-prefix-count'),
                  					active: getField(rib, 'active-prefix-count'),
                  					accepted: getField(rib, 'accepted-prefix-count')
                  				});
                  			});
                  
                  		});
                  		bgp.push({
                  			router_name: name,
                  			down_peer_count: getField(bgp_information, 'down-peer-count'),
                  			peer_count: getField(bgp_information, 'peer-count'),
                  			bgp_thread_mode: getField(bgp_information, 'bgp-thread-mode')
                  		});
                  	}
                  });
                  
                  return JSON.stringify({ bgp, bgp_peers, bgp_rib });
          master_item:
            key: 'ssh.run[JuniperMxBgpOspf,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 4e9b028477334864a44df3010e14e896
          name: 'Routing protocols: Get rpc error'
          type: DEPENDENT
          key: juniper.mx.bgp.ospf.error
          value_type: TEXT
          description: 'Checks that the remote procedure call metrics and data have been received correctly.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.results..content.first()
              error_handler: CUSTOM_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          master_item:
            key: 'ssh.run[JuniperMxBgpOspf,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: status
          triggers:
            - uuid: 87413ff584ce42998fed3f81eadf1563
              expression: 'length(last(/Juniper MX by NETCONF/juniper.mx.bgp.ospf.error))>0'
              name: 'Juniper MX: Failed to get routing protocol data'
              event_name: 'Juniper MX: Failed to get metrics for routing protocol using RPC request'
              opdata: 'Current error: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Failed to get metrics for the routing protocol.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 6585ba2128f6407090e1fc65b8798da0
          name: 'DOM: Get rpc error'
          type: DEPENDENT
          key: juniper.mx.dom.error
          value_type: TEXT
          description: 'Checks that the remote procedure call metrics and data have been received correctly.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
              error_handler: CUSTOM_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          master_item:
            key: 'ssh.run[JuniperMxDom,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: status
          triggers:
            - uuid: dfcb87a11df74d7ab3247f668f4d6819
              expression: 'length(last(/Juniper MX by NETCONF/juniper.mx.dom.error))>0'
              name: 'Juniper MX: Failed to get DOM data'
              event_name: 'Juniper MX: Failed to get metrics for interface optics diagnostics information using RPC request'
              opdata: 'Current error: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Failed to get metrics for interface optics diagnostics information.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 2656571ab9914ccfa7079c4a5578e30f
          name: 'FAN: Get data'
          type: DEPENDENT
          key: juniper.mx.fan.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets FAN raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["fan-information"]["fan-information-percent-rpm-item"].first()'
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: a5a7b97ba77e481d88e0372543524d61
          name: 'FPC: Get data'
          type: DEPENDENT
          key: juniper.mx.fpc.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets raw data information for Packet Forwarding Engines (FPC).'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["fpc-information"]["fpc"]'
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value);
                  
                  function mergeSlot(input) {
                  	var result = [],
                  		slot_map = {},
                  		arrays = Array.isArray(input[0]) ? input : [input];
                  
                  	arrays.forEach(function (array) {
                  		array.forEach(function (obj) {
                  			var slot = obj.slot;
                  			if (!slot_map.hasOwnProperty(slot)) {
                  				slot_map[slot] = {};
                  			}
                  
                  			Object.keys(obj).forEach(function (key) {
                  				if (key !== 'slot') {
                  					slot_map[slot][key] = obj[key];
                  				}
                  			});
                  
                  			slot_map[slot]['slot'] = slot;
                  		});
                  	});
                  
                  	Object.keys(slot_map).forEach(function (key) {
                  		result.push(slot_map[key]);
                  	});
                  
                  	return result;
                  };
                  
                  var mergedData = mergeSlot(data);
                  
                  return JSON.stringify(mergedData);
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 8be3e0378212482e82c2bfe21bbc6459
          name: 'Interface information: Get rpc error'
          type: DEPENDENT
          key: juniper.mx.interface.error
          value_type: TEXT
          description: 'Checks that the remote procedure call metrics and data have been received correctly.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.results..content.first()
              error_handler: CUSTOM_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          master_item:
            key: 'ssh.run[JuniperMxInterface,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: status
          triggers:
            - uuid: a5a7ef7092c74a5298ed7fa473123ead
              expression: 'length(last(/Juniper MX by NETCONF/juniper.mx.interface.error))>0'
              name: 'Juniper MX: Failed to get interface information data'
              event_name: 'Juniper MX: Failed to get metrics for interface information using RPC request'
              opdata: 'Current error: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Failed to get metrics for interface information.'
              tags:
                - tag: scope
                  value: availability
        - uuid: 47ee207624e242439704c40754b98056
          name: 'OSPF: Get data'
          type: DEPENDENT
          key: juniper.mx.ospf.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets OSPF raw data.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value),
                  	ospf = [],
                  	ospf3 = [];
                  
                  function getField(data, path, default_value) {
                  	var steps = path.split('.');
                  	var step = steps.shift();
                  
                  	while (typeof step !== 'undefined') {
                  		if (typeof data === undefined || typeof data[step] === 'undefined') {
                  			return default_value;
                  		}
                  
                  		data = data[step];
                  		step = steps.shift();
                  	}
                  	return data;
                  };
                  
                  var ospf_data = getField(data, 'results.2.rpc-reply.ospf-neighbor-information-logical-system-all.logical-system', {});
                  var ospf3_data = getField(data, 'results.3.rpc-reply.ospf3-neighbor-information-logical-system-all.logical-system', {});
                  
                  ospf_data.forEach(function (item) {
                  	var name = getField(item, 'name'),
                  		ospf_information = getField(item, 'ospf-neighbor-information', {}),
                  		ospf_neighbor = getField(ospf_information, 'ospf-neighbor', {}),
                  		ospf_neighbor = Array.isArray(ospf_neighbor) ? ospf_neighbor : [ospf_neighbor],
                  		output = getField(item, 'output');
                  
                  	if (ospf_neighbor && output !== "OSPF instance is not running") {
                  		ospf_neighbor.forEach(function (neighbor) {
                  			ospf.push({
                  				router_name: name,
                  				neighbor_address: getField(neighbor, 'neighbor-address'),
                  				interface_name: getField(neighbor, 'interface-name'),
                  				uptime: getField(neighbor, 'neighbor-up-time.@seconds'),
                  				neighbor_state: getField(neighbor, 'ospf-neighbor-state'),
                  			});
                  		});
                  	}
                  });
                  
                  ospf3_data.forEach(function (item) {
                  	var name = getField(item, 'name'),
                  		ospf_information = getField(item, 'ospf3-neighbor-information', {}),
                  		ospf_neighbor = getField(ospf_information, 'ospf3-neighbor', {}),
                  		ospf_neighbor = Array.isArray(ospf_neighbor) ? ospf_neighbor : [ospf_neighbor],
                  		output = getField(item, 'output');
                  
                  	if (ospf_neighbor && output !== "OSPF instance is not running") {
                  		ospf_neighbor.forEach(function (neighbor) {
                  			ospf3.push({
                  				router_name: name,
                  				neighbor_address: getField(neighbor, 'neighbor-address'),
                  				interface_name: getField(neighbor, 'interface-name'),
                  				uptime: getField(neighbor, 'neighbor-up-time.@seconds'),
                  				neighbor_state: getField(neighbor, 'ospf-neighbor-state'),
                  			});
                  		});
                  	}
                  });
                  
                  return JSON.stringify({ ospf, ospf3 });
          master_item:
            key: 'ssh.run[JuniperMxBgpOspf,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: d0d76f6d630b46268d16d150981bfd52
          name: 'PEM: Get data'
          type: DEPENDENT
          key: juniper.mx.pem.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets PEM raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["environment-component-information"]["environment-component-item"].first()'
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 236c11c6d9974ba793906551070f5d9c
          name: 'Resource: Get rpc error'
          type: DEPENDENT
          key: juniper.mx.resource.error
          value_type: TEXT
          description: 'Checks that the remote procedure call metrics and data have been received correctly.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.results..content.first()
              error_handler: CUSTOM_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 3h
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: status
          triggers:
            - uuid: 8024cb1b52674ead8078349570742f0e
              expression: 'length(last(/Juniper MX by NETCONF/juniper.mx.resource.error))>0'
              name: 'Juniper MX: Failed to get resource data'
              event_name: 'Juniper MX: Failed to get metrics for resource using RPC request'
              opdata: 'Current error: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'Failed to get metrics for the resource.'
              tags:
                - tag: scope
                  value: availability
        - uuid: a62d84c9063b49c7b54d34e1e43cc01e
          name: 'Routing Engine: Get data'
          type: DEPENDENT
          key: juniper.mx.routing.engine.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets Routing Engine information raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["route-engine-information"]["route-engine"]'
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value);
                  
                  function addSlot(arr) {
                  	for (var i = 0; i < arr.length; i++) {
                  		if (!arr[i].hasOwnProperty('slot')) {
                  			arr[i]['slot'] = '0';
                  		}
                  	}
                  	return arr;
                  }
                  
                  data = addSlot(data);
                  
                  return JSON.stringify(data);
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 9b76281cf92f4c63805afd7fbfe8a79c
          name: 'Storage: Get data'
          type: DEPENDENT
          key: juniper.mx.storage.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets storage raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["system-storage-information"]["filesystem"].first()'
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: 4a84cb99fe78404f8eae5b9b5e682baa
          name: 'Temperature: Get data'
          type: DEPENDENT
          key: juniper.mx.temperature.data.get
          history: '0'
          value_type: TEXT
          description: 'Gets temperature raw data.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["environment-information"]["environment-item"].first()'
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value);
                  
                  function addClass(arr) {
                  	for (var i = 0; i < arr.length; i++) {
                  		if (!arr[i].hasOwnProperty('class')) {
                  			arr[i]['class'] = 'Unknown';
                  		}
                  	}
                  	return arr;
                  }
                  
                  data = addClass(data);
                  
                  return JSON.stringify(data);
          master_item:
            key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          tags:
            - tag: component
              value: raw
        - uuid: a5f2e862b7d04ebea583840735ca359b
          name: 'NETCONF: Service response time'
          type: SIMPLE
          key: 'net.tcp.service.perf[ssh,"{$JUNIPER.MX.NETCONF.IP}","{$JUNIPER.MX.NETCONF.PORT}"]'
          value_type: FLOAT
          units: s
          description: |
            Checks the performance of a TCP service.
            Possible values: a float representing the response time in seconds, or `0.000000` indicating the service is down.
          tags:
            - tag: component
              value: health
            - tag: component
              value: network
          triggers:
            - uuid: ff60b0ce48d94a7da65db91333507df3
              expression: 'min(/Juniper MX by NETCONF/net.tcp.service.perf[ssh,"{$JUNIPER.MX.NETCONF.IP}","{$JUNIPER.MX.NETCONF.PORT}"],5m)>{$JUNIPER.MX.NETCONF.RESPONSE_TIME.MAX.WARN}'
              name: 'Juniper MX: NETCONF response time is too high'
              event_name: 'Juniper MX: NETCONF response time is too high (over {$JUNIPER.MX.NETCONF.RESPONSE_TIME.MAX.WARN}s for 5m)'
              opdata: 'Response time: {ITEM.LASTVALUE1}'
              priority: WARNING
              manual_close: 'YES'
              dependencies:
                - name: 'Juniper MX: NETCONF is not available'
                  expression: 'last(/Juniper MX by NETCONF/net.tcp.service[ssh,"{$JUNIPER.MX.NETCONF.IP}","{$JUNIPER.MX.NETCONF.PORT}"])=0'
              tags:
                - tag: scope
                  value: performance
        - uuid: ce22a1eda3874f8c9df95f932b918d5f
          name: 'NETCONF: Service status'
          type: SIMPLE
          key: 'net.tcp.service[ssh,"{$JUNIPER.MX.NETCONF.IP}","{$JUNIPER.MX.NETCONF.PORT}"]'
          description: |
            Checks if a service is running and accepting NETCONF connections.
            Possible values: 0 - the service is down; 1 - the service is running.
          valuemap:
            name: 'Service status'
          tags:
            - tag: component
              value: health
            - tag: component
              value: network
          triggers:
            - uuid: fb93ede78cb9412b86391f775b8fcfc2
              expression: 'last(/Juniper MX by NETCONF/net.tcp.service[ssh,"{$JUNIPER.MX.NETCONF.IP}","{$JUNIPER.MX.NETCONF.PORT}"])=0'
              name: 'Juniper MX: NETCONF is not available'
              opdata: 'Current status: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: 'NETCONF is unavailable on the specified TCP port. Possible causes include service downtime, port blockage, or network issues.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: availability
        - uuid: bf26f0a8e3e7481692c4150217a3802b
          name: 'Routing protocols: Get data'
          type: SSH
          key: 'ssh.run[JuniperMxBgpOspf,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          delay: 0;s15
          history: '0'
          value_type: TEXT
          params: |
            <rpc>
                <get-bgp-summary-information>
                        <logical-system>all</logical-system>
                </get-bgp-summary-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-ospf-neighbor-information>
                    <logical-system>all</logical-system>
                    <detail/>
                </get-ospf-neighbor-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-ospf3-neighbor-information>
                    <logical-system>all</logical-system>
                    <detail/>
                </get-ospf3-neighbor-information>
            </rpc>
            ]]>]]>
            <rpc>
                <close-session/>
            </rpc>
            ]]>]]>
          username: '{$JUNIPER.MX.NETCONF.USERNAME}'
          password: '{$JUNIPER.MX.NETCONF.PASSWORD}'
          description: 'Gets routing protocol information data using the RPC request NETCONF server.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var parts = value.split(']]>]]>'),
                  	results = [],
                  	skipped_parts = [];
                  
                  function cleanObject(obj) {
                  	if (Array.isArray(obj)) {
                  		return obj.map(cleanObject);
                  	} else if (typeof obj === 'object' && obj !== null) {
                  		var cleaned_obj = {};
                  		for (var key in obj) {
                  			if (obj.hasOwnProperty(key)) {
                  				cleaned_obj[key] = cleanObject(obj[key]);
                  			}
                  		}
                  		return cleaned_obj;
                  	} else if (typeof obj === 'string') {
                  		return obj.replace(/\n/g, "");
                  	}
                  	return obj;
                  };
                  
                  for (var i = 0; i < parts.length; i++) {
                  	var part = parts[i].trim();
                  	if (part) {
                  		if (part.startsWith('<!--') && part.endsWith('-->')) {
                  			skipped_parts.push({ skipped: 'comment in XML', content: part });
                  			continue
                  		}
                  
                  		try {
                  			results.push(JSON.parse(XML.toJson(part)));
                  		} catch (error) {
                  			results.push({ error: "Failed to parse XML response " + i, content: part });
                  		}
                  	}
                  };
                  
                  results = cleanObject(results);
                  
                  return JSON.stringify({ results, skipped_parts });
          timeout: '{$JUNIPER.MX.NETCONF.TIMEOUT}'
          tags:
            - tag: component
              value: raw
        - uuid: b08e9571da564af3bfcefcde64221d1f
          name: 'DOM: Get data'
          type: SSH
          key: 'ssh.run[JuniperMxDom,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          delay: 0;s30
          history: '0'
          value_type: TEXT
          params: |
            <rpc>
                <get-interface-optics-diagnostics-information>
                </get-interface-optics-diagnostics-information>
            </rpc>
            ]]>]]>
            <rpc>
                <close-session/>
            </rpc>
            ]]>]]>
          username: '{$JUNIPER.MX.NETCONF.USERNAME}'
          password: '{$JUNIPER.MX.NETCONF.PASSWORD}'
          description: 'Gets interface optics diagnostics information using the RPC request NETCONF server.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var parts = value.split(']]>]]>'),
                  	results = [],
                  	skipped_parts = [];
                  
                  function cleanObject(obj) {
                  	if (Array.isArray(obj)) {
                  		return obj.map(cleanObject);
                  	} else if (typeof obj === 'object' && obj !== null) {
                  		var cleaned_obj = {};
                  		for (var key in obj) {
                  			if (obj.hasOwnProperty(key)) {
                  				cleaned_obj[key] = cleanObject(obj[key]);
                  			}
                  		}
                  		return cleaned_obj;
                  	} else if (typeof obj === 'string') {
                  		return obj.replace(/\n/g, "");
                  	}
                  	return obj;
                  };
                  
                  for (var i = 0; i < parts.length; i++) {
                  	var part = parts[i].trim();
                  	if (part) {
                  		if (part.startsWith('<!--') && part.endsWith('-->')) {
                  			skipped_parts.push({ skipped: 'comment in XML', content: part });
                  			continue
                  		}
                  
                  		try {
                  			results.push(JSON.parse(XML.toJson(part)));
                  		} catch (error) {
                  			results.push({ error: "Failed to parse XML response " + i, content: part });
                  		}
                  	}
                  };
                  
                  results = cleanObject(results);
                  
                  return JSON.stringify({ results, skipped_parts });
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value),
                  	metrics = [],
                  	alarms = [],
                  	error;
                  
                  function getField(data, path, default_value) {
                  	var steps = path.split('.');
                  	var step = steps.shift();
                  
                  	while (typeof step !== 'undefined') {
                  		if (typeof data === undefined || typeof data[step] === 'undefined') {
                  			return default_value;
                  		}
                  
                  		data = data[step];
                  		step = steps.shift();
                  	}
                  	return data;
                  };
                  
                  var result = data.results[1];
                  
                  if (typeof result[error] === undefined || result['rpc-reply'] !== undefined) {
                  
                  	var dom = getField(result, 'rpc-reply.interface-information.physical-interface');
                  
                  	dom.forEach(function (item) {
                  		var name = getField(item, 'name'),
                  			diagnostics = getField(item, 'optics-diagnostics'),
                  			lane_values = getField(diagnostics, 'optics-diagnostics-lane-values');
                  
                  		if (lane_values) {
                  			lane_values.forEach(function (lane) {
                  				metrics.push({
                  					name: name,
                  					lane_index: getField(lane, 'lane-index'),
                  					multi: 1,
                  					tx_power: getField(lane, 'laser-output-power-dbm'),
                  					rx_power: getField(lane, 'laser-rx-optical-power')
                  				});
                  
                  				alarms.push({
                  					name: name,
                  					lane_index: getField(lane, 'lane-index'),
                  					tx_loss_signal: getField(lane, 'tx-loss-of-signal-functionality-alarm'),
                  					tx_laser_disabled: getField(lane, 'tx-laser-disabled-alarm'),
                  					bias_high: getField(lane, 'laser-bias-current-high-alarm'),
                  					bias_low: getField(lane, 'laser-bias-current-low-alarm'),
                  					rx_loss_signal: getField(lane, 'rx-loss-of-signal-alarm'),
                  					rx_high: getField(lane, 'laser-rx-power-high-alarm'),
                  					rx_low: getField(lane, 'laser-rx-power-low-alarm'),
                  					voltage_high: getField(diagnostics, 'module-voltage-high-alarm'),
                  					voltage_low: getField(diagnostics, 'module-voltage-low-alarm'),
                  					temperature_high: getField(diagnostics, 'module-temperature-high-alarm'),
                  					temperature_low: getField(diagnostics, 'module-temperature-low-alarm')
                  				});
                  			});
                  		} else {
                  			metrics.push({
                  				name: name,
                  				lane_index: 0,
                  				multi: 0,
                  				tx_power: getField(diagnostics, 'laser-output-power-dbm'),
                  				rx_power: getField(diagnostics, 'rx-signal-avg-optical-power-dbm')
                  			});
                  			alarms.push({
                  				name: name,
                  				lane_index: 0,
                  				bias_high: getField(diagnostics, 'laser-bias-current-high-alarm'),
                  				bias_low: getField(diagnostics, 'laser-bias-current-low-alarm'),
                  				rx_high: getField(diagnostics, 'laser-rx-power-high-alarm'),
                  				rx_low: getField(diagnostics, 'laser-rx-power-low-alarm'),
                  				tx_high: getField(diagnostics, 'laser-tx-power-high-alarm'),
                  				tx_low: getField(diagnostics, 'laser-tx-power-low-alarm'),
                  				voltage_high: getField(diagnostics, 'module-voltage-high-alarm'),
                  				voltage_low: getField(diagnostics, 'module-voltage-low-alarm'),
                  				temperature_high: getField(diagnostics, 'module-temperature-high-alarm'),
                  				temperature_low: getField(diagnostics, 'module-temperature-low-alarm')
                  			});
                  		}
                  	});
                  }
                  else {
                  	error = result.content;
                  };
                  
                  return JSON.stringify({ metrics, alarms, error });
          timeout: '{$JUNIPER.MX.NETCONF.TIMEOUT}'
          tags:
            - tag: component
              value: raw
        - uuid: 5087b2674f6f42128e865119aac94a64
          name: 'Interface information: Get data'
          type: SSH
          key: 'ssh.run[JuniperMxInterface,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          delay: 0;s00
          history: '0'
          value_type: TEXT
          params: |
            <rpc>
                <get-interface-information>
                        <statistics/>
                        <detail/>
                </get-interface-information>
            </rpc>
            ]]>]]>
            <rpc>
                <close-session/>
            </rpc>
            ]]>]]>
          username: '{$JUNIPER.MX.NETCONF.USERNAME}'
          password: '{$JUNIPER.MX.NETCONF.PASSWORD}'
          description: 'Gets interface information using the RPC request NETCONF server.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var parts = value.split(']]>]]>'),
                  	results = [],
                  	skipped_parts = [];
                  
                  function cleanObject(obj) {
                  	if (Array.isArray(obj)) {
                  		return obj.map(cleanObject);
                  	} else if (typeof obj === 'object' && obj !== null) {
                  		var cleaned_obj = {};
                  		for (var key in obj) {
                  			if (obj.hasOwnProperty(key)) {
                  				cleaned_obj[key] = cleanObject(obj[key]);
                  			}
                  		}
                  		return cleaned_obj;
                  	} else if (typeof obj === 'string') {
                  		return obj.replace(/\n/g, "");
                  	}
                  	return obj;
                  };
                  
                  for (var i = 0; i < parts.length; i++) {
                  	var part = parts[i].trim();
                  	if (part) {
                  		if (part.startsWith('<!--') && part.endsWith('-->')) {
                  			skipped_parts.push({ skipped: 'comment in XML', content: part });
                  			continue
                  		}
                  
                  		try {
                  			results.push(JSON.parse(XML.toJson(part)));
                  		} catch (error) {
                  			results.push({ error: "Failed to parse XML response " + i, content: part });
                  		}
                  	}
                  };
                  
                  results = cleanObject(results);
                  
                  return JSON.stringify({ results, skipped_parts });
          timeout: '{$JUNIPER.MX.NETCONF.TIMEOUT}'
          tags:
            - tag: component
              value: raw
        - uuid: b6f6235bfc6a42238cf6e03ebf43d00d
          name: 'Resource: Get data'
          type: SSH
          key: 'ssh.run[JuniperMxResource,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          delay: 0;s45
          history: '0'
          value_type: TEXT
          params: |
            <rpc>
                <get-fpc-information>
                </get-fpc-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-fpc-information>
                        <detail/>
                </get-fpc-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-route-engine-information>
                </get-route-engine-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-alarm-information>
                </get-alarm-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-system-storage>
                </get-system-storage>
            </rpc>
            ]]>]]>
            <rpc>
                <get-environment-information>
                </get-environment-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-environment-pem-information>
                </get-environment-pem-information>
            </rpc>
            ]]>]]>
            <rpc>
                <get-fan-information>
                </get-fan-information>
            </rpc>
            ]]>]]>
            <rpc>
                <close-session/>
            </rpc>
            ]]>]]>
          username: '{$JUNIPER.MX.NETCONF.USERNAME}'
          password: '{$JUNIPER.MX.NETCONF.PASSWORD}'
          description: 'Gets resource information data using the RPC request NETCONF server.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var parts = value.split(']]>]]>'),
                  	results = [],
                  	skipped_parts = [];
                  
                  function cleanObject(obj) {
                  	if (Array.isArray(obj)) {
                  		return obj.map(cleanObject);
                  	} else if (typeof obj === 'object' && obj !== null) {
                  		var cleaned_obj = {};
                  		for (var key in obj) {
                  			if (obj.hasOwnProperty(key)) {
                  				cleaned_obj[key] = cleanObject(obj[key]);
                  			}
                  		}
                  		return cleaned_obj;
                  	} else if (typeof obj === 'string') {
                  		return obj.replace(/\n/g, "");
                  	}
                  	return obj;
                  };
                  
                  for (var i = 0; i < parts.length; i++) {
                  	var part = parts[i].trim();
                  	if (part) {
                  		if (part.startsWith('<!--') && part.endsWith('-->')) {
                  			skipped_parts.push({ skipped: 'comment in XML', content: part });
                  			continue
                  		}
                  
                  		try {
                  			results.push(JSON.parse(XML.toJson(part)));
                  		} catch (error) {
                  			results.push({ error: "Failed to parse XML response " + i, content: part });
                  		}
                  	}
                  };
                  
                  results = cleanObject(results);
                  
                  return JSON.stringify({ results, skipped_parts });
          timeout: '{$JUNIPER.MX.NETCONF.TIMEOUT}'
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: f48d3c13f70d481285ce4af92c297b82
          name: 'Alarm discovery'
          type: DEPENDENT
          key: juniper.mx.alarm.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#ALARM_CLASS}'
                value: '{$JUNIPER.MX.ALARM.CLASS.MATCHES}'
              - macro: '{#ALARM_CLASS}'
                value: '{$JUNIPER.MX.ALARM.CLASS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#ALARM_NAME}'
                value: '{$JUNIPER.MX.ALARM.NAME.MATCHES}'
              - macro: '{#ALARM_NAME}'
                value: '{$JUNIPER.MX.ALARM.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Scanning `show system alarms` for alarms.'
          item_prototypes:
            - uuid: 35604dbe296949dd807fca20e11973dc
              name: 'Alarm [{#ALARM_NAME}]: Get data'
              type: DEPENDENT
              key: 'juniper.mx.alarm.get.data["{#ALARM_NAME}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets system alarm data about the state and the alarm reason.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.["alarm-detail"]["alarm-short-description"] == "{#ALARM_NAME}")].first()'
              master_item:
                key: juniper.mx.alarm.data.get
              tags:
                - tag: class
                  value: '{#ALARM_TYPE}'
                - tag: component
                  value: raw
            - uuid: 5f553388d97b41f9bfe8a4e72a5b7b15
              name: 'Alarm [{#ALARM_NAME}]: Severity'
              type: DEPENDENT
              key: 'juniper.mx.alarm.severity["{#ALARM_NAME}"]'
              description: |
                Alarms can be categorized in one of four severities: critical, major, minor, and info.
                Alarm description: '[{#ALARM_DESCR}]'
              valuemap:
                name: 'Alarm severity'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["alarm-detail"]["alarm-class"]'
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Info'', ''Minor'', ''Major'', ''Critical''].indexOf(value) + 1 || ''Problem with status processing in JS, no such Alarm Severity: '' + value;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.alarm.get.data["{#ALARM_NAME}"]'
              tags:
                - tag: class
                  value: '{#ALARM_TYPE}'
                - tag: component
                  value: alarms
              trigger_prototypes:
                - uuid: 836ae1c312a548a7b14471cbb43b10a8
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.alarm.severity["{#ALARM_NAME}"])=4'
                  name: 'Juniper MX: [{#ALARM_NAME}] has ''Critical'' state'
                  priority: HIGH
                  description: |
                    Alarm '[{#ALARM_NAME}]' is of the severity `Critical`.
                    Reason: '[{#ALARM_DESCR}]'
                  tags:
                    - tag: scope
                      value: availability
                - uuid: 59b59dd9c02a4c50b743c7b5ec746083
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.alarm.severity["{#ALARM_NAME}"])=3'
                  name: 'Juniper MX: [{#ALARM_NAME}] has ''Major'' state'
                  priority: AVERAGE
                  description: |
                    Alarm '[{#ALARM_NAME}]' is of the severity `Major`.
                    Reason: '[{#ALARM_DESCR}]'
                  tags:
                    - tag: scope
                      value: availability
          master_item:
            key: juniper.mx.alarm.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var alarms = JSON.parse(value);
                  
                  var result = alarms.map(function (alarm) {
                  	summary = alarm['alarm-summary']
                  	if (summary['no-active-alarms'] !== null) {
                  		return {
                  			'{#ALARM_DESCR}': alarm['alarm-detail']['alarm-description'] !== null ? alarm['alarm-detail']['alarm-description'] : 'None',
                  			'{#ALARM_CLASS}': alarm['alarm-detail']['alarm-class'],
                  			'{#ALARM_TYPE}': alarm['alarm-detail']['alarm-type'],
                  			'{#ALARM_NAME}': alarm['alarm-detail']['alarm-short-description']
                  		};
                  	} else {
                  		return {
                  			'{#ALARM_NAME}': 'no-active-alarms',
                  			'{#ALARM_CLASS}': ''
                  		}
                  	};
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          overrides:
            - name: 'No active alarms'
              step: '1'
              filter:
                conditions:
                  - macro: '{#ALARM_NAME}'
                    value: no-active-alarms
              operations:
                - operator: LIKE
                  value: ': Get data'
                  discover: NO_DISCOVER
                - operator: LIKE
                  value: ': Severity'
                  discover: NO_DISCOVER
        - uuid: c6243e5241df4bcab940800ef0e1045a
          name: 'BGP Peer discovery'
          type: DEPENDENT
          key: juniper.mx.bgp.peer.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#BGP_PEER_REMOTE_ADDR}'
                value: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.MATCHES}'
              - macro: '{#BGP_PEER_REMOTE_ADDR}'
                value: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.MATCHES}'
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'BGP peer discovery.'
          item_prototypes:
            - uuid: aec2303e8f11405eb85c563260aacfdb
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: Established time'
              type: DEPENDENT
              key: 'juniper.mx.bgp.elapsed.time["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              units: s
              description: 'This timer indicates how long (in seconds) this peer has been in the Established state or how long since this peer was last in the Established state. It is set to zero when a new peer is configured or the router is booted.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.elapsed_time
              master_item:
                key: 'juniper.mx.bgp.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 215fda243f994ade87d040e54d4313ac
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: Flap count'
              type: DEPENDENT
              key: 'juniper.mx.bgp.flap.count["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              description: 'Flap count is the total number of BGP session flaps from a router.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.flap_count
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.bgp.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: ff6fabc5daa14f44938d8655a8091875
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.bgp.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets BGP raw data for router ''[{#BGP_ROUTER_NAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.bgp_peers[?(@.router_name == "{#BGP_ROUTER_NAME}" && @.peer_address == "{#BGP_PEER_REMOTE_ADDR}" && @.peer_as == "{#BGP_PEER_REMOTE_AS}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.bgp.data.get
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: component
                  value: raw
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 9cdaeb69fa2c4f81b4ccb9abe5a88098
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: State'
              type: DEPENDENT
              key: 'juniper.mx.bgp.state["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              description: 'The remote BGP peer''s FSM state.'
              valuemap:
                name: 'BGP peer state'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.peer_state
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Idle'', ''Connect'', ''Active'', ''OpenSent'', ''OpenConfirm'', ''Established''].indexOf(value) + 1 || ''Problem with status processing in JS, no such BGP state: '' + value;'
              master_item:
                key: 'juniper.mx.bgp.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 2a2a570e6a51407591280112d4c89eee
                  expression: 'count(/Juniper MX by NETCONF/juniper.mx.bgp.state["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}"],#3,"regexp","{$JUNIPER.MX.BGP.PEER.STATE}")=0'
                  name: 'Juniper MX: BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: Is down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: HIGH
                  description: |
                    Session BGP Router '[{#BGP_ROUTER_NAME}]', AS '[{#BGP_PEER_REMOTE_AS}]', peer '[{#BGP_PEER_REMOTE_ADDR}]' is down, check BGP configuration.
                    For information on checking BGP configuration, see: https://www.juniper.net/documentation/us/en/software/junos/bgp/topics/topic-map/troubleshooting-bgp-sessions.html.
                  tags:
                    - tag: scope
                      value: notice
          master_item:
            key: juniper.mx.bgp.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var bgp = JSON.parse(value);
                  
                  var result = bgp.bgp_peers.map(function (peer) {
                    return {
                  	'{#BGP_ROUTER_NAME}': peer['router_name'],
                  	'{#BGP_PEER_REMOTE_ADDR}': peer['peer_address'],
                  	'{#BGP_PEER_REMOTE_AS}': peer['peer_as']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: ec4688c78a544e7ab9e65d5dadc5cd75
          name: 'BGP Prefix counter discovery'
          type: DEPENDENT
          key: juniper.mx.bgp.prefix.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#BGP_PEER_REMOTE_ADDR}'
                value: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.MATCHES}'
              - macro: '{#BGP_PEER_REMOTE_ADDR}'
                value: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.MATCHES}'
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'BGP RIB router discovery.'
          item_prototypes:
            - uuid: 831819ee09234b4699863099ca8bf995
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}] RIB [{#BGP_RIB_NAME}]: Accepted prefixes'
              type: DEPENDENT
              key: 'juniper.mx.bgp.prefix.accepted["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              description: 'The number of prefixes for a peer that are installed in the Adj-RIBs-In and are eligible to become active in the Loc-RIB.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.accepted
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.bgp.prefix.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: rib
                  value: '{#BGP_RIB_NAME}'
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 37e63ca8bbcf4ae68abe6b94d22c53e7
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}] RIB [{#BGP_RIB_NAME}]: Active prefixes'
              type: DEPENDENT
              key: 'juniper.mx.bgp.prefix.active["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              description: 'The number of prefixes active from a peer.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.active
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.bgp.prefix.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: rib
                  value: '{#BGP_RIB_NAME}'
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 4a9577aafcb54be3a02a3fa8d73fb833
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}] RIB [{#BGP_RIB_NAME}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.bgp.prefix.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets data for RIB ''[{#BGP_RIB_NAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.bgp_rib[?(@.router_name == "{#BGP_ROUTER_NAME}" && @.name == "{#BGP_RIB_NAME}" && @.peer_address == "{#BGP_PEER_REMOTE_ADDR}" && @.peer_as == "{#BGP_PEER_REMOTE_AS}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.bgp.data.get
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: component
                  value: raw
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 5372572e533e41a189665f6d746c7c45
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}] RIB [{#BGP_RIB_NAME}]: Received prefixes'
              type: DEPENDENT
              key: 'juniper.mx.bgp.prefix.received["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              description: 'The number of prefixes received from a peer and stored in the Adj-RIBs-In for that peer.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.received
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.bgp.prefix.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: rib
                  value: '{#BGP_RIB_NAME}'
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
            - uuid: 8ad99df590844d32b4ff0780dc88dff1
              name: 'BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}] RIB [{#BGP_RIB_NAME}]: Suppressed prefixes'
              type: DEPENDENT
              key: 'juniper.mx.bgp.prefix.suppressed["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              description: 'The number of suppressed prefixes for a peer.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.accepted
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.bgp.prefix.get["{#BGP_ROUTER_NAME}","{#BGP_PEER_REMOTE_ADDR}","{#BGP_PEER_REMOTE_AS}","{#BGP_RIB_NAME}"]'
              tags:
                - tag: address
                  value: '{#BGP_PEER_REMOTE_ADDR}'
                - tag: as
                  value: '{#BGP_PEER_REMOTE_AS}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: rib
                  value: '{#BGP_RIB_NAME}'
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
          master_item:
            key: juniper.mx.bgp.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var bgp = JSON.parse(value);
                  
                  var result = bgp.bgp_rib.map(function (rib) {
                    return {
                  	'{#BGP_RIB_NAME}': rib['name'],
                  	'{#BGP_ROUTER_NAME}': rib['router_name'],
                  	'{#BGP_PEER_REMOTE_ADDR}': rib['peer_address'],
                  	'{#BGP_PEER_REMOTE_AS}': rib['peer_as']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: cb3df2a3b83f42b3ad5c0856c4744cdb
          name: 'BGP Router discovery'
          type: DEPENDENT
          key: juniper.mx.bgp.router.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.MATCHES}'
              - macro: '{#BGP_ROUTER_NAME}'
                value: '{$JUNIPER.MX.BGP.ROUTER.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'BGP router discovery and information retrieval.'
          item_prototypes:
            - uuid: 96fe80ba224549629c453420cf530bfc
              name: 'BGP Router [{#BGP_ROUTER_NAME}]: Down peers count'
              type: DEPENDENT
              key: 'juniper.mx.bgp.router.peer.down["{#BGP_ROUTER_NAME}"]'
              description: 'Gets the number of down peers on router ''[{#BGP_ROUTER_NAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.bgp[?(@.router_name == "{#BGP_ROUTER_NAME}")].down_peer_count.first()'
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: juniper.mx.bgp.data.get
              tags:
                - tag: bgp-thread-mode
                  value: '{#BGP_THREAD_MODE}'
                - tag: component
                  value: bgp
                - tag: component
                  value: network
                - tag: router
                  value: '{#BGP_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 6004b951e5654a24a858757e451f39f4
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.bgp.router.peer.down["{#BGP_ROUTER_NAME}"]) = {#BGP_PEER_COUNT}'
                  name: 'Juniper MX: BGP Router [{#BGP_ROUTER_NAME}] AS [{#BGP_PEER_REMOTE_AS}] Peer [{#BGP_PEER_REMOTE_ADDR}]: Down peers is equal to peers'
                  event_name: 'Juniper MX: Router: "{#BGP_ROUTER_NAME}": Down peer count on router is equal to peer count'
                  priority: HIGH
                  description: 'The number of down peers is equal to the number of peers on the router ''[{#BGP_ROUTER_NAME}]''. For information on checking BGP configuration, see: https://www.juniper.net/documentation/us/en/software/junos/bgp/topics/topic-map/troubleshooting-bgp-sessions.html.'
                  tags:
                    - tag: scope
                      value: notice
          master_item:
            key: juniper.mx.bgp.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var routers = JSON.parse(value);
                  
                  var result = routers.bgp.map(function (router) {
                    return {
                  	'{#BGP_ROUTER_NAME}': router['router_name'],
                  	'{#BGP_THREAD_MODE}': router['bgp_thread_mode'],
                  	'{#BGP_PEER_COUNT}': router['peer_count']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: f23396b48b1b4e8e9a8ca9c76f769384
          name: 'Multi-lane DOM discovery'
          type: DEPENDENT
          key: juniper.mx.dom.lane.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#SFPIFNAME}'
                value: '{$JUNIPER.MX.NET.IF.SFP.NAME.MATCHES}'
              - macro: '{#SFPIFNAME}'
                value: '{$JUNIPER.MX.NET.IF.SFP.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Used for retrieving information about the Digital Optical Monitoring lane SFF optical Module from NETCONF.'
          item_prototypes:
            - uuid: 21fe9de68a4d45e0bb2c31da2b173006
              name: 'SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Module alarms'
              type: DEPENDENT
              key: 'juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]'
              value_type: TEXT
              description: 'Gets module alarms for physical interface ''[{#SFPIFNAME}]'', line ''[{#LANEID}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.alarms[?(@.name == "{#SFPIFNAME}" && @.lane_index == "{#LANEID}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'ssh.run[JuniperMxDom,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
              tags:
                - tag: component
                  value: alarms
                - tag: component
                  value: network
                - tag: component
                  value: raw
                - tag: component
                  value: sfp
                - tag: sfp
                  value: '{#SFPIFNAME}'
              trigger_prototypes:
                - uuid: 26c9c9948aa9495180f44c8fd9d5c35a
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.bias_high")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Laser bias high'
                  event_name: 'Juniper MX: Laser bias current high on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  priority: AVERAGE
                  description: 'Transmitter laser bias current: high alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 305e1393b93d433fa4a527470a66597e
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.bias_low")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Laser bias low'
                  event_name: 'Juniper MX: Laser bias current low on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  priority: AVERAGE
                  description: 'Transmitter laser bias current: low alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: b0bd8be95fca41ab8a6a5a2dfbf0cb72
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.rx_high")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Rx power high'
                  event_name: 'Juniper MX: Rx laser power high on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  priority: AVERAGE
                  description: 'Receiver laser power: high alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 02c43d33f9a946ec87940d463ddeb12b
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.rx_low")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Rx power low'
                  event_name: 'Juniper MX: Rx laser power low on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  priority: AVERAGE
                  description: 'Receiver laser power: low alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: c6a62b8736e74831b0d2676fe8e3022f
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.tx_laser_disabled")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Tx laser disabled'
                  event_name: 'Juniper MX: Tx laser disabled on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  discover: NO_DISCOVER
                  priority: WARNING
                  description: 'Transmitter laser: disabled alarm.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: a2f9a4957ec64573b9ea8201e1386f82
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.tx_loss_signal")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Tx loss of signal functionality'
                  event_name: 'Juniper MX: Tx loss of signal functionality on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  discover: NO_DISCOVER
                  priority: WARNING
                  description: 'Transmitter laser: loss of signal functionality alarm.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 67cfa8a494da4b36a4bbb881964d7069
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.tx_high")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Tx power high'
                  event_name: 'Juniper MX: Tx laser power high on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  discover: NO_DISCOVER
                  priority: WARNING
                  description: 'Transmitter laser power: high alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 18d8eb4c5a4348bcb8fbae9a3992058f
                  expression: 'jsonpath(last(/Juniper MX by NETCONF/juniper.dom.alarms.get["{#SFPIFNAME}","{#LANEID}"]),"$.tx_low")="on"'
                  name: 'Juniper MX: SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Tx power low'
                  event_name: 'Juniper MX: Tx laser power low on [{#LANEID}] lane'
                  opdata: 'Status alarm: "on"'
                  discover: NO_DISCOVER
                  priority: WARNING
                  description: 'Transmitter laser power: low alarm threshold.'
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: a4e8694994ed44d98011d2b2ebe8bfa3
              name: 'SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.dom.get["{#SFPIFNAME}","{#LANEID}"]'
              history: '0'
              value_type: TEXT
              description: 'Get metrics data|<p>Gets module data for physical interface ''[{#SFPIFNAME}]'' and lane ''[{#LANEID}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.metrics[?(@.name == "{#SFPIFNAME}" && @.lane_index == "{#LANEID}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'ssh.run[JuniperMxDom,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
              tags:
                - tag: component
                  value: network
                - tag: component
                  value: raw
                - tag: component
                  value: sfp
                - tag: sfp
                  value: '{#SFPIFNAME}'
            - uuid: aedac2b48af34eafbce3acb02c96946d
              name: 'SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Rx optical power'
              type: DEPENDENT
              key: 'juniper.mx.dom.rx.lane.laser["{#SFPIFNAME}","{#LANEID}"]'
              value_type: FLOAT
              units: dbm
              description: 'Received optical power for physical interface ''[{#SFPIFNAME}]'', line ''[{#LANEID}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.rx_power
              master_item:
                key: 'juniper.mx.dom.get["{#SFPIFNAME}","{#LANEID}"]'
              tags:
                - tag: component
                  value: network
                - tag: component
                  value: sfp
                - tag: sfp
                  value: '{#SFPIFNAME}'
            - uuid: e894851582354ca1bee42e2b7275d59b
              name: 'SFP [{#SFPIFNAME}] Lane [{#LANEID}]: Tx optical power'
              type: DEPENDENT
              key: 'juniper.mx.dom.tx.lane.laser["{#SFPIFNAME}","{#LANEID}"]'
              value_type: FLOAT
              units: dbm
              description: 'Transmitted optical power for physical interface ''[{#SFPIFNAME}]'', line ''[{#LANEID}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.tx_power
              master_item:
                key: 'juniper.mx.dom.get["{#SFPIFNAME}","{#LANEID}"]'
              tags:
                - tag: component
                  value: network
                - tag: component
                  value: sfp
                - tag: sfp
                  value: '{#SFPIFNAME}'
          master_item:
            key: 'ssh.run[JuniperMxDom,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var sfp_lines = JSON.parse(value);
                  
                  var result = sfp_lines.metrics.map(function (line) {
                    return {
                  	'{#LANEID}': line['lane_index'],
                  	'{#SFPIFNAME}': line['name'],
                  	'{#MULTI}': line['multi']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          overrides:
            - name: 'Multi-lane triggers'
              step: '1'
              filter:
                conditions:
                  - macro: '{#MULTI}'
                    value: '1'
              operations:
                - operationobject: TRIGGER_PROTOTYPE
                  operator: REGEXP
                  value: 'Tx laser disabled'
                  discover: DISCOVER
                - operationobject: TRIGGER_PROTOTYPE
                  operator: REGEXP
                  value: 'Tx loss of signal functionality'
                  discover: DISCOVER
            - name: 'Single-lane triggers'
              step: '2'
              filter:
                conditions:
                  - macro: '{#MULTI}'
                    value: '0'
              operations:
                - operationobject: TRIGGER_PROTOTYPE
                  operator: REGEXP
                  value: 'Tx power'
                  discover: DISCOVER
        - uuid: 1eb485a3160d43f19c57c8da2095eefe
          name: 'Fan discovery'
          type: DEPENDENT
          key: juniper.mx.fan.discovery
          description: 'Scanning `show chassis fan` to detect fans.'
          item_prototypes:
            - uuid: 1f12240fdea64c3eb39088433e233c4d
              name: 'Module [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'juniper.mx.fan.get["{#NAME}"]'
              history: '0'
              value_type: TEXT
              description: 'Intermediate data of power entry module ''[{#NAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name==''{#NAME}'')].first()'
              master_item:
                key: juniper.mx.fan.data.get
              tags:
                - tag: component
                  value: fan
                - tag: component
                  value: raw
                - tag: module
                  value: '{#NAME}'
            - uuid: 6b4b48fd800042e28e794f28ed8a62c2
              name: 'Module [{#NAME}]: Percentage speed'
              type: DEPENDENT
              key: 'juniper.mx.fan.rpm.percent["{#NAME}"]'
              units: '%'
              description: 'Current percentage of the ''[{#NAME}]'' speed being used.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["rpm-percent"]'
                - type: RTRIM
                  parameters:
                    - '%'
              master_item:
                key: 'juniper.mx.fan.get["{#NAME}"]'
              tags:
                - tag: component
                  value: fan
                - tag: module
                  value: '{#NAME}'
            - uuid: 244e931d85d14e2598df848635988722
              name: 'Module [{#NAME}]: Fan speed'
              type: DEPENDENT
              key: 'juniper.mx.fan.rpm["{#NAME}"]'
              units: '!RPM'
              description: 'Fan speed in revolutions per minute (RPM).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["comment"]'
                - type: RTRIM
                  parameters:
                    - RPM
              master_item:
                key: 'juniper.mx.fan.get["{#NAME}"]'
              tags:
                - tag: component
                  value: fan
                - tag: module
                  value: '{#NAME}'
            - uuid: 72afd3ad55f84916befa60d1fb5b35de
              name: 'Module [{#NAME}]: Status'
              type: DEPENDENT
              key: 'juniper.mx.fan.status["{#NAME}"]'
              description: 'Current status of fan tray ''[{#NAME}]''.'
              valuemap:
                name: 'FAN status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''OK'', ''Check''].indexOf(value) + 1 || ''Problem with status processing in JS, no such Fan status: '' + value;'
              master_item:
                key: 'juniper.mx.fan.get["{#NAME}"]'
              tags:
                - tag: component
                  value: fan
                - tag: module
                  value: '{#NAME}'
          master_item:
            key: juniper.mx.fan.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var fans = JSON.parse(value);
                  
                  var result = fans.map(function (fan) {
                    return {
                  	'{#NAME}': fan['name'],
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 36643a36fcb34fc387154b8f7ef94545
          name: 'FPC discovery'
          type: DEPENDENT
          key: juniper.mx.fpc.discovery
          description: 'Scanning `show chassis fpc` and `show chassis fpc detail` for FPCs.'
          item_prototypes:
            - uuid: 5421955ba3f94edca1e1bd58ba08902b
              name: 'FPC Slot [{#SLOT}]: CPU total utilization'
              type: DEPENDENT
              key: 'juniper.mx.fpc.cpu.total["{#SLOT}"]'
              units: '%'
              description: 'Total percentage of CPU being used by the FPC processor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-total"].first()'
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: fpc
                - tag: fpc-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: 800199ee750d43909e6d3fd163db329d
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.fpc.cpu.total["{#SLOT}"], 10m) >= {$JUNIPER.MX.FPC.CPU.UTIL.MIN}'
                  name: 'Juniper MX: FPC Slot [{#SLOT}]: High CPU utilization'
                  event_name: 'Juniper MX: FPC Slot [{#SLOT}]: High CPU utilization (over >= {$JUNIPER.MX.FPC.CPU.UTIL.MIN}% over last 10m)'
                  opdata: 'Current utilization: {ITEM.LASTVALUE}'
                  priority: AVERAGE
                  description: 'FPC CPU utilization is too high.'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 1e6ceeeac08f40d8ace8c3b7907807f4
              name: 'FPC Slot [{#SLOT}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.fpc.get["{#SLOT}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets data for FPC Slot ''[{#SLOT}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.slot == "{#SLOT}")]'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.fpc.data.get
              tags:
                - tag: component
                  value: fpc
                - tag: component
                  value: raw
                - tag: fpc-slot
                  value: '{#SLOT}'
            - uuid: ba18fa46b5ae4971a7daa3879dae4f00
              name: 'FPC Slot [{#SLOT}]: Buffer utilization'
              type: DEPENDENT
              key: 'juniper.mx.fpc.mem.buffer.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of buffer space being used by the FPC''s processor for buffering internal messages.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["memory-buffer-utilization"].first()'
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: fpc
                - tag: component
                  value: memory
                - tag: fpc-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: 0438ccd16222429da78eebebb311caaf
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.fpc.mem.buffer.util["{#SLOT}"],5m)>{$JUNIPER.MX.FPC.BUFFER.MEMORY.UTIL.MAX}'
                  name: 'Juniper MX: FPC Slot [{#SLOT}]: High buffer memory utilization'
                  event_name: 'Juniper MX: FPC Slot [{#SLOT}]: High FPC Buffer memory utilization (>{$JUNIPER.MX.FPC.BUFFER.MEMORY.UTIL.MAX}% for 5m)'
                  opdata: 'Current utilization: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'The system is running out of free memory.'
                  tags:
                    - tag: scope
                      value: capacity
                    - tag: scope
                      value: performance
            - uuid: 6532d59203244fe8b04a31b44519e39e
              name: 'FPC Slot [{#SLOT}]: Heap utilization'
              type: DEPENDENT
              key: 'juniper.mx.fpc.mem.heap.util["{#SLOT}"]'
              units: '%'
              description: |
                Percentage of heap space (dynamic memory) being used by the FPC's processor. If this number exceeds 80%, there may be a software problem (memory leak).
                NOTE: On MX Series routers and EX Series switches in a broadband edge environment, heap utilization levels higher than 70% can affect unified ISSU, router stability, or scaling capability.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["memory-heap-utilization"].first()'
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: fpc
                - tag: component
                  value: memory
                - tag: fpc-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: 4f371de9fbee47878d38c7c8ee6e98a6
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.fpc.mem.heap.util["{#SLOT}"],5m)>{$JUNIPER.MX.FPC.HEAP.MEMORY.UTIL.MAX}'
                  name: 'Juniper MX: FPC Slot [{#SLOT}]: High heap memory utilization'
                  event_name: 'Juniper MX: FPC Slot [{#SLOT}]: High routing engine memory utilization (>{$JUNIPER.MX.FPC.HEAP.MEMORY.UTIL.MAX}% for 5m)'
                  opdata: 'Current utilization: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'The system is running out of free memory.'
                  tags:
                    - tag: scope
                      value: capacity
                    - tag: scope
                      value: performance
            - uuid: f02205020f074cea8611fed872094dad
              name: 'FPC Slot [{#SLOT}]: Start time'
              type: DEPENDENT
              key: 'juniper.mx.fpc.start-time["{#SLOT}"]'
              units: unixtime
              description: 'Time when the Routing Engine detected that the FPC was running.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["start-time"]["@seconds"].first()'
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: fpc
                - tag: fpc-slot
                  value: '{#SLOT}'
            - uuid: ac95da65a7994dd3b94dfc98f7e83609
              name: 'FPC Slot [{#SLOT}]: State'
              type: DEPENDENT
              key: 'juniper.mx.fpc.state["{#SLOT}"]'
              description: |
                The state can be one of the following:
                * Dead — Held in reset because of errors.
                * Diag — Slot is being ignored while the FPC is running diagnostics.
                * Dormant — Held in reset.
                * Empty — No FPC is present.
                * Offline — (PTX Series Packet Transport Routers only) One of the following two states is displayed:
                `FPC offlined due to unreachable destinations`
                `FPC Offlined due to degraded FPC action`
                * Online — FPC is online and running.
                * Present — FPC is detected by the chassis daemon, but is either not supported by the current version of Junos OS, or is inserted in the wrong slot. The output also states either `Hardware Not Supported` or `Hardware Not In Right Slot`. The FPC is coming up, but not yet online.
                * Probed — Probe is complete; awaiting restart of the Packet Forwarding Engine.
                * Probe-wait — Waiting to be probed.
                * Unknown — FPC is present, but the state is unknown.
                * Onlining — FPC is in the process of going online. ASIC and the rest of the hardware is initializing.
                * Offlining — FPC is in the process of going offline. ASIC and the rest of the hardware is being shutdown to take the offline gracefully.
                * Fault — FPC is in an alarm state in which none of the PICs are operational.
                * Fault-off — FPC is powered off due to a fault.
                * Spare — FPC is redundant and will move to active state if one of the working FPCs fails to pass traffic.
              valuemap:
                name: 'FPC slot state'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..state.first()
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Dead'', ''Diag'', ''Dormant'', ''Empty'', ''Offline'', ''Online'', ''Present'', ''Probed'', ''Probe-wait'', ''Unknown'', ''Onlining'', ''Offlining'', ''Fault'', ''Fault-off'', ''Spare''].indexOf(value) + 1 || ''Problem with status processing in JS, no such FPC slot state: '' + value;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: fpc
                - tag: fpc-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: c8a14227533d44ed8ce5218398c5b8e9
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.fpc.state["{#SLOT}"])<>6'
                  name: 'Juniper MX: FPC Slot [{#SLOT}]: Status not "Online"'
                  opdata: 'Current state: {ITEM.LASTVALUE}'
                  priority: WARNING
                  description: 'Check the FPC''s errors.'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: ec62e2df037b48039a8894d74eb7e724
              name: 'FPC Slot [{#SLOT}]: Uptime'
              type: DEPENDENT
              key: 'juniper.mx.fpc.uptime["{#SLOT}"]'
              units: uptime
              description: 'How long the Routing Engine has been connected to the FPC (how long the FPC has been up and running).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["up-time"]["@seconds"].first()'
              master_item:
                key: 'juniper.mx.fpc.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: fpc
                - tag: fpc-slot
                  value: '{#SLOT}'
          master_item:
            key: juniper.mx.fpc.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var fpc = JSON.parse(value);
                  
                  var result = fpc.map(function (slot) {
                    return {
                  	'{#SLOT}': slot['slot']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: b03830a9f51f42d3bdb3066bd55a27a8
          name: 'Mounted filesystem discovery'
          type: DEPENDENT
          key: juniper.mx.fs.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#FSNAME}'
                value: '{$JUNIPER.MX.FS.FSNAME.MATCHES}'
              - macro: '{#FSNAME}'
                value: '{$JUNIPER.MX.FS.FSNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'The discovery of mounted filesystems with different types.'
          item_prototypes:
            - uuid: 15f6aadd267f4989b01bc617da035da6
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Get data'
              type: DEPENDENT
              key: 'juniper.mx.fs.get["{#FSNAME}","{#MOUNT}"]'
              history: '0'
              value_type: TEXT
              description: 'Intermediate data of filesystem ''[{#FSNAME}]'' filesystem. Mounted on ''[{#MOUNT}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@["filesystem-name"]=="{#FSNAME}" && @["mounted-on"]== "{#MOUNT}")].first()'
              master_item:
                key: juniper.mx.storage.data.get
              tags:
                - tag: component
                  value: raw
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: mount
                  value: '{#MOUNT}'
            - uuid: d95d7a8bda3941778b6b955590045af8
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Space: Available'
              type: DEPENDENT
              key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",free]'
              units: B
              description: 'Available storage space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["available-blocks"]["#text"]'
                - type: MULTIPLIER
                  parameters:
                    - '512'
              master_item:
                key: 'juniper.mx.fs.get["{#FSNAME}","{#MOUNT}"]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: mount
                  value: '{#MOUNT}'
            - uuid: c033f03fff3840e19fd7208f3d2a7a6e
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Space: Used, in %'
              type: DEPENDENT
              key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",pused]'
              value_type: FLOAT
              units: '%'
              description: 'Used storage space expressed in percent.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["used-percent"]'
              master_item:
                key: 'juniper.mx.fs.get["{#FSNAME}","{#MOUNT}"]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: mount
                  value: '{#MOUNT}'
              trigger_prototypes:
                - uuid: c16052b52d4845bcad26102fa98b7dc4
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",pused],5m)>{$JUNIPER.MX.FS.PUSED.MAX.CRIT:"{#FSNAME}"}'
                  name: 'Juniper MX: FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space is critically low'
                  event_name: 'Juniper MX: FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space is critically low (used > {$JUNIPER.MX.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: AVERAGE
                  description: |
                    The volume's space usage exceeds the '{$JUNIPER.MX.FS.FREE.MIN.CRIT:"{#FSNAME}"}%' limit;
                    The trigger expression is based on the current used and maximum available spaces.
                    The event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
                - uuid: b21e68fc85564d3d8c3fd4b6cb3255c8
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",pused],5m)>{$JUNIPER.MX.FS.PUSED.MAX.WARN:"{#FSNAME}"}'
                  name: 'Juniper MX: FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space is low'
                  event_name: 'Juniper MX: FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space is low (used > {$JUNIPER.MX.FS.PUSED.MAX.WARN:"{#FSNAME}"}%)'
                  opdata: 'Space used: {{ITEM.LASTVALUE1}.fmtnum(1)}%'
                  priority: WARNING
                  description: |
                    The storage space usage exceeds the '{$JUNIPER.MX.FS.PUSED.MAX.WARN:"{#FSNAME}"}%' limit.
                    The trigger expression is based on the current used and maximum available spaces.
                    The event name represents the total volume space, which can differ from the maximum available space, depending on the filesystem type.
                  manual_close: 'YES'
                  dependencies:
                    - name: 'Juniper MX: FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space is critically low'
                      expression: 'min(/Juniper MX by NETCONF/juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",pused],5m)>{$JUNIPER.MX.FS.PUSED.MAX.CRIT:"{#FSNAME}"}'
                  tags:
                    - tag: scope
                      value: availability
                    - tag: scope
                      value: capacity
            - uuid: 4387c163660c47a89cc7270af636cf69
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Space: Total'
              type: DEPENDENT
              key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",total]'
              units: B
              description: 'Total space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["total-blocks"]["#text"]'
                - type: MULTIPLIER
                  parameters:
                    - '512'
              master_item:
                key: 'juniper.mx.fs.get["{#FSNAME}","{#MOUNT}"]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: mount
                  value: '{#MOUNT}'
            - uuid: 046087ad65fa40939bb4a3c48db734f0
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Space: Used'
              type: DEPENDENT
              key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",used]'
              units: B
              description: 'Used storage space expressed in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["used-blocks"]["#text"]'
                - type: MULTIPLIER
                  parameters:
                    - '512'
              master_item:
                key: 'juniper.mx.fs.get["{#FSNAME}","{#MOUNT}"]'
              tags:
                - tag: component
                  value: storage
                - tag: filesystem
                  value: '{#FSNAME}'
                - tag: mount
                  value: '{#MOUNT}'
          graph_prototypes:
            - uuid: ab28f5c7035f462da23030f4506cf6ab
              name: 'FS [{#FSNAME}] Mounted [{#MOUNT}]: Disk space usage'
              width: '600'
              height: '340'
              type: PIE
              show_3d: 'YES'
              graph_items:
                - color: '969696'
                  calc_fnc: LAST
                  type: GRAPH_SUM
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",total]'
                - sortorder: '1'
                  color: C80000
                  calc_fnc: LAST
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.fs.size["{#FSNAME}","{#MOUNT}",used]'
          master_item:
            key: juniper.mx.storage.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value);
                  data = Array.isArray(data) ? data : [data];
                  
                  result = data.map(function (filesystem) {
                    return {
                  	'{#FSNAME}': filesystem['filesystem-name'],
                  	'{#MOUNT}': filesystem['mounted-on']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 05e733216d4349a287ce9cdb8d387e03
          name: 'Network interface discovery'
          type: DEPENDENT
          key: juniper.mx.net.if.discovery
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IFADMINSTATUS}'
                value: '{$JUNIPER.MX.NET.IF.ADMINSTATUS.MATCHES}'
              - macro: '{#IFADMINSTATUS}'
                value: '{$JUNIPER.MX.NET.IF.ADMINSTATUS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#IFNAME}'
                value: '{$JUNIPER.MX.NET.IF.NAME.MATCHES}'
              - macro: '{#IFNAME}'
                value: '{$JUNIPER.MX.NET.IF.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
              - macro: '{#IFOPERSTATUS}'
                value: '{$JUNIPER.MX.NET.IF.IFOPERSTATUS.MATCHES}'
              - macro: '{#IFOPERSTATUS}'
                value: '{$JUNIPER.MX.NET.IF.IFOPERSTATUS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
          description: 'Discovery of interfaces from the Juniper device.'
          item_prototypes:
            - uuid: bfcde9c3cb024c6aa2b2e5fbfbbb1f80
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets data from the physical interface ''[{#IFNAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.results..["rpc-reply"]["interface-information"]["physical-interface"][?(@.name == "{#IFNAME}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: 'ssh.run[JuniperMxInterface,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
              tags:
                - tag: component
                  value: network
                - tag: component
                  value: raw
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: d3a80d633d714da490fb43989bca1b03
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Operational status'
              type: DEPENDENT
              key: 'juniper.mx.net.if.oper.status["{#IFNAME}"]'
              value_type: FLOAT
              description: 'Gets the operational status of the physical interface ''[{#IFNAME}]''.'
              valuemap:
                name: 'Operational status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["oper-status"]'
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''up'', ''down'', ''unknown'', ''dormant'', ''notPresent'', ''lowerLayerDown''].indexOf(value) + 1 || ''Problem with status processing in JS, no such Operational status: '' + value;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
              trigger_prototypes:
                - uuid: 6a00575d05744f709f4f90602e6075f8
                  expression: '{$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=1 and last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])=2 and (last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"],#2))'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: 'last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>"down" or {$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=0'
                  name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: Link down'
                  opdata: 'Current state: {ITEM.LASTVALUE}'
                  priority: AVERAGE
                  description: |
                    This trigger expression works as follows:
                    1. It can be triggered if the operational status is down.
                    2. `{$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=1` - a user can redefine the context macro to "0", marking this interface as not important. No new trigger will be fired if this interface is down.
                    3. `last(/TEMPLATE_NAME/METRIC)<>last(/TEMPLATE_NAME/METRIC,#2)` - the trigger fires only if the operational status has changed to "down" from some other state (so, does not fire for "eternal off" interfaces).
                    
                    WARNING: if closed manually - it will not fire again on the next poll because of `last(/TEMPLATE_NAME/METRIC)<>last(/TEMPLATE_NAME/METRIC,#2)`.
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 34f99d734dd74942a2e7bb3d59056b76
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Speed'
              type: DEPENDENT
              key: 'juniper.mx.net.if.speed["{#IFNAME}"]'
              units: bps
              description: 'Gets the speed of the interface ''[{#IFNAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["speed"]'
                - type: JAVASCRIPT
                  parameters:
                    - |
                      function parseSpeedToBits(speedString) {
                      	var formatted = speedString.replace(/\s+/g, "").toLowerCase();
                      
                      	if (formatted === 'unlimited' || formatted === 'unspecified') {
                      		return '';
                      	}
                      
                      	var match = formatted.match(/^(\d+(\.\d+)?)(gbps|mbps|bps)$/);
                      
                      	if (!match) {
                      		throw new Error("Problem with processing in JS, no such speed format: " + speedString);
                      	}
                      
                      	var value = parseFloat(match[1]),
                      		unit = match[3];
                      
                      	switch (unit) {
                      		case 'gbps':
                      			return value * 1e9;
                      		case 'mbps':
                      			return value * 1e6;
                      		case 'bps':
                      			return value;
                      		default:
                      			throw new Error("Problem with processing in JS, unsupported unit: " + unit);
                      	}
                      }
                      
                      var speedsInBits = parseSpeedToBits(value);
                      
                      return speedsInBits;
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: 47f4aff789af4e7dbbdb7ce169655df8
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Input bits'
              type: DEPENDENT
              key: 'juniper.mx.net.input.bits.rate["{#IFNAME}"]'
              units: bps
              description: 'Number of input bytes; current throughput rate in bits per second (bps).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["traffic-statistics"]["input-bytes"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
                - type: MULTIPLIER
                  parameters:
                    - '8'
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: ae886ad0d5de47f09bd5bae9ef5b9944
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Input errors'
              type: DEPENDENT
              key: 'juniper.mx.net.input.errors["{#IFNAME}"]'
              description: 'Input errors on the interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["input-error-list"]["input-errors"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: a197648a392a42d5ac14c4a9f229b5f1
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Input packets'
              type: DEPENDENT
              key: 'juniper.mx.net.input.packets.rate["{#IFNAME}"]'
              units: '!pps'
              description: 'Number of input packets; current throughput rate in packets per second (pps).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["traffic-statistics"]["input-packets"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: 5437fb322e004a649f1200d82132d8af
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Link level type'
              type: DEPENDENT
              key: 'juniper.mx.net.link.level.type["{#IFNAME}"]'
              value_type: CHAR
              description: 'Gets the link level type of the interface ''[{#IFNAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["link-level-type"]'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: bdf5bc09d36e461d95b2bbf4cd11bc50
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Output bits'
              type: DEPENDENT
              key: 'juniper.mx.net.output.bits.rate["{#IFNAME}"]'
              units: bps
              description: 'Number of output bytes; current throughput rate in bits per second (bps).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["traffic-statistics"]["output-bytes"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
                - type: MULTIPLIER
                  parameters:
                    - '8'
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: 162f787fad4b41688db5b739477cd04d
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Output errors'
              type: DEPENDENT
              key: 'juniper.mx.net.output.errors["{#IFNAME}"]'
              description: 'Output errors on the interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["output-error-list"]["output-errors"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
            - uuid: 819f635bb371472cabe4cc4e88c6f6f3
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Output packets'
              type: DEPENDENT
              key: 'juniper.mx.net.output.packets.rate["{#IFNAME}"]'
              units: '!pps'
              description: 'Number of output packets; current throughput rate in packets per second (pps).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$["traffic-statistics"]["output-packets"]'
                  error_handler: DISCARD_VALUE
                - type: CHANGE_PER_SECOND
              master_item:
                key: 'juniper.mx.interface.get["{#IFNAME}","{#IFDESCR}"]'
              tags:
                - tag: component
                  value: network
                - tag: description
                  value: '{#IFDESCR}'
                - tag: if-type
                  value: '{#IFTYPE}'
                - tag: interface
                  value: '{#IFNAME}'
                - tag: link-level-type
                  value: '{#LINKLEVELTYPE}'
          trigger_prototypes:
            - uuid: 7b0eba09fb814b1f84e0b3b858abe0f4
              expression: |
                (avg(/Juniper MX by NETCONF/juniper.mx.net.input.bits.rate["{#IFNAME}"],15m)>({$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])) and
                last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])>0
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'avg(/Juniper MX by NETCONF/juniper.mx.net.input.bits.rate["{#IFNAME}"],15m)<(({$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])'
              name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: High inbound bandwidth usage'
              event_name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: High inbound bandwidth usage ( > {$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}% )'
              opdata: 'In: {ITEM.LASTVALUE1}, speed: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'The utilization of the network interface is close to its estimated maximum bandwidth.'
              dependencies:
                - name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: Link down'
                  expression: '{$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=1 and last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])=2 and (last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"],#2))'
                  recovery_expression: 'last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>"down" or {$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: performance
            - uuid: c31323aee08c49d4b2f40fa5bf064786
              expression: |
                (avg(/Juniper MX by NETCONF/juniper.mx.net.output.bits.rate["{#IFNAME}"],15m)>({$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}/100)*last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])) and
                last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])>0
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'avg(/Juniper MX by NETCONF/juniper.mx.net.output.bits.rate["{#IFNAME}"],15m)<(({$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*last(/Juniper MX by NETCONF/juniper.mx.net.if.speed["{#IFNAME}"])'
              name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: High outbound bandwidth usage'
              event_name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: High outbound bandwidth usage ( > {$JUNIPER.MX.NET.IF.UTIL.MAX:"{#IFNAME}"}% )'
              opdata: 'Out: {ITEM.LASTVALUE1}, speed: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'The utilization of the network interface is close to its estimated maximum bandwidth.'
              dependencies:
                - name: 'Juniper MX: Interface [{#IFNAME}][{#IFDESCR}]: Link down'
                  expression: '{$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=1 and last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])=2 and (last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"],#2))'
                  recovery_expression: 'last(/Juniper MX by NETCONF/juniper.mx.net.if.oper.status["{#IFNAME}"])<>"down" or {$JUNIPER.MX.NET.IF.CONTROL:"{#IFNAME}"}=0'
              tags:
                - tag: scope
                  value: performance
          graph_prototypes:
            - uuid: d4dda92975514dc790da84eca4e643f5
              name: 'Interface [{#IFNAME}][{#IFDESCR}]: Network traffic (bits, per second)'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.net.input.bits.rate["{#IFNAME}"]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.net.output.bits.rate["{#IFNAME}"]'
          master_item:
            key: 'ssh.run[JuniperMxInterface,{$JUNIPER.MX.NETCONF.IP},{$JUNIPER.MX.NETCONF.PORT},,,netconf]'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.results..["rpc-reply"]["interface-information"]["physical-interface"].first()'
            - type: JAVASCRIPT
              parameters:
                - |
                  var data = JSON.parse(value),
                  	interfaces = [];
                  
                  function getField(data, path, default_value) {
                  	var steps = path.split('.');
                  	var step = steps.shift();
                  
                  	while (typeof step !== 'undefined') {
                  		if (typeof data === undefined || typeof data[step] === 'undefined') {
                  			return default_value;
                  		}
                  
                  		data = data[step];
                  		step = steps.shift();
                  	}
                  	return data;
                  };
                  
                  data.forEach(function (iface) {
                  	interfaces.push({
                  		'{#IFNAME}': getField(iface, 'name'),
                  		'{#IFDESCR}': getField(iface, 'description', ''),
                  		'{#LINKLEVELTYPE}': getField(iface, 'link-level-type', ''),
                  		'{#IFTYPE}': getField(iface, 'if-type', ''),
                  		'{#LINKTYPE}': getField(iface, 'link-type', ''),
                  		'{#IFADMINSTATUS}': getField(iface, 'admin-status.#text'),
                  		'{#IFOPERSTATUS}': getField(iface, 'oper-status'),
                  		'{#IFSPEED}': getField(iface, 'speed')
                  	});
                  
                  });
                  
                  return JSON.stringify(interfaces);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          overrides:
            - name: 'Do not create speed item and trigger if not supported'
              step: '1'
              filter:
                conditions:
                  - macro: '{#IFSPEED}'
                    value: \d+
                    operator: NOT_MATCHES_REGEX
              operations:
                - operator: REGEXP
                  value: Speed
                  discover: NO_DISCOVER
                - operationobject: TRIGGER_PROTOTYPE
                  operator: REGEXP
                  value: 'High * bandwidth usage'
                  discover: NO_DISCOVER
        - uuid: d9366347cae34200b16cc74b58eb6941
          name: 'OSPF Neighbor discovery'
          type: DEPENDENT
          key: juniper.mx.ospf.neighbor.discovery
          description: 'OSPF neighbor discovery.'
          item_prototypes:
            - uuid: 56d860f355fa4be593a5b65e1cb94788
              name: 'OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.ospf.get["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets OSPF raw data for neighbor ''[{#OSPF_NEIGHBOR_ADDR}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.ospf[?(@.router_name == "{#OSPF_ROUTER_NAME}" && @.neighbor_address == "{#OSPF_NEIGHBOR_ADDR}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.ospf.data.get
              tags:
                - tag: address
                  value: '{#OSPF_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: component
                  value: raw
                - tag: router
                  value: '{#OSPF_ROUTER_NAME}'
            - uuid: 272551c6ba914c5e8ef5ed693aee7682
              name: 'OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: Interface'
              type: DEPENDENT
              key: 'juniper.mx.ospf.interface["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              value_type: TEXT
              description: 'The OSPF interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.interface_name
              master_item:
                key: 'juniper.mx.ospf.get["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPF_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPF_ROUTER_NAME}'
            - uuid: 37eaf74435dd490992ba9fd614eaf63c
              name: 'OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: State'
              type: DEPENDENT
              key: 'juniper.mx.ospf.state["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              description: 'The state of the relationship with this neighbor.'
              valuemap:
                name: 'OSPF neighbor state'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.neighbor_state
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Attempt'', ''Down'', ''Exchange'', ''ExStart'', ''Full'', ''Init'', ''Loading'', ''2Way''].indexOf(value) + 1 || ''Problem with status processing in JS, no such OSPF state: '' + value;'
              master_item:
                key: 'juniper.mx.ospf.get["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPF_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPF_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 9ab19250b673403b9ac286b0dbfe7c5b
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf.state["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]) = 2'
                  name: 'Juniper MX: OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: State down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'OSPF neighbor ''[{#OSPF_NEIGHBOR_ADDR}]'' is in operational state `down`.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 2b331a4f704b48e5887eaff26f4dbe74
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf.state["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]) = 6'
                  name: 'Juniper MX: OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: State init'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'OSPF neighbor ''[{#OSPF_NEIGHBOR_ADDR}]'' is in operational state `init`.'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 5b551b1609a9422090cb62f6385decd4
              name: 'OSPF Neighbor [{#OSPF_NEIGHBOR_ADDR}]: Uptime'
              type: DEPENDENT
              key: 'juniper.mx.ospf.uptime["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              units: uptime
              description: 'The OSPF uptime.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uptime
              master_item:
                key: 'juniper.mx.ospf.get["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPF_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPF_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 1d1b6b91d5294a3794442882c095eb77
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf.uptime["{#OSPF_ROUTER_NAME}","{#OSPF_NEIGHBOR_ADDR}"])<10m'
                  name: 'Juniper MX: OSPF has been restarted'
                  event_name: 'Juniper MX: OSPF has been restarted (uptime < 10m)'
                  priority: WARNING
                  description: 'Uptime is less than 10 minutes.'
          master_item:
            key: juniper.mx.ospf.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var neighbors = JSON.parse(value);
                  
                  var result = neighbors.ospf.map(function (neighbor) {
                    return {
                  	'{#OSPF_NEIGHBOR_ADDR}': neighbor['neighbor_address'],
                  	'{#OSPF_ROUTER_NAME}': neighbor['router_name']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: ceae517711604528bee1f5f50d2c0210
          name: 'OSPFv3 Neighbor discovery'
          type: DEPENDENT
          key: juniper.mx.ospf3.neighbor.discovery
          description: 'OSPFv3 neighbor discovery.'
          item_prototypes:
            - uuid: 9a8806699cf1402689e443ab18d2d9b0
              name: 'OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.ospf3.get["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets OSPFv3 raw data for neighbor ''[{#OSPFV3_NEIGHBOR_ADDR}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.ospf3[?(@.router_name == "{#OSPFV3_ROUTER_NAME}" && @.neighbor_address == "{#OSPFV3_NEIGHBOR_ADDR}")].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.ospf.data.get
              tags:
                - tag: address
                  value: '{#OSPFV3_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: component
                  value: raw
                - tag: router
                  value: '{#OSPFV3_ROUTER_NAME}'
            - uuid: 6861e5b661364df09af9b51509a30c0d
              name: 'OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: Interface'
              type: DEPENDENT
              key: 'juniper.mx.ospf3.interface["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              value_type: TEXT
              description: 'The OSPFv3 interface.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.interface_name
              master_item:
                key: 'juniper.mx.ospf3.get["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPFV3_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPFV3_ROUTER_NAME}'
            - uuid: 01b35f19d98149b987911aa1152b68a8
              name: 'OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: State'
              type: DEPENDENT
              key: 'juniper.mx.ospf3.state["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              description: 'The state of the relationship with this neighbor.'
              valuemap:
                name: 'OSPF neighbor state'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.neighbor_state
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Attempt'', ''Down'', ''Exchange'', ''ExStart'', ''Full'', ''Init'', ''Loading'', ''2Way''].indexOf(value) + 1 || ''Problem with status processing in JS, no such OSPF state: '' + value;'
              master_item:
                key: 'juniper.mx.ospf3.get["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPFV3_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPFV3_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 03035f55cfcf4dd8970bee02d9e561ff
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf3.state["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]) = 2'
                  name: 'Juniper MX: OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: State down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'OSPFv3 neighbor ''[{#OSPFV3_NEIGHBOR_ADDR}]'' is in operational state `down`.'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: f6974bc99e4b41cb8aa1adfccb0a3cb6
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf3.state["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]) = 6'
                  name: 'Juniper MX: OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: State init'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'OSPFv3 neighbor ''[{#OSPFV3_NEIGHBOR_ADDR}]'' is in operational state `init`.'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: bde728d311d64de087fee263ce27e1d7
              name: 'OSPFv3 Neighbor [{#OSPFV3_NEIGHBOR_ADDR}]: Up time'
              type: DEPENDENT
              key: 'juniper.mx.ospf3.uptime["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              units: uptime
              description: 'The OSPFv3 uptime.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.uptime
              master_item:
                key: 'juniper.mx.ospf3.get["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"]'
              tags:
                - tag: address
                  value: '{#OSPFV3_NEIGHBOR_ADDR}'
                - tag: component
                  value: network
                - tag: component
                  value: ospf
                - tag: router
                  value: '{#OSPFV3_ROUTER_NAME}'
              trigger_prototypes:
                - uuid: 2cede617dec14cfe828405f2dfdb0b7d
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.ospf3.uptime["{#OSPFV3_ROUTER_NAME}","{#OSPFV3_NEIGHBOR_ADDR}"])<10m'
                  name: 'Juniper MX: OSPFv3 has been restarted'
                  event_name: 'Juniper MX: OSPFv3 has been restarted (uptime < 10m)'
                  priority: WARNING
                  description: 'Uptime is less than 10 minutes.'
          master_item:
            key: juniper.mx.ospf.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var neighbors = JSON.parse(value);
                  
                  var result = neighbors.ospf3.map(function (neighbor) {
                    return {
                  	'{#OSPFV3_NEIGHBOR_ADDR}': neighbor['neighbor_address'],
                  	'{#OSPFV3_ROUTER_NAME}': neighbor['router_name']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: 09ae298fae4c49d899be0f07e9695100
          name: 'PEM discovery'
          type: DEPENDENT
          key: juniper.mx.pem.discovery
          description: 'Scanning `show chassis environment pem` to detect power entry modules.'
          item_prototypes:
            - uuid: b2fb0d82616d405fbbfb400ff18f0fe0
              name: 'Module [{#NAME}]: Current'
              type: DEPENDENT
              key: 'juniper.mx.pem.current["{#NAME}"]'
              value_type: FLOAT
              units: A
              description: 'Information about the PEM current.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["dc-information"]["dc-detail"]["str3-dc-current"]'
              master_item:
                key: 'juniper.mx.pem.get["{#NAME}"]'
              tags:
                - tag: component
                  value: power
                - tag: module
                  value: '{#NAME}'
            - uuid: 5f4b1ad53347419098820dc4a41cf5a6
              name: 'Module [{#NAME}]: Get data'
              type: DEPENDENT
              key: 'juniper.mx.pem.get["{#NAME}"]'
              history: '0'
              value_type: TEXT
              description: 'Intermediate data of power entry module ''[{#NAME}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name==''{#NAME}'')].first()'
              master_item:
                key: juniper.mx.pem.data.get
              tags:
                - tag: component
                  value: power
                - tag: component
                  value: raw
                - tag: module
                  value: '{#NAME}'
            - uuid: acdb06af42c04b0ca2110c3fe5b9dfd9
              name: 'Module [{#NAME}]: Load'
              type: DEPENDENT
              key: 'juniper.mx.pem.load["{#NAME}"]'
              units: '%'
              description: 'Information about the load on the power supply; expressed as a percentage of the rated current being used.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["dc-information"]["dc-detail"]["dc-load"]'
              master_item:
                key: 'juniper.mx.pem.get["{#NAME}"]'
              tags:
                - tag: component
                  value: power
                - tag: module
                  value: '{#NAME}'
            - uuid: be087a0536fc44dda84a134c852a73d1
              name: 'Module [{#NAME}]: Power'
              type: DEPENDENT
              key: 'juniper.mx.pem.power["{#NAME}"]'
              units: W
              description: 'Information about the PEM power.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["dc-information"]["dc-detail"]["dc-power"]'
              master_item:
                key: 'juniper.mx.pem.get["{#NAME}"]'
              tags:
                - tag: component
                  value: power
                - tag: module
                  value: '{#NAME}'
            - uuid: d7d795a9aad94665a61c97deaba5f3e1
              name: 'Module [{#NAME}]: State'
              type: DEPENDENT
              key: 'juniper.mx.pem.state["{#NAME}"]'
              description: 'Status of power entry module ''[{#NAME}]''.'
              valuemap:
                name: 'PEM state'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.state
                - type: JAVASCRIPT
                  parameters:
                    - 'return [''Online'' , ''Offline''].indexOf(value) + 1 || ''Problem with status processing in JS, no such PEM state: '' + value;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: 'juniper.mx.pem.get["{#NAME}"]'
              tags:
                - tag: component
                  value: power
                - tag: module
                  value: '{#NAME}'
            - uuid: bfe9b83a66674edab6860bba48623e6c
              name: 'Module [{#NAME}]: Voltage'
              type: DEPENDENT
              key: 'juniper.mx.pem.voltage["{#NAME}"]'
              value_type: FLOAT
              units: V
              description: 'Information about voltage supplied to the PEM.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.["dc-information"]["dc-detail"]["str3-dc-voltage"]'
              master_item:
                key: 'juniper.mx.pem.get["{#NAME}"]'
              tags:
                - tag: component
                  value: power
                - tag: module
                  value: '{#NAME}'
          master_item:
            key: juniper.mx.pem.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var pems = JSON.parse(value);
                  
                  var result = pems.map(function (pem) {
                    return {
                  	'{#NAME}': pem['name'],
                  	'{#STATE}': pem['state']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          overrides:
            - name: 'Discard PEM Offline state'
              step: '1'
              filter:
                conditions:
                  - macro: '{#STATE}'
                    value: Offline
              operations:
                - operator: REGEXP
                  value: Voltage|Load|Current|Power
                  discover: NO_DISCOVER
                  status: ENABLED
        - uuid: c66b6247780d4513bac42150b368d47a
          name: 'Routing Engine discovery'
          type: DEPENDENT
          key: juniper.mx.routing.engine.discovery
          description: 'Scanning `show chassis routing-engine` for the Routing Engine.'
          item_prototypes:
            - uuid: fc7a8ad154c94ca5b24c3212f6b19a22
              name: 'Routing Engine Slot [{#SLOT}]: CPU background utilization'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.background.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of CPU time being used by background processes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-background"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 4b08b43398e043209a7bd199f8b4cc32
              name: 'Routing Engine Slot [{#SLOT}]: CPU idle'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.idle["{#SLOT}"]'
              units: '%'
              description: 'Percentage of CPU time that is idle.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-idle"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 22bc0ff44cc847a2b11cb905d2b0a93c
              name: 'Routing Engine Slot [{#SLOT}]: CPU interrupt utilization'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.interrupt.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of CPU time being used by interrupts.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-interrupt"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 516cb08e3b7d4f138abd62b402279b63
              name: 'Routing Engine Slot [{#SLOT}]: CPU system utilization'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.system.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of CPU time being used by system processes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-system"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 0f0dc50c2a9e49efacb73345f048ae49
              name: 'Routing Engine Slot [{#SLOT}]: CPU temperature'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.temperature["{#SLOT}"]'
              units: °C
              description: 'Temperature of the CPU Routing Engine.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-temperature"]["@celsius"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: component
                  value: temperature
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 9081adce1e1b43d58f6800b1f26039ad
              name: 'Routing Engine Slot [{#SLOT}]: CPU total utilization'
              type: CALCULATED
              key: 'juniper.mx.routing.engine.cpu.total.util["{#SLOT}"]'
              units: '%'
              params: 'last(//juniper.mx.routing.engine.cpu.user.util["{#SLOT}"])+last(//juniper.mx.routing.engine.cpu.system.util["{#SLOT}"])+last(//juniper.mx.routing.engine.cpu.interrupt.util["{#SLOT}"])+last(//juniper.mx.routing.engine.cpu.background.util["{#SLOT}"])'
              description: 'Percentage of total CPU utilization.'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: 2c9a8b78c121479aa5525b98afcdb84d
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.routing.engine.cpu.total.util["{#SLOT}"], 10m) >= {$JUNIPER.MX.CPU.UTIL.MIN}'
                  name: 'Juniper MX: High Routing Engine CPU utilization'
                  event_name: 'Juniper MX: Routing Engine Slot [{#SLOT}]: High CPU utilization: (over >= {$JUNIPER.MX.CPU.UTIL.MIN}% over last 10m)'
                  opdata: 'Current utilization: {ITEM.LASTVALUE}'
                  priority: AVERAGE
                  description: 'Routing Engine CPU utilization is too high.'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: 3219e76abec24d8183bca320cbea6be9
              name: 'Routing Engine Slot [{#SLOT}]: CPU user utilization'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.cpu.user.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of CPU time being used by user processes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["cpu-user"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: cpu
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 082a4e78e8034e0ba30deff9333c5135
              name: 'Routing Engine Slot [{#SLOT}]: DRAM available'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.dram["{#SLOT}"]'
              units: B
              description: 'Total DRAM available to the Routing Engine''s processor.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["memory-dram-size"].first()'
                - type: RTRIM
                  parameters:
                    - MB
                - type: MULTIPLIER
                  parameters:
                    - '1048576'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: memory
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: bf85c3d90d424889b4beee7b6c0a19a1
              name: 'Routing Engine Slot [{#SLOT}]: Get metrics data'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              history: '0'
              value_type: TEXT
              description: 'Gets data for FPC Slot ''[{#SLOT}]''.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.slot == "{#SLOT}")]'
                  error_handler: DISCARD_VALUE
              master_item:
                key: juniper.mx.routing.engine.data.get
              tags:
                - tag: component
                  value: raw
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 77b060276b2245afb70ea2ffc71e2901
              name: 'Routing Engine Slot [{#SLOT}]: Memory utilization'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.mem.util["{#SLOT}"]'
              units: '%'
              description: 'Percentage of Routing Engine memory being used.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["memory-buffer-utilization"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: memory
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: 2a1f8f48b260462dbfce0e9a08ead83f
                  expression: 'min(/Juniper MX by NETCONF/juniper.mx.routing.engine.mem.util["{#SLOT}"],5m)>{$JUNIPER.MX.MEMORY.UTIL.MAX}'
                  name: 'Juniper MX: High Routing Engine memory utilization'
                  event_name: 'Juniper MX: Routing Engine Slot [{#SLOT}]: High memory utilization (>{$JUNIPER.MX.MEMORY.UTIL.MAX}% for 5m)'
                  opdata: 'Current utilization: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'The system is running out of free memory.'
                  tags:
                    - tag: scope
                      value: capacity
                    - tag: scope
                      value: performance
            - uuid: c8e33d67ecb7403ebf59b95738c5de40
              name: 'Routing Engine Slot [{#SLOT}]: Model'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.model["{#SLOT}"]'
              value_type: TEXT
              description: 'Routing Engine model.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..model.first()
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 714f8e7e710d4988933120ea9ed1becb
              name: 'Routing Engine Slot [{#SLOT}]: Last reboot reason'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.reboot["{#SLOT}"]'
              value_type: TEXT
              description: 'Routing Engine last reboot reason.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["last-reboot-reason"].first()'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: 2d3d6a07927044ea8549a9af78c4fb48
              name: 'Routing Engine Slot [{#SLOT}]: Start time'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.start.time["{#SLOT}"]'
              units: unixtime
              description: 'Time when the Routing Engine started running.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["start-time"]["@seconds"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
            - uuid: ed60fc188b9f4e1b81d0f7a20fae611b
              name: 'Routing Engine Slot [{#SLOT}]: Status'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.status["{#SLOT}"]'
              value_type: TEXT
              description: 'Routing Engine status.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $..status.first()
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
              trigger_prototypes:
                - uuid: d10584f9573c4c37affdce2764fd9e35
                  expression: 'last(/Juniper MX by NETCONF/juniper.mx.routing.engine.status["{#SLOT}"])<>"OK"'
                  name: 'Juniper MX: Routing Engine Slot [{#SLOT}]: Status not "OK"'
                  opdata: 'Current status: {ITEM.LASTVALUE}'
                  priority: HIGH
                  description: 'Check the Routing Engine errors.'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 9fa9fa28042b466d836e0b4bb2bb0de2
              name: 'Routing Engine Slot [{#SLOT}]: Uptime'
              type: DEPENDENT
              key: 'juniper.mx.routing.engine.uptime["{#SLOT}"]'
              units: uptime
              description: 'How long the Routing Engine has been running.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..["up-time"]["@seconds"].first()'
              master_item:
                key: 'juniper.mx.routing.engine.get["{#SLOT}"]'
              tags:
                - tag: component
                  value: chassis
                - tag: component
                  value: route-engine
                - tag: route-engine-slot
                  value: '{#SLOT}'
          graph_prototypes:
            - uuid: 7819e37bfdeb427b8a538722f37e358c
              name: 'Juniper MX: Routing Engine Slot [{#SLOT}]: CPU utilization'
              type: STACKED
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.idle["{#SLOT}"]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.background.util["{#SLOT}"]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.system.util["{#SLOT}"]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.interrupt.util["{#SLOT}"]'
                - sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.user.util["{#SLOT}"]'
                - sortorder: '5'
                  color: 6C59DC
                  item:
                    host: 'Juniper MX by NETCONF'
                    key: 'juniper.mx.routing.engine.cpu.total.util["{#SLOT}"]'
          master_item:
            key: juniper.mx.routing.engine.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var routing_engine = JSON.parse(value);
                  
                  var result = routing_engine.map(function (slot) {
                    return {
                  	'{#SLOT}': slot['slot']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: dc73d54e62dd4a079d0761cb73f15a80
          name: 'Temperature discovery'
          type: DEPENDENT
          key: juniper.mx.temperature.discovery
          description: 'Scanning `show chassis environment` for temperature.'
          item_prototypes:
            - uuid: 6e1a4b34cb5442b69c990d07289c397c
              name: 'Sensor [{#NAME}]: Temperature'
              type: DEPENDENT
              key: 'juniper.mx.temperature["{#NAME}"]'
              units: °C
              description: 'Temperature of air flowing in degrees Celsius (C).'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name==''{#NAME}'')].temperature["@celsius"].first()'
              master_item:
                key: juniper.mx.temperature.data.get
              tags:
                - tag: component
                  value: temperature
                - tag: sensor
                  value: '{#NAME}'
          master_item:
            key: juniper.mx.temperature.data.get
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var temperature = JSON.parse(value);
                  
                  var result = temperature.map(function (sensor) {
                    return {
                  	'{#NAME}': sensor['name'],
                  	'{#STATUS}': sensor['status'],
                  	'{#CLASS}': sensor['class']
                    };
                  });
                  
                  return JSON.stringify(result);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          overrides:
            - name: 'Not OK status'
              step: '1'
              filter:
                conditions:
                  - macro: '{#STATUS}'
                    value: OK
                    operator: NOT_MATCHES_REGEX
              operations:
                - operator: REGEXP
                  value: Temperature
                  discover: NO_DISCOVER
            - name: 'Not Fans'
              step: '2'
              filter:
                conditions:
                  - macro: '{#CLASS}'
                    value: Fans
              operations:
                - operator: REGEXP
                  value: Temperature
                  discover: NO_DISCOVER
      tags:
        - tag: class
          value: network
        - tag: target
          value: juniper
        - tag: target
          value: mx
      macros:
        - macro: '{$JUNIPER.MX.ALARM.CLASS.MATCHES}'
          value: '^.*$'
          description: 'Used for alarm discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.ALARM.CLASS.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for alarm discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.ALARM.NAME.MATCHES}'
          value: '^.*$'
          description: 'Used for alarm discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.ALARM.NAME.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for alarm discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.MATCHES}'
          value: '^.*$'
          description: 'Used for BGP discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.BGP.PEER.REMOTE.ADDR.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for BGP discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.BGP.PEER.STATE}'
          value: ^(6|1)$
          description: 'BGP peer state for a trigger.'
        - macro: '{$JUNIPER.MX.BGP.ROUTER.NAME.MATCHES}'
          value: '^.*$'
          description: 'Used for BGP discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.BGP.ROUTER.NAME.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for BGP discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.CPU.UTIL.MIN}'
          value: '90'
          description: 'Threshold of Routing Engine CPU utilization for a trigger in %.'
        - macro: '{$JUNIPER.MX.FPC.BUFFER.MEMORY.UTIL.MAX}'
          value: '80'
          description: 'Threshold of buffer space being used by the FPC''s processor utilization for a trigger in %.'
        - macro: '{$JUNIPER.MX.FPC.CPU.UTIL.MIN}'
          value: '90'
          description: 'Threshold of CPU being used by the FPC''s processor utilization for a trigger in %.'
        - macro: '{$JUNIPER.MX.FPC.HEAP.MEMORY.UTIL.MAX}'
          value: '70'
          description: 'Threshold of heap space (dynamic memory) being used by the FPC''s processor utilization for a trigger in %.'
        - macro: '{$JUNIPER.MX.FS.FREE.MIN.CRIT}'
          value: 5G
          description: 'The critical threshold of filesystem utilization.'
        - macro: '{$JUNIPER.MX.FS.FREE.MIN.WARN}'
          value: 10G
          description: 'The warning threshold of filesystem utilization.'
        - macro: '{$JUNIPER.MX.FS.FSNAME.MATCHES}'
          value: '^.*$'
          description: 'Used for filesystem discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.FS.FSNAME.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for filesystem discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.FS.PUSED.MAX.CRIT}'
          value: '90'
          description: 'The critical threshold of filesystem utilization.'
        - macro: '{$JUNIPER.MX.FS.PUSED.MAX.WARN}'
          value: '80'
          description: 'The warning threshold of filesystem utilization.'
        - macro: '{$JUNIPER.MX.MEMORY.UTIL.MAX}'
          value: '90'
          description: 'Threshold of memory utilization for a trigger in %.'
        - macro: '{$JUNIPER.MX.NET.IF.ADMINSTATUS.MATCHES}'
          value: '^.*$'
        - macro: '{$JUNIPER.MX.NET.IF.ADMINSTATUS.NOT_MATCHES}'
          value: ^down$
          description: 'Ignore the `down` administrative status'
        - macro: '{$JUNIPER.MX.NET.IF.CONTROL}'
          value: '1'
          description: 'The operational state of the interface for the `link down` trigger. Can be used with the interface name as context.'
        - macro: '{$JUNIPER.MX.NET.IF.IFOPERSTATUS.MATCHES}'
          value: '^.*$'
          description: 'Used for network physical interface discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.NET.IF.IFOPERSTATUS.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for network physical interface discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.NET.IF.NAME.MATCHES}'
          value: '^.*$'
          description: 'Used for discovering network physical interfaces. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.NET.IF.NAME.NOT_MATCHES}'
          value: '(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9a-z]+$|docker[0-9]+|br-[a-z0-9]{12})'
          description: 'Filters out `loopbacks`, `nulls`, docker `veth` links, and the `docker0` bridge by default.'
        - macro: '{$JUNIPER.MX.NET.IF.SFP.NAME.MATCHES}'
          value: '^.*$'
          description: 'Used for SFP interface discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.NET.IF.SFP.NAME.NOT_MATCHES}'
          value: '<CHANGE_IF_NEEDED>'
          description: 'Used for SFP interface discovery. Can be overridden on the host or linked template level.'
        - macro: '{$JUNIPER.MX.NET.IF.UTIL.MAX}'
          value: '90'
          description: 'The threshold in the hardware interface utilization triggers.'
        - macro: '{$JUNIPER.MX.NETCONF.IP}'
          value: '<SET JUNIPER MX IP NETCONF>'
          description: 'The IP address of the Juniper MX device.'
        - macro: '{$JUNIPER.MX.NETCONF.PASSWORD}'
          type: SECRET_TEXT
          description: 'Juniper NETCONF password.'
        - macro: '{$JUNIPER.MX.NETCONF.PORT}'
          value: '830'
          description: 'The NETCONF port of the Juniper MX device.'
        - macro: '{$JUNIPER.MX.NETCONF.RESPONSE_TIME.MAX.WARN}'
          value: '10'
          description: 'The maximum Juniper NETCONF response time expressed in seconds, for a trigger expression.'
        - macro: '{$JUNIPER.MX.NETCONF.TIMEOUT}'
          value: 15s
          description: 'SSH response timeout.'
        - macro: '{$JUNIPER.MX.NETCONF.USERNAME}'
          description: 'Juniper NETCONF username.'
      dashboards:
        - uuid: 6515b40b447a4037bb602813c07c5ed1
          name: 'Juniper MX: Overview'
          pages:
            - name: 'Routing Engine'
              widgets:
                - type: itemnavigator
                  name: 'CPU utilization'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: route-engine-slot
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*]: CPU * utilization'
                    - type: STRING
                      name: reference
                      value: UBMEB
                - type: itemnavigator
                  name: 'Memory utilization'
                  'y': '5'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: route-engine-slot
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*]: Memory utilization'
                    - type: STRING
                      name: reference
                      value: DUPNP
                - type: itemnavigator
                  name: 'Running time'
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: route-engine-slot
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*time'
                    - type: STRING
                      name: reference
                      value: GVYTE
                - type: svggraph
                  name: 'CPU utilization'
                  x: '12'
                  width: '36'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 7495f7
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: UBMEB._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: reference
                      value: NINNI
                    - type: INTEGER
                      name: righty
                      value: '0'
                    - type: INTEGER
                      name: simple_triggers
                      value: '1'
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: 'Memory utilization'
                  x: '12'
                  'y': '5'
                  width: '36'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 147aaa
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: DUPNP._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: reference
                      value: OUWQN
                    - type: INTEGER
                      name: righty
                      value: '0'
                - type: item
                  name: Uptime
                  x: '12'
                  'y': '10'
                  width: '25'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: INTEGER
                      name: decimal_places
                      value: '0'
                    - type: STRING
                      name: itemid._reference
                      value: GVYTE._itemid
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: STRING
                      name: units_color
                      value: 1565C0
                    - type: STRING
                      name: value_color
                      value: 84b135
                    - type: INTEGER
                      name: value_size
                      value: '20'
                - type: item
                  name: 'Last reboot reason'
                  x: '37'
                  'y': '10'
                  width: '23'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: INTEGER
                      name: decimal_places
                      value: '0'
                    - type: STRING
                      name: itemid._reference
                      value: HCJBE._itemid
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: STRING
                      name: value_color
                      value: 84b135
                    - type: INTEGER
                      name: value_size
                      value: '20'
                - type: item
                  name: 'CPU temperature'
                  x: '48'
                  width: '12'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: INTEGER
                      name: decimal_places
                      value: '0'
                    - type: STRING
                      name: down_color
                      value: 0080FF
                    - type: STRING
                      name: itemid._reference
                      value: CYJMB._itemid
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: INTEGER
                      name: show.1
                      value: '4'
                    - type: STRING
                      name: units_color
                      value: 78909C
                    - type: INTEGER
                      name: units_size
                      value: '25'
                    - type: STRING
                      name: up_color
                      value: FF0000
                    - type: STRING
                      name: value_color
                      value: 84b135
                    - type: INTEGER
                      name: value_size
                      value: '30'
                - type: honeycomb
                  name: Status
                  x: '48'
                  'y': '5'
                  width: '24'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84b135
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*]: Status'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DDBDC
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: itemnavigator
                  name: 'CPU temperature'
                  x: '60'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: route-engine-slot
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*]: CPU temperature'
                    - type: STRING
                      name: reference
                      value: CYJMB
                - type: itemnavigator
                  name: 'Reboot reason'
                  x: '60'
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: route-engine-slot
                    - type: STRING
                      name: items.0
                      value: 'Routing Engine Slot [*]: Last reboot reason'
                    - type: STRING
                      name: reference
                      value: HCJBE
            - name: FPC
              widgets:
                - type: itemnavigator
                  name: 'CPU total utilization'
                  width: '11'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: fpc-slot
                    - type: STRING
                      name: items.0
                      value: 'FPC Slot [*]: CPU total utilization'
                    - type: STRING
                      name: reference
                      value: EXLMY
                - type: itemnavigator
                  name: 'Running time'
                  'y': '5'
                  width: '11'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: fpc-slot
                    - type: STRING
                      name: items.0
                      value: 'FPC Slot [*time'
                    - type: STRING
                      name: reference
                      value: ADFBC
                - type: gauge
                  name: 'CPU total utilization'
                  x: '11'
                  width: '14'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: INTEGER
                      name: angle
                      value: '270'
                    - type: STRING
                      name: empty_color
                      value: 78909C
                    - type: STRING
                      name: itemid._reference
                      value: EXLMY._itemid
                    - type: STRING
                      name: max
                      value: '100'
                    - type: STRING
                      name: min
                      value: '0'
                    - type: INTEGER
                      name: show.0
                      value: '3'
                    - type: INTEGER
                      name: show.1
                      value: '4'
                    - type: INTEGER
                      name: show.2
                      value: '2'
                    - type: INTEGER
                      name: show.3
                      value: '5'
                    - type: STRING
                      name: value_arc_color
                      value: d00700
                - type: item
                  name: 'Running time'
                  x: '11'
                  'y': '5'
                  width: '25'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: INTEGER
                      name: decimal_places
                      value: '0'
                    - type: STRING
                      name: itemid._reference
                      value: ADFBC._itemid
                    - type: INTEGER
                      name: show.0
                      value: '2'
                    - type: STRING
                      name: units_color
                      value: 1565C0
                    - type: STRING
                      name: value_color
                      value: 84b135
                    - type: INTEGER
                      name: value_size
                      value: '20'
                - type: svggraph
                  name: 'Memory utilization'
                  x: '25'
                  width: '36'
                  height: '5'
                  hide_header: 'YES'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 147aaa
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: XPKCQ._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: STRING
                      name: reference
                      value: DEEAA
                - type: honeycomb
                  name: State
                  x: '36'
                  'y': '5'
                  width: '36'
                  height: '5'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84b135
                    - type: STRING
                      name: items.0
                      value: 'FPC Slot [*]: State'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: KWIFH
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: itemnavigator
                  name: 'Memory utilization'
                  x: '61'
                  width: '11'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: fpc-slot
                    - type: STRING
                      name: items.0
                      value: 'FPC Slot [*]: *utilization'
                    - type: INTEGER
                      name: item_tags.0.operator
                      value: '0'
                    - type: STRING
                      name: item_tags.0.tag
                      value: component
                    - type: STRING
                      name: item_tags.0.value
                      value: memory
                    - type: STRING
                      name: reference
                      value: XPKCQ
            - name: 'Network interfaces'
              widgets:
                - type: itemnavigator
                  name: 'Interfaces input data'
                  width: '14'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: interface
                    - type: STRING
                      name: items.0
                      value: 'Interface [*: Input *'
                    - type: STRING
                      name: reference
                      value: DCBAF
                    - type: INTEGER
                      name: show_lines
                      value: '300'
                - type: itemnavigator
                  name: 'Interfaces output data'
                  'y': '6'
                  width: '14'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: interface
                    - type: STRING
                      name: items.0
                      value: 'Interface [*: Output *'
                    - type: STRING
                      name: reference
                      value: ABDEC
                    - type: INTEGER
                      name: show_lines
                      value: '300'
                - type: svggraph
                  name: Interface
                  x: '14'
                  width: '58'
                  height: '12'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 97580b
                    - type: STRING
                      name: ds.0.color.1
                      value: 665b89
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: DCBAF._itemid
                    - type: STRING
                      name: ds.0.itemids.1._reference
                      value: ABDEC._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CDAEE
                    - type: INTEGER
                      name: working_time
                      value: '1'
            - name: 'Digital Lane Monitoring'
              widgets:
                - type: itemnavigator
                  name: TX
                  width: '14'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: sfp
                    - type: STRING
                      name: items.0
                      value: '*Tx optical power'
                    - type: STRING
                      name: reference
                      value: AFBCA
                    - type: INTEGER
                      name: show_lines
                      value: '200'
                - type: itemnavigator
                  name: RX
                  'y': '6'
                  width: '14'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: sfp
                    - type: STRING
                      name: items.0
                      value: '*Rx optical power'
                    - type: STRING
                      name: reference
                      value: CDEFB
                    - type: INTEGER
                      name: show_lines
                      value: '200'
                - type: svggraph
                  name: 'TX optical power lane'
                  x: '14'
                  width: '58'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 29b00b
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: AFBCA._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CDAEE
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: 'Rx optical power lane'
                  x: '14'
                  'y': '6'
                  width: '58'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 0d62c3
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: CDEFB._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CEACB
                    - type: INTEGER
                      name: working_time
                      value: '1'
            - name: BGP/OSPF
              widgets:
                - type: honeycomb
                  name: 'BGP Peer State'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84B135
                    - type: STRING
                      name: items.0
                      value: '*peer * State'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EACDB
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: itemnavigator
                  name: 'BGP prefixes'
                  'y': '6'
                  width: '20'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: group_by.0.attribute
                      value: '3'
                    - type: STRING
                      name: group_by.0.tag_name
                      value: address
                    - type: STRING
                      name: items.0
                      value: 'BGP * prefixes'
                    - type: STRING
                      name: reference
                      value: DBFDE
                    - type: INTEGER
                      name: show_lines
                      value: '200'
                - type: svggraph
                  name: Prefixes
                  x: '20'
                  'y': '6'
                  width: '52'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color.0
                      value: 088f25
                    - type: INTEGER
                      name: ds.0.dataset_type
                      value: '0'
                    - type: STRING
                      name: ds.0.itemids.0._reference
                      value: DBFDE._itemid
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: DCEFF
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: honeycomb
                  name: 'OSPF Neighbor State'
                  x: '36'
                  width: '18'
                  height: '6'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84B135
                    - type: STRING
                      name: items.0
                      value: '*OSPF Neighbor * State'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: EAECE
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                - type: honeycomb
                  name: 'OSPFv3 Neighbor State'
                  x: '54'
                  width: '18'
                  height: '6'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84B135
                    - type: STRING
                      name: items.0
                      value: '*OSPFv3 Neighbor * State'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: FEAAE
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
            - name: 'Temperature sensors'
              widgets:
                - type: svggraph
                  name: 'Control board CPU'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 4000FF
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Sensor [CB * CPU *]: Temperature'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CBCAF
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: 'Power Entry Module'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '666699'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Sensor [PEM *]: Temperature'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CFADB
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: 'Control board'
                  x: '36'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 607D8B
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Sensor [CB * Top *]: Temperature'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: FDDAC
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: FPC
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 689F38
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Sensor [FPC *]: Temperature'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: BFCBD
                    - type: INTEGER
                      name: working_time
                      value: '1'
            - name: FAN
              widgets:
                - type: itemnavigator
                  name: RPM
                  width: '12'
                  height: '8'
                  fields:
                    - type: STRING
                      name: items.0
                      value: 'Module [*]: Fan speed'
                    - type: STRING
                      name: reference
                      value: EFBCE
                    - type: INTEGER
                      name: show_lines
                      value: '200'
                - type: gauge
                  x: '12'
                  width: '28'
                  height: '4'
                  fields:
                    - type: INTEGER
                      name: angle
                      value: '270'
                    - type: INTEGER
                      name: decimal_places
                      value: '0'
                    - type: STRING
                      name: empty_color
                      value: 78909C
                    - type: STRING
                      name: itemid._reference
                      value: EFBCE._itemid
                    - type: STRING
                      name: max
                      value: '25000'
                    - type: STRING
                      name: min
                      value: '0'
                    - type: INTEGER
                      name: show.0
                      value: '3'
                    - type: INTEGER
                      name: show.1
                      value: '4'
                    - type: INTEGER
                      name: show.2
                      value: '2'
                    - type: INTEGER
                      name: show.3
                      value: '5'
                    - type: INTEGER
                      name: units_size
                      value: '15'
                    - type: STRING
                      name: value_arc_color
                      value: 84b135
                - type: svggraph
                  name: 'Speed, in %'
                  x: '12'
                  'y': '4'
                  width: '28'
                  height: '4'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 207cb6
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Module [*]: Percentage speed'
                    - type: INTEGER
                      name: legend_lines
                      value: '3'
                    - type: STRING
                      name: reference
                      value: CCCBD
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: honeycomb
                  name: Status
                  x: '40'
                  width: '32'
                  height: '8'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84B135
                    - type: STRING
                      name: items.0
                      value: 'Module [*]: Status'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: AEBCF
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
            - name: 'Power Entry Module'
              widgets:
                - type: honeycomb
                  name: 'PEM State'
                  width: '24'
                  height: '6'
                  fields:
                    - type: STRING
                      name: bg_color
                      value: 84b135
                    - type: STRING
                      name: items.0
                      value: 'Module *: State'
                    - type: STRING
                      name: primary_label
                      value: '{ITEM.NAME}'
                    - type: INTEGER
                      name: primary_label_bold
                      value: '1'
                    - type: STRING
                      name: reference
                      value: DDBDC
                    - type: STRING
                      name: secondary_label_color
                      value: 2334b9
                    - type: INTEGER
                      name: secondary_label_decimal_places
                      value: '0'
                    - type: STRING
                      name: thresholds.0.color
                      value: E65660
                    - type: STRING
                      name: thresholds.0.threshold
                      value: '2'
                - type: svggraph
                  name: Current
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: ea8e25
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Module *: Current'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: BBCBB
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: Load
                  x: '24'
                  width: '24'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 8724ea
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Module *: Load'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: EDFAD
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: Voltage
                  x: '36'
                  'y': '6'
                  width: '36'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: 303F9F
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Module *: Voltage'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: AEBDE
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: svggraph
                  name: Power
                  x: '48'
                  width: '24'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: '282e87'
                    - type: STRING
                      name: ds.0.items.0
                      value: 'Module *: Power'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: DFBDE
                    - type: INTEGER
                      name: working_time
                      value: '1'
            - name: Space
              widgets:
                - type: piechart
                  name: Available
                  width: '24'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: draw_type
                      value: '1'
                    - type: STRING
                      name: ds.0.color
                      value: 84b135
                    - type: STRING
                      name: ds.0.items.0
                      value: 'FS * Space: Available'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_value
                      value: '1'
                    - type: INTEGER
                      name: space
                      value: '3'
                    - type: INTEGER
                      name: total_show
                      value: '1'
                    - type: STRING
                      name: units
                      value: ' '
                    - type: INTEGER
                      name: units_show
                      value: '1'
                - type: svggraph
                  name: 'Used, in %'
                  'y': '6'
                  width: '72'
                  height: '6'
                  fields:
                    - type: STRING
                      name: ds.0.color
                      value: a25353
                    - type: STRING
                      name: ds.0.items.0
                      value: 'FS *: Space: Used, in %'
                    - type: INTEGER
                      name: ds.0.width
                      value: '2'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: STRING
                      name: reference
                      value: CAFAB
                    - type: INTEGER
                      name: working_time
                      value: '1'
                - type: piechart
                  name: Used
                  x: '24'
                  width: '24'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: draw_type
                      value: '1'
                    - type: STRING
                      name: ds.0.color
                      value: e8853a
                    - type: STRING
                      name: ds.0.items.0
                      value: 'FS * Space: Used'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_value
                      value: '1'
                    - type: INTEGER
                      name: space
                      value: '3'
                    - type: INTEGER
                      name: total_show
                      value: '1'
                    - type: STRING
                      name: units
                      value: ' '
                    - type: INTEGER
                      name: units_show
                      value: '1'
                - type: piechart
                  name: Total
                  x: '48'
                  width: '24'
                  height: '6'
                  fields:
                    - type: INTEGER
                      name: draw_type
                      value: '1'
                    - type: STRING
                      name: ds.0.color
                      value: 5a49c7
                    - type: STRING
                      name: ds.0.items.0
                      value: 'FS * Space: Total'
                    - type: INTEGER
                      name: legend_lines
                      value: '2'
                    - type: INTEGER
                      name: legend_value
                      value: '1'
                    - type: INTEGER
                      name: space
                      value: '3'
                    - type: INTEGER
                      name: total_show
                      value: '1'
                    - type: STRING
                      name: units
                      value: ' '
                    - type: INTEGER
                      name: units_show
                      value: '1'
      valuemaps:
        - uuid: 33d53176ef7543eaa868381569532b2e
          name: 'Alarm severity'
          mappings:
            - value: '1'
              newvalue: Info
            - value: '2'
              newvalue: Minor
            - value: '3'
              newvalue: Major
            - value: '4'
              newvalue: Critical
        - uuid: 306f5cccb3d54f27bc1c5afc987fab4f
          name: 'BGP peer state'
          mappings:
            - value: '1'
              newvalue: idle
            - value: '2'
              newvalue: connect
            - value: '3'
              newvalue: active
            - value: '4'
              newvalue: opensent
            - value: '5'
              newvalue: openconfirm
            - value: '6'
              newvalue: established
        - uuid: 5e2aa39070af44e1b4ebe151570e1d51
          name: 'FAN status'
          mappings:
            - value: '1'
              newvalue: OK
            - value: '2'
              newvalue: Check
        - uuid: 49872af732044c66890066e5f34ae60b
          name: 'FPC slot state'
          mappings:
            - value: '1'
              newvalue: Dead
            - value: '2'
              newvalue: Diag
            - value: '3'
              newvalue: Dormant
            - value: '4'
              newvalue: Empty
            - value: '5'
              newvalue: Offline
            - value: '6'
              newvalue: Online
            - value: '7'
              newvalue: Present
            - value: '8'
              newvalue: Probed
            - value: '9'
              newvalue: Probe-wait
            - value: '10'
              newvalue: Unknown
            - value: '11'
              newvalue: Onlining
            - value: '12'
              newvalue: Offlining
            - value: '13'
              newvalue: Fault
            - value: '14'
              newvalue: Fault-off
            - value: '15'
              newvalue: Spare
        - uuid: fba99ee500df44d3b08f75d90f763834
          name: 'Operational status'
          mappings:
            - value: '1'
              newvalue: up
            - value: '2'
              newvalue: down
            - value: '4'
              newvalue: unknown
            - value: '5'
              newvalue: dormant
            - value: '6'
              newvalue: notPresent
            - value: '7'
              newvalue: lowerLayerDown
        - uuid: e80f0208b55940c4bc79332026d987e9
          name: 'OSPF neighbor state'
          mappings:
            - value: '1'
              newvalue: Attempt
            - value: '2'
              newvalue: Down
            - value: '3'
              newvalue: Exchange
            - value: '4'
              newvalue: ExStart
            - value: '5'
              newvalue: Full
            - value: '6'
              newvalue: Init
            - value: '7'
              newvalue: Loading
            - value: '8'
              newvalue: 2Way
        - uuid: 4a9f2fcadddb4209aff2b37669301409
          name: 'PEM state'
          mappings:
            - value: '1'
              newvalue: Online
            - value: '2'
              newvalue: Offline
        - uuid: c08a38a20c054fa4b6a99916ca884921
          name: 'Service status'
          mappings:
            - value: '0'
              newvalue: Down
            - value: '1'
              newvalue: Up
