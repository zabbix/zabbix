<?php
/*
** Copyright (C) 2001-2025 Zabbix SIA
**
** This program is free software: you can redistribute it and/or modify it under the terms of
** the GNU Affero General Public License as published by the Free Software Foundation, version 3.
**
** This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
** without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
** See the GNU Affero General Public License for more details.
**
** You should have received a copy of the GNU Affero General Public License along with this program.
** If not, see <https://www.gnu.org/licenses/>.
**/

require_once dirname(__FILE__).'/../include/CIntegrationTest.php';
require_once dirname(__FILE__).'/../include/helpers/CDataHelper.php';

/**
 * Test suite for data collection using both active and passive agents.
 *
 * @backup history, hosts, host_rtdata, proxy, proxy_rtdata, auditlog, changelog, settings, ha_node, changelog
 * @backup config_autoreg_tls, expressions, globalmacro, hosts, interface, item_preproc, item_rtdata, items, regexps
 */
class testBinaryValueTypeDataCollection extends CIntegrationTest {

	private static $itemids = [];

	const base64_image = "";

	const base64_empty = "";
	const base64_invalid = "a";

	const TEST_FILE_NAME_JSON_WITH_IMAGE="/tmp/json_with_image.txt";

	/**
	 * @inheritdoc
	 */
	public function prepareData() {

		$base64_image = self::base64_image;
		$base64_empty = self::base64_empty;
		$base64_invalid = self::base64_invalid;
		$json_with_image = <<<HEREA
		{
			"result": "fail",
			"error_message": "assertion failed: element id top-header not found",
			"http_response": "200",
			"start_time": {
			"value": "Nov 11 10:00:00 2022 GMT",
			"timestamp": 1668153600
			},
			"duration": 11628,
			"performance_timings": {
			"download": 1070,
			"tls_handshake": 230,
			"dns_lookup": 290
			},
			"screenshot_image": "$base64_image",
			"screenshot_empty": "$base64_empty",
			"screenshot_invalid": "$base64_invalid",
			"custom_result": {
			"broken_links": 0
			}
		}
		HEREA;

		$this->assertTrue(@file_put_contents(self::TEST_FILE_NAME_JSON_WITH_IMAGE, $json_with_image) !== false);

		CDataHelper::call('proxy.create', [
			'name' => 'proxy',
			'operating_mode' => PROXY_OPERATING_MODE_ACTIVE
		]);

		$proxyids = CDataHelper::getIds('name');

		$interfaces = [
			'type' => 1,
			'main' => 1,
			'useip' => 1,
			'ip' => '127.0.0.1',
			'dns' => '',
			'port' => $this->getConfigurationValue(self::COMPONENT_AGENT, 'ListenPort')
		];

		$groups = ['groupid' => 4];

		$result = CDataHelper::createHosts([
			[
				'host' => 'agent',
				'interfaces' => $interfaces,
				'groups' => $groups,
				'status' => HOST_STATUS_MONITORED,
				'items' => [
					[
						'name' => 'JSON_WITH_IMAGE',
						'key_' => 'vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]',
						'type' => ITEM_TYPE_ZABBIX,
						'value_type' => ITEM_VALUE_TYPE_TEXT,
						'delay' => '1s'
					]
				]
			],
			[
				'host' => 'proxy_agent',
				'interfaces' => $interfaces,
				'groups' => $groups,
				'proxyid' => $proxyids['proxy'],
				'monitored_by' => ZBX_MONITORED_BY_PROXY,
				'status' => HOST_STATUS_MONITORED,
				'items' => [
					[
						'name' => 'JSON_WITH_IMAGE',
						'key_' => 'vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]',
						'type' => ITEM_TYPE_ZABBIX,
						'value_type' => ITEM_VALUE_TYPE_TEXT,
						'delay' => '1s'
					]
				]
			]
		]);

		self::$itemids = $result['itemids'];

		$dep_items_create_result = CDataHelper::createItems('item',
			['agent' =>
				[
				[
						'name' => 'BINARY_IMAGE',
						'key_' => 'BINARY_IMAGE',
						'type' => ITEM_TYPE_DEPENDENT,
						'master_itemid' => self::$itemids['agent:vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]'],
						'value_type' => ITEM_VALUE_TYPE_BINARY,
						'delay' => '0s',
						'preprocessing' => [['type' => 12, 'params' => '$.screenshot_image',
						'error_handler' => 0,
						'error_handler_params' => ''
							]]
				],
				[
					'name' => 'BINARY_IMAGE_EMPTY',
					'key_' => 'BINARY_IMAGE_EMPTY',
					'type' => ITEM_TYPE_DEPENDENT,
					'master_itemid' => self::$itemids['agent:vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]'],
					'value_type' => ITEM_VALUE_TYPE_BINARY,
					'delay' => '0s',
					'preprocessing' =>
						[[
							'type' => 12,
							'params' => '$.screenshot_empty',
							'error_handler' => 0,
							'error_handler_params' => ''
						]]
				],
				[
					'name' => 'BINARY_IMAGE_INVALID',
					'key_' => 'BINARY_IMAGE_INVALID',
					'type' => ITEM_TYPE_DEPENDENT,
					'master_itemid' => self::$itemids['agent:vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]'],
					'value_type' => ITEM_VALUE_TYPE_BINARY,
					'delay' => '0s',
					'preprocessing' =>
						[[
							'type' => 12,
							'params' => '$.screenshot_invalid',
							'error_handler' => 0,
							'error_handler_params' => ''
						]]
				]]
			]
		, $result['hostids']);

		self::$itemids = array_merge(self::$itemids, $dep_items_create_result);

		$dep_items_create_result = CDataHelper::createItems('item',
			['proxy_agent' =>
				[[
					'name' => 'BINARY_IMAGE',
					'key_' => 'BINARY_IMAGE',
					'type' => ITEM_TYPE_DEPENDENT,
					'master_itemid' => self::$itemids['proxy_agent:vfs.file.contents['.self::TEST_FILE_NAME_JSON_WITH_IMAGE.',]'],
					'value_type' => ITEM_VALUE_TYPE_BINARY,
					'delay' => '0s',
					'preprocessing' =>
						[[
							'type' => 12,
							'params' => '$.screenshot_image',
							'error_handler' => 0,
							'error_handler_params' => ''
						]]
				]]
			]
		, $result['hostids']);

		self::$itemids = array_merge(self::$itemids, $dep_items_create_result);

		return true;
	}

	/**
	 * Component configuration provider for agent related tests.
	 *
	 * @return array
	 */
	public function agentConfigurationProvider() {
		return [
			self::COMPONENT_SERVER => [
				'UnreachablePeriod' => 5,
				'UnavailableDelay' => 5,
				'UnreachableDelay' => 1,
				'DebugLevel' => 5,
				'LogFileSize' => 0
			],
			self::COMPONENT_AGENT => [
				'Hostname' => 'agent',
				'ServerActive' => '127.0.0.1'
			]
		];
	}

	public function checkItemState(string $name, int $state) {
		$wait_iterations = 5;
		$wait_iteration_delay = 1;

		for ($r = 0; $r < $wait_iterations; $r++) {
			$item = $this->call('item.get', [
			'output' => ['state', 'lastvalue'],
			'itemids' => self::$itemids[$name]
			])['result'][0];

			if ($item['state'] == $state && ($state == ITEM_STATE_NOTSUPPORTED)) {
				break;
			}

			sleep($wait_iteration_delay);
		}

		$this->assertEquals($state, $item['state'], 'User parameter failed to reload, item name: '.$name);
	}

	/**
	 * Test if both active and passive agent checks are processed.
	 *
	 * @required-components server, agent
	 * @configurationDataProvider agentConfigurationProvider
	 * @hosts agent
	 */
	public function testBinaryValueTypeDataCollection_checkAgentData() {

		self::waitForLogLineToBePresent(self::COMPONENT_SERVER, [
			'enabling Zabbix agent checks on host "agent": interface became available',
			'resuming Zabbix agent checks on host "agent": connection restored'
		]);

		$this->reloadConfigurationCache(self::COMPONENT_SERVER);
		$this->waitForLogLineToBePresent(self::COMPONENT_SERVER, "finished forced reloading of the configuration cache", true, 60, 1);

		// Retrieve history data from API as soon it is available.
		// image
		$active_data = $this->callUntilDataIsPresent('history.get', [
			'itemids'	=>	self::$itemids['agent:BINARY_IMAGE'],
			'history'	=>	ITEM_VALUE_TYPE_BINARY
		]);

		$base64_image = self::base64_image;
		foreach ($active_data['result'] as $item) {
			$this->assertEquals($base64_image, $item['value']);
		}

		// empty
		$active_data = $this->callUntilDataIsPresent('history.get', [
			'itemids'	=>	self::$itemids['agent:BINARY_IMAGE_EMPTY'],
			'history'	=>	ITEM_VALUE_TYPE_BINARY
		]);

		$base64_empty = self::base64_empty;
		foreach ($active_data['result'] as $item) {
			$this->assertEquals($base64_empty, $item['value']);
		}

		$this->checkItemState('agent:BINARY_IMAGE', ITEM_STATE_NORMAL);
		$this->checkItemState('agent:BINARY_IMAGE_EMPTY', ITEM_STATE_NORMAL);
		$this->checkItemState('agent:BINARY_IMAGE_INVALID', ITEM_STATE_NOTSUPPORTED);
	}

	/**
	 * Component configuration provider for proxy related tests.
	 *
	 * @return array
	 */
	public function proxyConfigurationProvider() {
		return [
			self::COMPONENT_SERVER => [
				'UnreachablePeriod' => 5,
				'UnavailableDelay' => 5,
				'UnreachableDelay' => 1,
				'DebugLevel' => 5,
				'LogFileSize' => 0
			],
			self::COMPONENT_PROXY => [
				'UnreachablePeriod' => 5,
				'UnavailableDelay' => 5,
				'UnreachableDelay' => 1,
				'DebugLevel' => 5,
				'LogFileSize' => 0,
				'Hostname' => 'proxy',
				'Server' => '127.0.0.1:'.self::getConfigurationValue(self::COMPONENT_SERVER, 'ListenPort')
			],
			self::COMPONENT_AGENT => [
				'Hostname' => 'proxy_agent',
				'ServerActive' => '127.0.0.1:'.self::getConfigurationValue(self::COMPONENT_PROXY, 'ListenPort')
			]
		];
	}

	/**
	 * Test if both active and passive agent checks are processed.
	 *
	 * @required-components server, proxy, agent
	 * @configurationDataProvider proxyConfigurationProvider
	 * @hosts proxy_agent
	 */
	public function testBinaryValueTypeDataCollection_checkProxyData() {
		self::waitForLogLineToBePresent(self::COMPONENT_SERVER, 'sending configuration data to proxy "proxy"');
		self::waitForLogLineToBePresent(self::COMPONENT_PROXY, 'received configuration data from server');
		self::waitForLogLineToBePresent(self::COMPONENT_PROXY, [
			'enabling Zabbix agent checks on host "proxy_agent": interface became available',
			'resuming Zabbix agent checks on host "proxy_agent": connection restored'
		]);

		$this->reloadConfigurationCache(self::COMPONENT_PROXY);

		$base64_image = self::base64_image;

		// Retrieve history data from API as soon it is available.
		$active_data = $this->callUntilDataIsPresent('history.get', [
			'itemids'	=> self::$itemids['proxy_agent:BINARY_IMAGE'],
			'history'	=> ITEM_VALUE_TYPE_BINARY
		]);

		foreach ($active_data['result'] as $item) {
			$this->assertEquals($base64_image, $item['value']);
		}
	}
}
