// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

/*
** Copyright (C) 2001-2025 Zabbix SIA
**
** This program is free software: you can redistribute it and/or modify it under the terms of
** the GNU Affero General Public License as published by the Free Software Foundation, version 3.
**
** This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
** without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
** See the GNU Affero General Public License for more details.
**
** You should have received a copy of the GNU Affero General Public License along with this program.
** If not, see <https://www.gnu.org/licenses/>.
**/

package mockzbxcomms

import (
	mock "github.com/stretchr/testify/mock"
)

// NewConnectionInterface creates a new instance of ConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionInterface {
	mock := &ConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectionInterface is an autogenerated mock type for the ConnectionInterface type
type ConnectionInterface struct {
	mock.Mock
}

type ConnectionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionInterface) EXPECT() *ConnectionInterface_Expecter {
	return &ConnectionInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectionInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ConnectionInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ConnectionInterface_Expecter) Close() *ConnectionInterface_Close_Call {
	return &ConnectionInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ConnectionInterface_Close_Call) Run(run func()) *ConnectionInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionInterface_Close_Call) Return(err error) *ConnectionInterface_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectionInterface_Close_Call) RunAndReturn(run func() error) *ConnectionInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) Read() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectionInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ConnectionInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *ConnectionInterface_Expecter) Read() *ConnectionInterface_Read_Call {
	return &ConnectionInterface_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *ConnectionInterface_Read_Call) Run(run func()) *ConnectionInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionInterface_Read_Call) Return(data []byte, err error) *ConnectionInterface_Read_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *ConnectionInterface_Read_Call) RunAndReturn(run func() ([]byte, error)) *ConnectionInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteIP provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) RemoteIP() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteIP")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ConnectionInterface_RemoteIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteIP'
type ConnectionInterface_RemoteIP_Call struct {
	*mock.Call
}

// RemoteIP is a helper method to define mock.On call
func (_e *ConnectionInterface_Expecter) RemoteIP() *ConnectionInterface_RemoteIP_Call {
	return &ConnectionInterface_RemoteIP_Call{Call: _e.mock.On("RemoteIP")}
}

func (_c *ConnectionInterface_RemoteIP_Call) Run(run func()) *ConnectionInterface_RemoteIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionInterface_RemoteIP_Call) Return(s string) *ConnectionInterface_RemoteIP_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ConnectionInterface_RemoteIP_Call) RunAndReturn(run func() string) *ConnectionInterface_RemoteIP_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompress provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) SetCompress(compress bool) {
	_mock.Called(compress)
	return
}

// ConnectionInterface_SetCompress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompress'
type ConnectionInterface_SetCompress_Call struct {
	*mock.Call
}

// SetCompress is a helper method to define mock.On call
//   - compress
func (_e *ConnectionInterface_Expecter) SetCompress(compress interface{}) *ConnectionInterface_SetCompress_Call {
	return &ConnectionInterface_SetCompress_Call{Call: _e.mock.On("SetCompress", compress)}
}

func (_c *ConnectionInterface_SetCompress_Call) Run(run func(compress bool)) *ConnectionInterface_SetCompress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *ConnectionInterface_SetCompress_Call) Return() *ConnectionInterface_SetCompress_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionInterface_SetCompress_Call) RunAndReturn(run func(compress bool)) *ConnectionInterface_SetCompress_Call {
	_c.Run(run)
	return _c
}

// Write provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) Write(data []byte) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectionInterface_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ConnectionInterface_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - data
func (_e *ConnectionInterface_Expecter) Write(data interface{}) *ConnectionInterface_Write_Call {
	return &ConnectionInterface_Write_Call{Call: _e.mock.On("Write", data)}
}

func (_c *ConnectionInterface_Write_Call) Run(run func(data []byte)) *ConnectionInterface_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ConnectionInterface_Write_Call) Return(err error) *ConnectionInterface_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectionInterface_Write_Call) RunAndReturn(run func(data []byte) error) *ConnectionInterface_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function for the type ConnectionInterface
func (_mock *ConnectionInterface) WriteString(s string) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectionInterface_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type ConnectionInterface_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - s
func (_e *ConnectionInterface_Expecter) WriteString(s interface{}) *ConnectionInterface_WriteString_Call {
	return &ConnectionInterface_WriteString_Call{Call: _e.mock.On("WriteString", s)}
}

func (_c *ConnectionInterface_WriteString_Call) Run(run func(s string)) *ConnectionInterface_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConnectionInterface_WriteString_Call) Return(err error) *ConnectionInterface_WriteString_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectionInterface_WriteString_Call) RunAndReturn(run func(s string) error) *ConnectionInterface_WriteString_Call {
	_c.Call.Return(run)
	return _c
}
